09/16 08:49:21 AM: Git branch: master
09/16 08:49:21 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:49:21 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-hotpot-mix/",
  "exp_name": "experiments/spr2-hotpot-mix",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-hotpot-mix/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/hotpot",
  "pytorch_transformers_output_mode": "mix",
  "remote_log_name": "experiments/spr2-hotpot-mix__run",
  "run_dir": "./experiments/spr2-hotpot-mix/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:49:21 AM: Saved config to ./experiments/spr2-hotpot-mix/run/params.conf
09/16 08:49:21 AM: Using random seed 1234
09/16 08:49:23 AM: Using GPU 0
09/16 08:49:23 AM: Loading tasks...
09/16 08:49:23 AM: Writing pre-preprocessed tasks to ./experiments/spr2-hotpot-mix/
09/16 08:49:23 AM: 	Creating task edges-spr2 from scratch.
09/16 08:49:23 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:49:23 AM: 	Finished loading tasks: edges-spr2.
09/16 08:49:23 AM: 	Building vocab from scratch.
09/16 08:49:23 AM: 	Counting units for task edges-spr2.
09/16 08:49:23 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:49:24 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:24 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:49:25 AM: 	Saved vocab to ./experiments/spr2-hotpot-mix/vocab
09/16 08:49:25 AM: Loading token dictionary from ./experiments/spr2-hotpot-mix/vocab.
09/16 08:49:25 AM: 	Loaded vocab from ./experiments/spr2-hotpot-mix/vocab
09/16 08:49:25 AM: 	Vocab namespace tokens: size 7943
09/16 08:49:25 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:49:25 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:49:25 AM: 	Vocab namespace chars: size 65
09/16 08:49:25 AM: 	Finished building vocab.
09/16 08:49:25 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:49:26 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-hotpot-mix/preproc/edges-spr2__train_data
09/16 08:49:26 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:49:26 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-hotpot-mix/preproc/edges-spr2__val_data
09/16 08:49:26 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:49:26 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-hotpot-mix/preproc/edges-spr2__test_data
09/16 08:49:26 AM: 	Finished indexing tasks
09/16 08:49:26 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:49:26 AM: 	  Training on 
09/16 08:49:26 AM: 	  Evaluating on edges-spr2
09/16 08:49:26 AM: 	Finished loading tasks in 3.348s
09/16 08:49:26 AM: 	 Tasks: ['edges-spr2']
09/16 08:49:26 AM: Building model...
09/16 08:49:26 AM: Using BERT model (bert-base-uncased).
09/16 08:49:26 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:49:26 AM: models/hotpot
09/16 08:49:26 AM: loading configuration file models/hotpot/config.json
09/16 08:49:26 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:49:26 AM: loading weights file models/hotpot/pytorch_model.bin
09/16 08:49:36 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmph22ofo2l
09/16 08:49:38 AM: copying /tmp/tmph22ofo2l to cache at ./experiments/spr2-hotpot-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:38 AM: creating metadata file for ./experiments/spr2-hotpot-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:38 AM: removing temp file /tmp/tmph22ofo2l
09/16 08:49:38 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-hotpot-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:38 AM: NOTE: pytorch_transformers_output_mode='mix', so scalar mixing weights will be fine-tuned even if BERT model is frozen.
09/16 08:49:38 AM: Initializing parameters
09/16 08:49:38 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:49:38 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:49:38 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:49:38 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:49:38 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.gamma
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.0
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.1
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.10
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.11
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.12
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.2
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.3
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.4
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.5
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.6
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.7
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.8
09/16 08:49:38 AM:    _text_field_embedder.scalar_mix.scalar_parameters.9
09/16 08:49:38 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:49:43 AM: Model specification:
09/16 08:49:43 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
      (scalar_mix): ScalarMix(
        (scalar_parameters): ParameterList(
            (0): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (1): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (2): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (3): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (4): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (5): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (6): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (7): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (8): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (9): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (10): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (11): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (12): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:49:43 AM: Model parameters:
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.gamma: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.0: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.1: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.2: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.3: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.4: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.5: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.6: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.7: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.8: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.9: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.10: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.11: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.12: Trainable parameter, count 1 with torch.Size([1])
09/16 08:49:43 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:49:43 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:43 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:49:43 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:43 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:49:43 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:43 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:43 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:43 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:49:43 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:49:43 AM: Total number of parameters: 110144034 (1.10144e+08)
09/16 08:49:43 AM: Number of trainable parameters: 661794 (661794)
09/16 08:49:43 AM: Finished building model in 17.175s
09/16 08:49:43 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:49:44 AM: patience = 9
09/16 08:49:44 AM: val_interval = 100
09/16 08:49:44 AM: max_vals = 100
09/16 08:49:44 AM: cuda_device = 0
09/16 08:49:44 AM: grad_norm = 5.0
09/16 08:49:44 AM: grad_clipping = None
09/16 08:49:44 AM: lr_decay = 0.99
09/16 08:49:44 AM: min_lr = 1e-06
09/16 08:49:44 AM: keep_all_checkpoints = 0
09/16 08:49:44 AM: val_data_limit = 5000
09/16 08:49:44 AM: max_epochs = -1
09/16 08:49:44 AM: dec_val_scale = 250
09/16 08:49:44 AM: training_data_fraction = 1
09/16 08:49:44 AM: type = adam
09/16 08:49:44 AM: parameter_groups = None
09/16 08:49:44 AM: Number of trainable parameters: 661794
09/16 08:49:44 AM: infer_type_and_cast = True
09/16 08:49:44 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:44 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:44 AM: lr = 0.0001
09/16 08:49:44 AM: amsgrad = True
09/16 08:49:44 AM: type = reduce_on_plateau
09/16 08:49:44 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:44 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:44 AM: mode = max
09/16 08:49:44 AM: factor = 0.5
09/16 08:49:44 AM: patience = 3
09/16 08:49:44 AM: threshold = 0.0001
09/16 08:49:44 AM: threshold_mode = abs
09/16 08:49:44 AM: verbose = True
09/16 08:49:44 AM: type = adam
09/16 08:49:44 AM: parameter_groups = None
09/16 08:49:44 AM: Number of trainable parameters: 661794
09/16 08:49:44 AM: infer_type_and_cast = True
09/16 08:49:44 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:44 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:44 AM: lr = 0.0001
09/16 08:49:44 AM: amsgrad = True
09/16 08:49:44 AM: type = reduce_on_plateau
09/16 08:49:44 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:44 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:44 AM: mode = max
09/16 08:49:44 AM: factor = 0.5
09/16 08:49:44 AM: patience = 3
09/16 08:49:44 AM: threshold = 0.0001
09/16 08:49:44 AM: threshold_mode = abs
09/16 08:49:44 AM: verbose = True
09/16 08:49:44 AM: Starting training without restoring from a checkpoint.
09/16 08:49:44 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:49:44 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:49:54 AM: ***** Step 100 / Validation 1 *****
09/16 08:49:54 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:49:54 AM: Validating...
09/16 08:49:54 AM: Evaluate: task edges-spr2, batch 6 (10): mcc: 0.6992, acc: 0.0860, precision: 0.8602, recall: 0.7587, f1: 0.8063, edges-spr2_loss: 0.3151
09/16 08:49:55 AM: Best result seen so far for edges-spr2.
09/16 08:49:55 AM: Best result seen so far for micro.
09/16 08:49:55 AM: Best result seen so far for macro.
09/16 08:49:55 AM: Updating LR scheduler:
09/16 08:49:55 AM: 	Best result seen so far for macro_avg: 0.798
09/16 08:49:55 AM: 	# validation passes without improvement: 0
09/16 08:49:55 AM: edges-spr2_loss: training: 0.378400 validation: 0.339292
09/16 08:49:55 AM: macro_avg: validation: 0.798145
09/16 08:49:55 AM: micro_avg: validation: 0.000000
09/16 08:49:55 AM: edges-spr2_mcc: training: 0.619391 validation: 0.693025
09/16 08:49:55 AM: edges-spr2_acc: training: 0.041731 validation: 0.088889
09/16 08:49:55 AM: edges-spr2_precision: training: 0.776378 validation: 0.852415
09/16 08:49:55 AM: edges-spr2_recall: training: 0.733588 validation: 0.750372
09/16 08:49:55 AM: edges-spr2_f1: training: 0.754377 validation: 0.798145
09/16 08:49:55 AM: Global learning rate: 0.0001
09/16 08:49:55 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:03 AM: ***** Step 200 / Validation 2 *****
09/16 08:50:03 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:03 AM: Validating...
09/16 08:50:04 AM: Best result seen so far for edges-spr2.
09/16 08:50:04 AM: Best result seen so far for macro.
09/16 08:50:04 AM: Updating LR scheduler:
09/16 08:50:04 AM: 	Best result seen so far for macro_avg: 0.819
09/16 08:50:04 AM: 	# validation passes without improvement: 0
09/16 08:50:04 AM: edges-spr2_loss: training: 0.311716 validation: 0.321760
09/16 08:50:04 AM: macro_avg: validation: 0.818672
09/16 08:50:04 AM: micro_avg: validation: 0.000000
09/16 08:50:04 AM: edges-spr2_mcc: training: 0.695413 validation: 0.717793
09/16 08:50:04 AM: edges-spr2_acc: training: 0.064761 validation: 0.101587
09/16 08:50:04 AM: edges-spr2_precision: training: 0.827847 validation: 0.848858
09/16 08:50:04 AM: edges-spr2_recall: training: 0.779185 validation: 0.790559
09/16 08:50:04 AM: edges-spr2_f1: training: 0.802779 validation: 0.818672
09/16 08:50:04 AM: Global learning rate: 0.0001
09/16 08:50:04 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:04 AM: Update 201: task edges-spr2, batch 1 (201): mcc: 0.7092, acc: 0.0469, precision: 0.8319, recall: 0.7966, f1: 0.8139, edges-spr2_loss: 0.3063
09/16 08:50:13 AM: ***** Step 300 / Validation 3 *****
09/16 08:50:13 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:13 AM: Validating...
09/16 08:50:14 AM: Best result seen so far for edges-spr2.
09/16 08:50:14 AM: Best result seen so far for macro.
09/16 08:50:14 AM: Updating LR scheduler:
09/16 08:50:14 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:50:14 AM: 	# validation passes without improvement: 0
09/16 08:50:14 AM: edges-spr2_loss: training: 0.292439 validation: 0.317717
09/16 08:50:14 AM: macro_avg: validation: 0.822328
09/16 08:50:14 AM: micro_avg: validation: 0.000000
09/16 08:50:14 AM: edges-spr2_mcc: training: 0.713907 validation: 0.720515
09/16 08:50:14 AM: edges-spr2_acc: training: 0.078862 validation: 0.087302
09/16 08:50:14 AM: edges-spr2_precision: training: 0.838079 validation: 0.840400
09/16 08:50:14 AM: edges-spr2_recall: training: 0.793554 validation: 0.805018
09/16 08:50:14 AM: edges-spr2_f1: training: 0.815209 validation: 0.822328
09/16 08:50:14 AM: Global learning rate: 0.0001
09/16 08:50:14 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:14 AM: Update 305: task edges-spr2, batch 5 (305): mcc: 0.7119, acc: 0.0815, precision: 0.8192, recall: 0.8139, f1: 0.8165, edges-spr2_loss: 0.2835
09/16 08:50:22 AM: ***** Step 400 / Validation 4 *****
09/16 08:50:22 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:22 AM: Validating...
09/16 08:50:23 AM: Updating LR scheduler:
09/16 08:50:23 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:50:23 AM: 	# validation passes without improvement: 1
09/16 08:50:23 AM: edges-spr2_loss: training: 0.281352 validation: 0.317105
09/16 08:50:23 AM: macro_avg: validation: 0.819312
09/16 08:50:23 AM: micro_avg: validation: 0.000000
09/16 08:50:23 AM: edges-spr2_mcc: training: 0.725333 validation: 0.720743
09/16 08:50:23 AM: edges-spr2_acc: training: 0.080226 validation: 0.092063
09/16 08:50:23 AM: edges-spr2_precision: training: 0.840692 validation: 0.856977
09/16 08:50:23 AM: edges-spr2_recall: training: 0.806608 validation: 0.784818
09/16 08:50:23 AM: edges-spr2_f1: training: 0.823297 validation: 0.819312
09/16 08:50:23 AM: Global learning rate: 0.0001
09/16 08:50:23 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:24 AM: Update 414: task edges-spr2, batch 14 (414): mcc: 0.7201, acc: 0.0850, precision: 0.8373, recall: 0.8037, f1: 0.8202, edges-spr2_loss: 0.2817
09/16 08:50:32 AM: ***** Step 500 / Validation 5 *****
09/16 08:50:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:32 AM: Validating...
09/16 08:50:33 AM: Best result seen so far for edges-spr2.
09/16 08:50:33 AM: Best result seen so far for macro.
09/16 08:50:33 AM: Updating LR scheduler:
09/16 08:50:33 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:50:33 AM: 	# validation passes without improvement: 0
09/16 08:50:33 AM: edges-spr2_loss: training: 0.273172 validation: 0.312204
09/16 08:50:33 AM: macro_avg: validation: 0.822911
09/16 08:50:33 AM: micro_avg: validation: 0.000000
09/16 08:50:33 AM: edges-spr2_mcc: training: 0.731565 validation: 0.723232
09/16 08:50:33 AM: edges-spr2_acc: training: 0.091154 validation: 0.092063
09/16 08:50:33 AM: edges-spr2_precision: training: 0.846087 validation: 0.848464
09/16 08:50:33 AM: edges-spr2_recall: training: 0.809479 validation: 0.798852
09/16 08:50:33 AM: edges-spr2_f1: training: 0.827378 validation: 0.822911
09/16 08:50:33 AM: Global learning rate: 0.0001
09/16 08:50:33 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:34 AM: Update 516: task edges-spr2, batch 16 (516): mcc: 0.7296, acc: 0.0820, precision: 0.8455, recall: 0.8069, f1: 0.8257, edges-spr2_loss: 0.2740
09/16 08:50:42 AM: ***** Step 600 / Validation 6 *****
09/16 08:50:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:42 AM: Validating...
09/16 08:50:43 AM: Updating LR scheduler:
09/16 08:50:43 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:50:43 AM: 	# validation passes without improvement: 1
09/16 08:50:43 AM: edges-spr2_loss: training: 0.267890 validation: 0.311715
09/16 08:50:43 AM: macro_avg: validation: 0.822860
09/16 08:50:43 AM: micro_avg: validation: 0.000000
09/16 08:50:43 AM: edges-spr2_mcc: training: 0.736301 validation: 0.723078
09/16 08:50:43 AM: edges-spr2_acc: training: 0.088757 validation: 0.084127
09/16 08:50:43 AM: edges-spr2_precision: training: 0.847786 validation: 0.848116
09/16 08:50:43 AM: edges-spr2_recall: training: 0.813731 validation: 0.799064
09/16 08:50:43 AM: edges-spr2_f1: training: 0.830409 validation: 0.822860
09/16 08:50:43 AM: Global learning rate: 0.0001
09/16 08:50:43 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:44 AM: Update 620: task edges-spr2, batch 20 (620): mcc: 0.7481, acc: 0.0893, precision: 0.8543, recall: 0.8239, f1: 0.8388, edges-spr2_loss: 0.2587
09/16 08:50:51 AM: ***** Step 700 / Validation 7 *****
09/16 08:50:51 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:51 AM: Validating...
09/16 08:50:52 AM: Best result seen so far for edges-spr2.
09/16 08:50:52 AM: Best result seen so far for macro.
09/16 08:50:52 AM: Updating LR scheduler:
09/16 08:50:52 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:50:52 AM: 	# validation passes without improvement: 0
09/16 08:50:52 AM: edges-spr2_loss: training: 0.260937 validation: 0.311323
09/16 08:50:52 AM: macro_avg: validation: 0.823401
09/16 08:50:52 AM: micro_avg: validation: 0.000000
09/16 08:50:52 AM: edges-spr2_mcc: training: 0.743575 validation: 0.722866
09/16 08:50:52 AM: edges-spr2_acc: training: 0.094359 validation: 0.092063
09/16 08:50:52 AM: edges-spr2_precision: training: 0.853208 validation: 0.844281
09/16 08:50:52 AM: edges-spr2_recall: training: 0.817868 validation: 0.803530
09/16 08:50:52 AM: edges-spr2_f1: training: 0.835164 validation: 0.823401
09/16 08:50:52 AM: Global learning rate: 0.0001
09/16 08:50:52 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:50:54 AM: Update 721: task edges-spr2, batch 21 (721): mcc: 0.7364, acc: 0.0860, precision: 0.8466, recall: 0.8174, f1: 0.8317, edges-spr2_loss: 0.2667
09/16 08:51:01 AM: ***** Step 800 / Validation 8 *****
09/16 08:51:01 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:01 AM: Validating...
09/16 08:51:02 AM: Best result seen so far for edges-spr2.
09/16 08:51:02 AM: Best result seen so far for macro.
09/16 08:51:02 AM: Updating LR scheduler:
09/16 08:51:02 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:02 AM: 	# validation passes without improvement: 0
09/16 08:51:02 AM: edges-spr2_loss: training: 0.257241 validation: 0.312935
09/16 08:51:02 AM: macro_avg: validation: 0.824740
09/16 08:51:02 AM: micro_avg: validation: 0.000000
09/16 08:51:02 AM: edges-spr2_mcc: training: 0.749120 validation: 0.726006
09/16 08:51:02 AM: edges-spr2_acc: training: 0.102381 validation: 0.092063
09/16 08:51:02 AM: edges-spr2_precision: training: 0.854398 validation: 0.849955
09/16 08:51:02 AM: edges-spr2_recall: training: 0.824101 validation: 0.800978
09/16 08:51:02 AM: edges-spr2_f1: training: 0.838976 validation: 0.824740
09/16 08:51:02 AM: Global learning rate: 0.0001
09/16 08:51:02 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:51:05 AM: Update 832: task edges-spr2, batch 32 (832): mcc: 0.7515, acc: 0.0983, precision: 0.8571, recall: 0.8239, f1: 0.8401, edges-spr2_loss: 0.2550
09/16 08:51:10 AM: ***** Step 900 / Validation 9 *****
09/16 08:51:10 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:10 AM: Validating...
09/16 08:51:11 AM: Updating LR scheduler:
09/16 08:51:11 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:11 AM: 	# validation passes without improvement: 1
09/16 08:51:11 AM: edges-spr2_loss: training: 0.252234 validation: 0.318022
09/16 08:51:11 AM: macro_avg: validation: 0.819985
09/16 08:51:11 AM: micro_avg: validation: 0.000000
09/16 08:51:11 AM: edges-spr2_mcc: training: 0.752338 validation: 0.718738
09/16 08:51:11 AM: edges-spr2_acc: training: 0.103241 validation: 0.087302
09/16 08:51:11 AM: edges-spr2_precision: training: 0.856878 validation: 0.845841
09/16 08:51:11 AM: edges-spr2_recall: training: 0.825143 validation: 0.795662
09/16 08:51:11 AM: edges-spr2_f1: training: 0.840712 validation: 0.819985
09/16 08:51:11 AM: Global learning rate: 0.0001
09/16 08:51:11 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:51:15 AM: Update 939: task edges-spr2, batch 39 (939): mcc: 0.7525, acc: 0.1121, precision: 0.8564, recall: 0.8271, f1: 0.8415, edges-spr2_loss: 0.2529
09/16 08:51:20 AM: ***** Step 1000 / Validation 10 *****
09/16 08:51:20 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:20 AM: Validating...
09/16 08:51:21 AM: Updating LR scheduler:
09/16 08:51:21 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:21 AM: 	# validation passes without improvement: 2
09/16 08:51:21 AM: edges-spr2_loss: training: 0.250872 validation: 0.313868
09/16 08:51:21 AM: macro_avg: validation: 0.819417
09/16 08:51:21 AM: micro_avg: validation: 0.000000
09/16 08:51:21 AM: edges-spr2_mcc: training: 0.754388 validation: 0.717873
09/16 08:51:21 AM: edges-spr2_acc: training: 0.111712 validation: 0.079365
09/16 08:51:21 AM: edges-spr2_precision: training: 0.859023 validation: 0.845354
09/16 08:51:21 AM: edges-spr2_recall: training: 0.827020 validation: 0.795024
09/16 08:51:21 AM: edges-spr2_f1: training: 0.842718 validation: 0.819417
09/16 08:51:21 AM: Global learning rate: 0.0001
09/16 08:51:21 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:51:25 AM: Update 1051: task edges-spr2, batch 51 (1051): mcc: 0.7551, acc: 0.1081, precision: 0.8585, recall: 0.8269, f1: 0.8424, edges-spr2_loss: 0.2513
09/16 08:51:29 AM: ***** Step 1100 / Validation 11 *****
09/16 08:51:29 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:29 AM: Validating...
09/16 08:51:30 AM: Updating LR scheduler:
09/16 08:51:30 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:30 AM: 	# validation passes without improvement: 3
09/16 08:51:30 AM: edges-spr2_loss: training: 0.247376 validation: 0.313642
09/16 08:51:30 AM: macro_avg: validation: 0.818572
09/16 08:51:30 AM: micro_avg: validation: 0.000000
09/16 08:51:30 AM: edges-spr2_mcc: training: 0.757713 validation: 0.717481
09/16 08:51:30 AM: edges-spr2_acc: training: 0.108689 validation: 0.085714
09/16 08:51:30 AM: edges-spr2_precision: training: 0.858906 validation: 0.848153
09/16 08:51:30 AM: edges-spr2_recall: training: 0.830418 validation: 0.790984
09/16 08:51:30 AM: edges-spr2_f1: training: 0.844422 validation: 0.818572
09/16 08:51:30 AM: Global learning rate: 0.0001
09/16 08:51:30 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:51:35 AM: Update 1164: task edges-spr2, batch 64 (1164): mcc: 0.7553, acc: 0.1114, precision: 0.8575, recall: 0.8290, f1: 0.8430, edges-spr2_loss: 0.2462
09/16 08:51:38 AM: ***** Step 1200 / Validation 12 *****
09/16 08:51:38 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:38 AM: Validating...
09/16 08:51:39 AM: Updating LR scheduler:
09/16 08:51:39 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:39 AM: 	# validation passes without improvement: 0
09/16 08:51:39 AM: edges-spr2_loss: training: 0.245997 validation: 0.316959
09/16 08:51:39 AM: macro_avg: validation: 0.820685
09/16 08:51:39 AM: micro_avg: validation: 0.000000
09/16 08:51:39 AM: edges-spr2_mcc: training: 0.756425 validation: 0.717566
09/16 08:51:39 AM: edges-spr2_acc: training: 0.112523 validation: 0.079365
09/16 08:51:39 AM: edges-spr2_precision: training: 0.858514 validation: 0.837204
09/16 08:51:39 AM: edges-spr2_recall: training: 0.829612 validation: 0.804805
09/16 08:51:39 AM: edges-spr2_f1: training: 0.843816 validation: 0.820685
09/16 08:51:39 AM: Global learning rate: 5e-05
09/16 08:51:39 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:51:45 AM: Update 1272: task edges-spr2, batch 72 (1272): mcc: 0.7656, acc: 0.1210, precision: 0.8644, recall: 0.8349, f1: 0.8494, edges-spr2_loss: 0.2387
09/16 08:51:47 AM: ***** Step 1300 / Validation 13 *****
09/16 08:51:47 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:47 AM: Validating...
09/16 08:51:48 AM: Updating LR scheduler:
09/16 08:51:48 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:48 AM: 	# validation passes without improvement: 1
09/16 08:51:48 AM: edges-spr2_loss: training: 0.238103 validation: 0.317851
09/16 08:51:48 AM: macro_avg: validation: 0.818715
09/16 08:51:48 AM: micro_avg: validation: 0.000000
09/16 08:51:48 AM: edges-spr2_mcc: training: 0.766532 validation: 0.714728
09/16 08:51:48 AM: edges-spr2_acc: training: 0.118732 validation: 0.088889
09/16 08:51:48 AM: edges-spr2_precision: training: 0.865082 validation: 0.836327
09/16 08:51:48 AM: edges-spr2_recall: training: 0.835467 validation: 0.801829
09/16 08:51:48 AM: edges-spr2_f1: training: 0.850017 validation: 0.818715
09/16 08:51:48 AM: Global learning rate: 5e-05
09/16 08:51:48 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:51:55 AM: Update 1386: task edges-spr2, batch 86 (1386): mcc: 0.7647, acc: 0.1177, precision: 0.8640, recall: 0.8355, f1: 0.8495, edges-spr2_loss: 0.2387
09/16 08:51:56 AM: ***** Step 1400 / Validation 14 *****
09/16 08:51:56 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:56 AM: Validating...
09/16 08:51:57 AM: Updating LR scheduler:
09/16 08:51:57 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:51:57 AM: 	# validation passes without improvement: 2
09/16 08:51:57 AM: edges-spr2_loss: training: 0.238122 validation: 0.315831
09/16 08:51:57 AM: macro_avg: validation: 0.817367
09/16 08:51:57 AM: micro_avg: validation: 0.000000
09/16 08:51:57 AM: edges-spr2_mcc: training: 0.765488 validation: 0.714211
09/16 08:51:57 AM: edges-spr2_acc: training: 0.119977 validation: 0.088889
09/16 08:51:57 AM: edges-spr2_precision: training: 0.863821 validation: 0.841477
09/16 08:51:57 AM: edges-spr2_recall: training: 0.836296 validation: 0.794599
09/16 08:51:57 AM: edges-spr2_f1: training: 0.849836 validation: 0.817367
09/16 08:51:57 AM: Global learning rate: 5e-05
09/16 08:51:57 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:52:05 AM: Update 1491: task edges-spr2, batch 91 (1491): mcc: 0.7663, acc: 0.1189, precision: 0.8647, recall: 0.8360, f1: 0.8501, edges-spr2_loss: 0.2375
09/16 08:52:06 AM: ***** Step 1500 / Validation 15 *****
09/16 08:52:06 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:52:06 AM: Validating...
09/16 08:52:07 AM: Updating LR scheduler:
09/16 08:52:07 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:52:07 AM: 	# validation passes without improvement: 3
09/16 08:52:07 AM: edges-spr2_loss: training: 0.236339 validation: 0.316693
09/16 08:52:07 AM: macro_avg: validation: 0.820446
09/16 08:52:07 AM: micro_avg: validation: 0.000000
09/16 08:52:07 AM: edges-spr2_mcc: training: 0.767774 validation: 0.716967
09/16 08:52:07 AM: edges-spr2_acc: training: 0.120022 validation: 0.079365
09/16 08:52:07 AM: edges-spr2_precision: training: 0.865757 validation: 0.836019
09/16 08:52:07 AM: edges-spr2_recall: training: 0.837286 validation: 0.805443
09/16 08:52:07 AM: edges-spr2_f1: training: 0.851284 validation: 0.820446
09/16 08:52:07 AM: Global learning rate: 5e-05
09/16 08:52:07 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:52:14 AM: ***** Step 1600 / Validation 16 *****
09/16 08:52:14 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:52:14 AM: Validating...
09/16 08:52:15 AM: Evaluate: task edges-spr2, batch 8 (10): mcc: 0.7214, acc: 0.0873, precision: 0.8448, recall: 0.8050, f1: 0.8244, edges-spr2_loss: 0.2944
09/16 08:52:15 AM: Updating LR scheduler:
09/16 08:52:15 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:52:15 AM: 	# validation passes without improvement: 0
09/16 08:52:15 AM: edges-spr2_loss: training: 0.235095 validation: 0.317078
09/16 08:52:15 AM: macro_avg: validation: 0.816710
09/16 08:52:15 AM: micro_avg: validation: 0.000000
09/16 08:52:15 AM: edges-spr2_mcc: training: 0.769173 validation: 0.713181
09/16 08:52:15 AM: edges-spr2_acc: training: 0.124064 validation: 0.085714
09/16 08:52:15 AM: edges-spr2_precision: training: 0.865800 validation: 0.840802
09/16 08:52:15 AM: edges-spr2_recall: training: 0.838390 validation: 0.793961
09/16 08:52:15 AM: edges-spr2_f1: training: 0.851874 validation: 0.816710
09/16 08:52:15 AM: Global learning rate: 2.5e-05
09/16 08:52:15 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:52:24 AM: ***** Step 1700 / Validation 17 *****
09/16 08:52:24 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:52:24 AM: Validating...
09/16 08:52:25 AM: Updating LR scheduler:
09/16 08:52:25 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:52:25 AM: 	# validation passes without improvement: 1
09/16 08:52:25 AM: edges-spr2_loss: training: 0.233560 validation: 0.317230
09/16 08:52:25 AM: macro_avg: validation: 0.817509
09/16 08:52:25 AM: micro_avg: validation: 0.000000
09/16 08:52:25 AM: edges-spr2_mcc: training: 0.769233 validation: 0.713475
09/16 08:52:25 AM: edges-spr2_acc: training: 0.120147 validation: 0.087302
09/16 08:52:25 AM: edges-spr2_precision: training: 0.866943 validation: 0.837759
09/16 08:52:25 AM: edges-spr2_recall: training: 0.837234 validation: 0.798214
09/16 08:52:25 AM: edges-spr2_f1: training: 0.851829 validation: 0.817509
09/16 08:52:25 AM: Global learning rate: 2.5e-05
09/16 08:52:25 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:52:25 AM: Update 1708: task edges-spr2, batch 8 (1708): mcc: 0.7811, acc: 0.1333, precision: 0.8730, recall: 0.8451, f1: 0.8588, edges-spr2_loss: 0.2279
09/16 08:52:33 AM: ***** Step 1800 / Validation 18 *****
09/16 08:52:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:52:33 AM: Validating...
09/16 08:52:34 AM: Updating LR scheduler:
09/16 08:52:34 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:52:34 AM: 	# validation passes without improvement: 2
09/16 08:52:34 AM: Ran out of early stopping patience. Stopping training.
09/16 08:52:34 AM: edges-spr2_loss: training: 0.232138 validation: 0.318517
09/16 08:52:34 AM: macro_avg: validation: 0.819732
09/16 08:52:34 AM: micro_avg: validation: 0.000000
09/16 08:52:34 AM: edges-spr2_mcc: training: 0.773616 validation: 0.715187
09/16 08:52:34 AM: edges-spr2_acc: training: 0.126584 validation: 0.084127
09/16 08:52:34 AM: edges-spr2_precision: training: 0.868378 validation: 0.832493
09/16 08:52:34 AM: edges-spr2_recall: training: 0.841774 validation: 0.807357
09/16 08:52:34 AM: edges-spr2_f1: training: 0.854869 validation: 0.819732
09/16 08:52:34 AM: Global learning rate: 2.5e-05
09/16 08:52:34 AM: Saving checkpoints to: ./experiments/spr2-hotpot-mix/run
09/16 08:52:34 AM: Stopped training after 18 validation checks
09/16 08:52:34 AM: Trained edges-spr2 for 1800 batches or 25.714 epochs
09/16 08:52:34 AM: ***** VALIDATION RESULTS *****
09/16 08:52:34 AM: edges-spr2_f1 (for best val pass 8): edges-spr2_loss: 0.31293, macro_avg: 0.82474, micro_avg: 0.00000, edges-spr2_mcc: 0.72601, edges-spr2_acc: 0.09206, edges-spr2_precision: 0.84995, edges-spr2_recall: 0.80098, edges-spr2_f1: 0.82474
09/16 08:52:34 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33929, macro_avg: 0.79815, micro_avg: 0.00000, edges-spr2_mcc: 0.69302, edges-spr2_acc: 0.08889, edges-spr2_precision: 0.85242, edges-spr2_recall: 0.75037, edges-spr2_f1: 0.79815
09/16 08:52:34 AM: macro_avg (for best val pass 8): edges-spr2_loss: 0.31293, macro_avg: 0.82474, micro_avg: 0.00000, edges-spr2_mcc: 0.72601, edges-spr2_acc: 0.09206, edges-spr2_precision: 0.84995, edges-spr2_recall: 0.80098, edges-spr2_f1: 0.82474
09/16 08:52:34 AM: Evaluating...
09/16 08:52:34 AM: Loaded model state from ./experiments/spr2-hotpot-mix/run/edges-spr2/model_state_target_train_val_8.best.th
09/16 08:52:34 AM: Evaluating on: edges-spr2, split: val
09/16 08:52:35 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:52:35 AM: Finished evaluating on: edges-spr2
09/16 08:52:35 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:52:35 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-hotpot-mix/run
09/16 08:52:35 AM: Wrote all preds for split 'val' to ./experiments/spr2-hotpot-mix/run
09/16 08:52:35 AM: Evaluating on: edges-spr2, split: test
09/16 08:52:36 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:52:36 AM: Finished evaluating on: edges-spr2
09/16 08:52:36 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:52:36 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-hotpot-mix/run
09/16 08:52:36 AM: Wrote all preds for split 'test' to ./experiments/spr2-hotpot-mix/run
09/16 08:52:36 AM: Writing results for split 'val' to ./experiments/spr2-hotpot-mix/results.tsv
09/16 08:52:36 AM: micro_avg: 0.000, macro_avg: 0.825, edges-spr2_mcc: 0.726, edges-spr2_acc: 0.092, edges-spr2_precision: 0.850, edges-spr2_recall: 0.801, edges-spr2_f1: 0.825
09/16 08:52:36 AM: Done!
09/16 08:52:36 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
