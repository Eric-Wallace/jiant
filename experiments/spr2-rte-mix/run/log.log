09/16 08:24:42 AM: Git branch: master
09/16 08:24:42 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:24:42 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-rte-mix/",
  "exp_name": "experiments/spr2-rte-mix",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-rte-mix/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/rte",
  "pytorch_transformers_output_mode": "mix",
  "remote_log_name": "experiments/spr2-rte-mix__run",
  "run_dir": "./experiments/spr2-rte-mix/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:24:42 AM: Saved config to ./experiments/spr2-rte-mix/run/params.conf
09/16 08:24:42 AM: Using random seed 1234
09/16 08:24:44 AM: Using GPU 0
09/16 08:24:44 AM: Loading tasks...
09/16 08:24:44 AM: Writing pre-preprocessed tasks to ./experiments/spr2-rte-mix/
09/16 08:24:44 AM: 	Creating task edges-spr2 from scratch.
09/16 08:24:44 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:24:44 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:24:44 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:24:44 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:24:44 AM: 	Finished loading tasks: edges-spr2.
09/16 08:24:44 AM: 	Building vocab from scratch.
09/16 08:24:44 AM: 	Counting units for task edges-spr2.
09/16 08:24:44 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:24:45 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:45 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:24:46 AM: 	Saved vocab to ./experiments/spr2-rte-mix/vocab
09/16 08:24:46 AM: Loading token dictionary from ./experiments/spr2-rte-mix/vocab.
09/16 08:24:46 AM: 	Loaded vocab from ./experiments/spr2-rte-mix/vocab
09/16 08:24:46 AM: 	Vocab namespace tokens: size 7943
09/16 08:24:46 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:24:46 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:24:46 AM: 	Vocab namespace chars: size 65
09/16 08:24:46 AM: 	Finished building vocab.
09/16 08:24:46 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:24:46 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-rte-mix/preproc/edges-spr2__train_data
09/16 08:24:46 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:24:46 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-rte-mix/preproc/edges-spr2__val_data
09/16 08:24:46 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:24:46 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-rte-mix/preproc/edges-spr2__test_data
09/16 08:24:46 AM: 	Finished indexing tasks
09/16 08:24:46 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:24:46 AM: 	  Training on 
09/16 08:24:46 AM: 	  Evaluating on edges-spr2
09/16 08:24:46 AM: 	Finished loading tasks in 2.380s
09/16 08:24:46 AM: 	 Tasks: ['edges-spr2']
09/16 08:24:46 AM: Building model...
09/16 08:24:46 AM: Using BERT model (bert-base-uncased).
09/16 08:24:46 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:24:46 AM: models/rte
09/16 08:24:46 AM: loading configuration file models/rte/config.json
09/16 08:24:46 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "rte",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:24:46 AM: loading weights file models/rte/pytorch_model.bin
09/16 08:24:56 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpvm1vunc9
09/16 08:24:57 AM: copying /tmp/tmpvm1vunc9 to cache at ./experiments/spr2-rte-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:57 AM: creating metadata file for ./experiments/spr2-rte-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:57 AM: removing temp file /tmp/tmpvm1vunc9
09/16 08:24:57 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-rte-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:57 AM: NOTE: pytorch_transformers_output_mode='mix', so scalar mixing weights will be fine-tuned even if BERT model is frozen.
09/16 08:24:57 AM: Initializing parameters
09/16 08:24:57 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:24:57 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:24:57 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:24:57 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:24:57 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.gamma
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.0
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.1
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.10
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.11
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.12
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.2
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.3
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.4
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.5
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.6
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.7
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.8
09/16 08:24:57 AM:    _text_field_embedder.scalar_mix.scalar_parameters.9
09/16 08:24:57 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:25:03 AM: Model specification:
09/16 08:25:03 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
      (scalar_mix): ScalarMix(
        (scalar_parameters): ParameterList(
            (0): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (1): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (2): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (3): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (4): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (5): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (6): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (7): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (8): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (9): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (10): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (11): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (12): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:25:03 AM: Model parameters:
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.gamma: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.0: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.1: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.2: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.3: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.4: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.5: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.6: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.7: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.8: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.9: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.10: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.11: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.12: Trainable parameter, count 1 with torch.Size([1])
09/16 08:25:03 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:25:03 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:03 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:25:03 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:03 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:25:03 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:03 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:03 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:03 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:25:03 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:25:03 AM: Total number of parameters: 110144034 (1.10144e+08)
09/16 08:25:03 AM: Number of trainable parameters: 661794 (661794)
09/16 08:25:03 AM: Finished building model in 17.135s
09/16 08:25:03 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:25:04 AM: patience = 9
09/16 08:25:04 AM: val_interval = 100
09/16 08:25:04 AM: max_vals = 100
09/16 08:25:04 AM: cuda_device = 0
09/16 08:25:04 AM: grad_norm = 5.0
09/16 08:25:04 AM: grad_clipping = None
09/16 08:25:04 AM: lr_decay = 0.99
09/16 08:25:04 AM: min_lr = 1e-06
09/16 08:25:04 AM: keep_all_checkpoints = 0
09/16 08:25:04 AM: val_data_limit = 5000
09/16 08:25:04 AM: max_epochs = -1
09/16 08:25:04 AM: dec_val_scale = 250
09/16 08:25:04 AM: training_data_fraction = 1
09/16 08:25:04 AM: type = adam
09/16 08:25:04 AM: parameter_groups = None
09/16 08:25:04 AM: Number of trainable parameters: 661794
09/16 08:25:04 AM: infer_type_and_cast = True
09/16 08:25:04 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:04 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:04 AM: lr = 0.0001
09/16 08:25:04 AM: amsgrad = True
09/16 08:25:04 AM: type = reduce_on_plateau
09/16 08:25:04 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:04 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:04 AM: mode = max
09/16 08:25:04 AM: factor = 0.5
09/16 08:25:04 AM: patience = 3
09/16 08:25:04 AM: threshold = 0.0001
09/16 08:25:04 AM: threshold_mode = abs
09/16 08:25:04 AM: verbose = True
09/16 08:25:04 AM: type = adam
09/16 08:25:04 AM: parameter_groups = None
09/16 08:25:04 AM: Number of trainable parameters: 661794
09/16 08:25:04 AM: infer_type_and_cast = True
09/16 08:25:04 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:04 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:04 AM: lr = 0.0001
09/16 08:25:04 AM: amsgrad = True
09/16 08:25:04 AM: type = reduce_on_plateau
09/16 08:25:04 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:04 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:04 AM: mode = max
09/16 08:25:04 AM: factor = 0.5
09/16 08:25:04 AM: patience = 3
09/16 08:25:04 AM: threshold = 0.0001
09/16 08:25:04 AM: threshold_mode = abs
09/16 08:25:04 AM: verbose = True
09/16 08:25:04 AM: Starting training without restoring from a checkpoint.
09/16 08:25:04 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:25:04 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:25:13 AM: ***** Step 100 / Validation 1 *****
09/16 08:25:13 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:13 AM: Validating...
09/16 08:25:14 AM: Best result seen so far for edges-spr2.
09/16 08:25:14 AM: Best result seen so far for micro.
09/16 08:25:14 AM: Best result seen so far for macro.
09/16 08:25:14 AM: Updating LR scheduler:
09/16 08:25:14 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:25:14 AM: 	# validation passes without improvement: 0
09/16 08:25:14 AM: edges-spr2_loss: training: 0.377030 validation: 0.339628
09/16 08:25:14 AM: macro_avg: validation: 0.803251
09/16 08:25:14 AM: micro_avg: validation: 0.000000
09/16 08:25:14 AM: edges-spr2_mcc: training: 0.623693 validation: 0.700382
09/16 08:25:14 AM: edges-spr2_acc: training: 0.043423 validation: 0.092063
09/16 08:25:14 AM: edges-spr2_precision: training: 0.777451 validation: 0.856112
09/16 08:25:14 AM: edges-spr2_recall: training: 0.738749 validation: 0.756538
09/16 08:25:14 AM: edges-spr2_f1: training: 0.757606 validation: 0.803251
09/16 08:25:14 AM: Global learning rate: 0.0001
09/16 08:25:14 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:25:14 AM: Update 103: task edges-spr2, batch 3 (103): mcc: 0.6879, acc: 0.0659, precision: 0.8262, recall: 0.7742, f1: 0.7994, edges-spr2_loss: 0.3219
09/16 08:25:23 AM: ***** Step 200 / Validation 2 *****
09/16 08:25:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:23 AM: Validating...
09/16 08:25:24 AM: Best result seen so far for edges-spr2.
09/16 08:25:24 AM: Best result seen so far for macro.
09/16 08:25:24 AM: Updating LR scheduler:
09/16 08:25:24 AM: 	Best result seen so far for macro_avg: 0.819
09/16 08:25:24 AM: 	# validation passes without improvement: 0
09/16 08:25:24 AM: edges-spr2_loss: training: 0.306325 validation: 0.322191
09/16 08:25:24 AM: macro_avg: validation: 0.819140
09/16 08:25:24 AM: micro_avg: validation: 0.000000
09/16 08:25:24 AM: edges-spr2_mcc: training: 0.703613 validation: 0.717786
09/16 08:25:24 AM: edges-spr2_acc: training: 0.074196 validation: 0.095238
09/16 08:25:24 AM: edges-spr2_precision: training: 0.832576 validation: 0.846450
09/16 08:25:24 AM: edges-spr2_recall: training: 0.785233 validation: 0.793536
09/16 08:25:24 AM: edges-spr2_f1: training: 0.808212 validation: 0.819140
09/16 08:25:24 AM: Global learning rate: 0.0001
09/16 08:25:24 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:25:24 AM: Update 204: task edges-spr2, batch 4 (204): mcc: 0.7167, acc: 0.0435, precision: 0.8347, recall: 0.8018, f1: 0.8179, edges-spr2_loss: 0.2927
09/16 08:25:34 AM: ***** Step 300 / Validation 3 *****
09/16 08:25:34 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:34 AM: Validating...
09/16 08:25:34 AM: Evaluate: task edges-spr2, batch 6 (10): mcc: 0.7345, acc: 0.0884, precision: 0.8533, recall: 0.8172, f1: 0.8349, edges-spr2_loss: 0.2804
09/16 08:25:35 AM: Best result seen so far for edges-spr2.
09/16 08:25:35 AM: Best result seen so far for macro.
09/16 08:25:35 AM: Updating LR scheduler:
09/16 08:25:35 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:25:35 AM: 	# validation passes without improvement: 0
09/16 08:25:35 AM: edges-spr2_loss: training: 0.286325 validation: 0.317430
09/16 08:25:35 AM: macro_avg: validation: 0.823954
09/16 08:25:35 AM: micro_avg: validation: 0.000000
09/16 08:25:35 AM: edges-spr2_mcc: training: 0.722627 validation: 0.724797
09/16 08:25:35 AM: edges-spr2_acc: training: 0.083959 validation: 0.092063
09/16 08:25:35 AM: edges-spr2_precision: training: 0.841823 validation: 0.849244
09/16 08:25:35 AM: edges-spr2_recall: training: 0.801534 validation: 0.800128
09/16 08:25:35 AM: edges-spr2_f1: training: 0.821184 validation: 0.823954
09/16 08:25:35 AM: Global learning rate: 0.0001
09/16 08:25:35 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:25:44 AM: ***** Step 400 / Validation 4 *****
09/16 08:25:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:44 AM: Validating...
09/16 08:25:44 AM: Evaluate: task edges-spr2, batch 9 (10): mcc: 0.7267, acc: 0.0973, precision: 0.8615, recall: 0.7881, f1: 0.8232, edges-spr2_loss: 0.2864
09/16 08:25:44 AM: Updating LR scheduler:
09/16 08:25:44 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:25:44 AM: 	# validation passes without improvement: 1
09/16 08:25:44 AM: edges-spr2_loss: training: 0.275388 validation: 0.318037
09/16 08:25:44 AM: macro_avg: validation: 0.822079
09/16 08:25:44 AM: micro_avg: validation: 0.000000
09/16 08:25:44 AM: edges-spr2_mcc: training: 0.731497 validation: 0.725220
09/16 08:25:44 AM: edges-spr2_acc: training: 0.086158 validation: 0.096825
09/16 08:25:44 AM: edges-spr2_precision: training: 0.844287 validation: 0.860498
09/16 08:25:44 AM: edges-spr2_recall: training: 0.811037 validation: 0.786945
09/16 08:25:44 AM: edges-spr2_f1: training: 0.827328 validation: 0.822079
09/16 08:25:44 AM: Global learning rate: 0.0001
09/16 08:25:44 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:25:53 AM: ***** Step 500 / Validation 5 *****
09/16 08:25:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:53 AM: Validating...
09/16 08:25:54 AM: Best result seen so far for edges-spr2.
09/16 08:25:54 AM: Best result seen so far for macro.
09/16 08:25:54 AM: Updating LR scheduler:
09/16 08:25:54 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:25:54 AM: 	# validation passes without improvement: 0
09/16 08:25:54 AM: edges-spr2_loss: training: 0.267367 validation: 0.313388
09/16 08:25:54 AM: macro_avg: validation: 0.824898
09/16 08:25:54 AM: micro_avg: validation: 0.000000
09/16 08:25:54 AM: edges-spr2_mcc: training: 0.739751 validation: 0.726887
09/16 08:25:54 AM: edges-spr2_acc: training: 0.093568 validation: 0.090476
09/16 08:25:54 AM: edges-spr2_precision: training: 0.850619 validation: 0.852701
09/16 08:25:54 AM: edges-spr2_recall: training: 0.815647 validation: 0.798852
09/16 08:25:54 AM: edges-spr2_f1: training: 0.832766 validation: 0.824898
09/16 08:25:54 AM: Global learning rate: 0.0001
09/16 08:25:54 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:25:54 AM: Update 503: task edges-spr2, batch 3 (503): mcc: 0.7189, acc: 0.0816, precision: 0.8473, recall: 0.7909, f1: 0.8181, edges-spr2_loss: 0.2803
09/16 08:26:03 AM: ***** Step 600 / Validation 6 *****
09/16 08:26:03 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:03 AM: Validating...
09/16 08:26:04 AM: Best result seen so far for edges-spr2.
09/16 08:26:04 AM: Best result seen so far for macro.
09/16 08:26:04 AM: Updating LR scheduler:
09/16 08:26:04 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:26:04 AM: 	# validation passes without improvement: 0
09/16 08:26:04 AM: edges-spr2_loss: training: 0.261186 validation: 0.314234
09/16 08:26:04 AM: macro_avg: validation: 0.825652
09/16 08:26:04 AM: micro_avg: validation: 0.000000
09/16 08:26:04 AM: edges-spr2_mcc: training: 0.743951 validation: 0.725933
09/16 08:26:04 AM: edges-spr2_acc: training: 0.097070 validation: 0.079365
09/16 08:26:04 AM: edges-spr2_precision: training: 0.852129 validation: 0.844563
09/16 08:26:04 AM: edges-spr2_recall: training: 0.819362 validation: 0.807570
09/16 08:26:04 AM: edges-spr2_f1: training: 0.835424 validation: 0.825652
09/16 08:26:04 AM: Global learning rate: 0.0001
09/16 08:26:04 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:26:05 AM: Update 609: task edges-spr2, batch 9 (609): mcc: 0.7613, acc: 0.0873, precision: 0.8646, recall: 0.8315, f1: 0.8477, edges-spr2_loss: 0.2491
09/16 08:26:12 AM: ***** Step 700 / Validation 7 *****
09/16 08:26:12 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:12 AM: Validating...
09/16 08:26:13 AM: Updating LR scheduler:
09/16 08:26:13 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:26:13 AM: 	# validation passes without improvement: 1
09/16 08:26:13 AM: edges-spr2_loss: training: 0.254209 validation: 0.315455
09/16 08:26:13 AM: macro_avg: validation: 0.822605
09/16 08:26:13 AM: micro_avg: validation: 0.000000
09/16 08:26:13 AM: edges-spr2_mcc: training: 0.752937 validation: 0.721916
09/16 08:26:13 AM: edges-spr2_acc: training: 0.102646 validation: 0.085714
09/16 08:26:13 AM: edges-spr2_precision: training: 0.858573 validation: 0.844723
09/16 08:26:13 AM: edges-spr2_recall: training: 0.824682 validation: 0.801616
09/16 08:26:13 AM: edges-spr2_f1: training: 0.841286 validation: 0.822605
09/16 08:26:13 AM: Global learning rate: 0.0001
09/16 08:26:13 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:26:15 AM: Update 712: task edges-spr2, batch 12 (712): mcc: 0.7384, acc: 0.0841, precision: 0.8421, recall: 0.8233, f1: 0.8326, edges-spr2_loss: 0.2618
09/16 08:26:22 AM: ***** Step 800 / Validation 8 *****
09/16 08:26:22 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:22 AM: Validating...
09/16 08:26:23 AM: Updating LR scheduler:
09/16 08:26:23 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:26:23 AM: 	# validation passes without improvement: 2
09/16 08:26:23 AM: edges-spr2_loss: training: 0.250408 validation: 0.317821
09/16 08:26:23 AM: macro_avg: validation: 0.824004
09/16 08:26:23 AM: micro_avg: validation: 0.000000
09/16 08:26:23 AM: edges-spr2_mcc: training: 0.756227 validation: 0.724139
09/16 08:26:23 AM: edges-spr2_acc: training: 0.108941 validation: 0.090476
09/16 08:26:23 AM: edges-spr2_precision: training: 0.858913 validation: 0.846257
09/16 08:26:23 AM: edges-spr2_recall: training: 0.828724 validation: 0.802892
09/16 08:26:23 AM: edges-spr2_f1: training: 0.843548 validation: 0.824004
09/16 08:26:23 AM: Global learning rate: 0.0001
09/16 08:26:23 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:26:25 AM: Update 818: task edges-spr2, batch 18 (818): mcc: 0.7609, acc: 0.1073, precision: 0.8600, recall: 0.8328, f1: 0.8462, edges-spr2_loss: 0.2480
09/16 08:26:32 AM: ***** Step 900 / Validation 9 *****
09/16 08:26:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:32 AM: Validating...
09/16 08:26:33 AM: Updating LR scheduler:
09/16 08:26:33 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:26:33 AM: 	# validation passes without improvement: 3
09/16 08:26:33 AM: edges-spr2_loss: training: 0.246551 validation: 0.322342
09/16 08:26:33 AM: macro_avg: validation: 0.823504
09/16 08:26:33 AM: micro_avg: validation: 0.000000
09/16 08:26:33 AM: edges-spr2_mcc: training: 0.758753 validation: 0.723564
09/16 08:26:33 AM: edges-spr2_acc: training: 0.108097 validation: 0.079365
09/16 08:26:33 AM: edges-spr2_precision: training: 0.859702 validation: 0.846620
09/16 08:26:33 AM: edges-spr2_recall: training: 0.830843 validation: 0.801616
09/16 08:26:33 AM: edges-spr2_f1: training: 0.845026 validation: 0.823504
09/16 08:26:33 AM: Global learning rate: 0.0001
09/16 08:26:33 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:26:35 AM: Update 914: task edges-spr2, batch 14 (914): mcc: 0.7464, acc: 0.1079, precision: 0.8496, recall: 0.8293, f1: 0.8393, edges-spr2_loss: 0.2587
09/16 08:26:43 AM: ***** Step 1000 / Validation 10 *****
09/16 08:26:43 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:43 AM: Validating...
09/16 08:26:44 AM: Updating LR scheduler:
09/16 08:26:44 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:26:44 AM: 	# validation passes without improvement: 0
09/16 08:26:44 AM: edges-spr2_loss: training: 0.244446 validation: 0.321008
09/16 08:26:44 AM: macro_avg: validation: 0.820783
09/16 08:26:44 AM: micro_avg: validation: 0.000000
09/16 08:26:44 AM: edges-spr2_mcc: training: 0.761590 validation: 0.720089
09/16 08:26:44 AM: edges-spr2_acc: training: 0.114627 validation: 0.077778
09/16 08:26:44 AM: edges-spr2_precision: training: 0.863249 validation: 0.847059
09/16 08:26:44 AM: edges-spr2_recall: training: 0.832100 validation: 0.796088
09/16 08:26:44 AM: edges-spr2_f1: training: 0.847388 validation: 0.820783
09/16 08:26:44 AM: Global learning rate: 5e-05
09/16 08:26:44 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:26:45 AM: Update 1015: task edges-spr2, batch 15 (1015): mcc: 0.7710, acc: 0.1167, precision: 0.8687, recall: 0.8411, f1: 0.8546, edges-spr2_loss: 0.2397
09/16 08:26:52 AM: ***** Step 1100 / Validation 11 *****
09/16 08:26:52 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:52 AM: Validating...
09/16 08:26:53 AM: Updating LR scheduler:
09/16 08:26:53 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:26:53 AM: 	# validation passes without improvement: 1
09/16 08:26:53 AM: edges-spr2_loss: training: 0.238804 validation: 0.319467
09/16 08:26:53 AM: macro_avg: validation: 0.821576
09/16 08:26:53 AM: micro_avg: validation: 0.000000
09/16 08:26:53 AM: edges-spr2_mcc: training: 0.767560 validation: 0.719194
09/16 08:26:53 AM: edges-spr2_acc: training: 0.117698 validation: 0.076190
09/16 08:26:53 AM: edges-spr2_precision: training: 0.864890 validation: 0.839060
09/16 08:26:53 AM: edges-spr2_recall: training: 0.837151 validation: 0.804805
09/16 08:26:53 AM: edges-spr2_f1: training: 0.850795 validation: 0.821576
09/16 08:26:53 AM: Global learning rate: 5e-05
09/16 08:26:53 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:26:55 AM: Update 1121: task edges-spr2, batch 21 (1121): mcc: 0.7665, acc: 0.1261, precision: 0.8664, recall: 0.8345, f1: 0.8501, edges-spr2_loss: 0.2429
09/16 08:27:02 AM: ***** Step 1200 / Validation 12 *****
09/16 08:27:02 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:02 AM: Validating...
09/16 08:27:03 AM: Updating LR scheduler:
09/16 08:27:03 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:27:03 AM: 	# validation passes without improvement: 2
09/16 08:27:03 AM: edges-spr2_loss: training: 0.237835 validation: 0.321966
09/16 08:27:03 AM: macro_avg: validation: 0.821992
09/16 08:27:03 AM: micro_avg: validation: 0.000000
09/16 08:27:03 AM: edges-spr2_mcc: training: 0.767110 validation: 0.720510
09/16 08:27:03 AM: edges-spr2_acc: training: 0.122016 validation: 0.074603
09/16 08:27:03 AM: edges-spr2_precision: training: 0.865864 validation: 0.842258
09/16 08:27:03 AM: edges-spr2_recall: training: 0.835872 validation: 0.802679
09/16 08:27:03 AM: edges-spr2_f1: training: 0.850603 validation: 0.821992
09/16 08:27:03 AM: Global learning rate: 5e-05
09/16 08:27:03 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:27:05 AM: Update 1225: task edges-spr2, batch 25 (1225): mcc: 0.7734, acc: 0.1238, precision: 0.8680, recall: 0.8427, f1: 0.8551, edges-spr2_loss: 0.2348
09/16 08:27:12 AM: ***** Step 1300 / Validation 13 *****
09/16 08:27:12 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:12 AM: Validating...
09/16 08:27:13 AM: Updating LR scheduler:
09/16 08:27:13 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:27:13 AM: 	# validation passes without improvement: 3
09/16 08:27:13 AM: edges-spr2_loss: training: 0.233430 validation: 0.323081
09/16 08:27:13 AM: macro_avg: validation: 0.820962
09/16 08:27:13 AM: micro_avg: validation: 0.000000
09/16 08:27:13 AM: edges-spr2_mcc: training: 0.774536 validation: 0.717324
09/16 08:27:13 AM: edges-spr2_acc: training: 0.125360 validation: 0.087302
09/16 08:27:13 AM: edges-spr2_precision: training: 0.869167 validation: 0.834578
09/16 08:27:13 AM: edges-spr2_recall: training: 0.841867 validation: 0.807782
09/16 08:27:13 AM: edges-spr2_f1: training: 0.855299 validation: 0.820962
09/16 08:27:13 AM: Global learning rate: 5e-05
09/16 08:27:13 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:27:16 AM: Update 1331: task edges-spr2, batch 31 (1331): mcc: 0.7712, acc: 0.1237, precision: 0.8652, recall: 0.8435, f1: 0.8542, edges-spr2_loss: 0.2350
09/16 08:27:22 AM: ***** Step 1400 / Validation 14 *****
09/16 08:27:22 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:22 AM: Validating...
09/16 08:27:23 AM: Updating LR scheduler:
09/16 08:27:23 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:27:23 AM: 	# validation passes without improvement: 0
09/16 08:27:23 AM: edges-spr2_loss: training: 0.233163 validation: 0.322050
09/16 08:27:23 AM: macro_avg: validation: 0.819561
09/16 08:27:23 AM: micro_avg: validation: 0.000000
09/16 08:27:23 AM: edges-spr2_mcc: training: 0.772272 validation: 0.717249
09/16 08:27:23 AM: edges-spr2_acc: training: 0.127077 validation: 0.082540
09/16 08:27:23 AM: edges-spr2_precision: training: 0.866677 validation: 0.842082
09/16 08:27:23 AM: edges-spr2_recall: training: 0.842420 validation: 0.798214
09/16 08:27:23 AM: edges-spr2_f1: training: 0.854377 validation: 0.819561
09/16 08:27:23 AM: Global learning rate: 2.5e-05
09/16 08:27:23 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:27:26 AM: Update 1430: task edges-spr2, batch 30 (1430): mcc: 0.7767, acc: 0.1376, precision: 0.8728, recall: 0.8405, f1: 0.8564, edges-spr2_loss: 0.2288
09/16 08:27:32 AM: ***** Step 1500 / Validation 15 *****
09/16 08:27:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:32 AM: Validating...
09/16 08:27:33 AM: Updating LR scheduler:
09/16 08:27:33 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:27:33 AM: 	# validation passes without improvement: 1
09/16 08:27:33 AM: edges-spr2_loss: training: 0.230837 validation: 0.321974
09/16 08:27:33 AM: macro_avg: validation: 0.823021
09/16 08:27:33 AM: micro_avg: validation: 0.000000
09/16 08:27:33 AM: edges-spr2_mcc: training: 0.775507 validation: 0.720452
09/16 08:27:33 AM: edges-spr2_acc: training: 0.129803 validation: 0.087302
09/16 08:27:33 AM: edges-spr2_precision: training: 0.870947 validation: 0.836112
09/16 08:27:33 AM: edges-spr2_recall: training: 0.841957 validation: 0.810334
09/16 08:27:33 AM: edges-spr2_f1: training: 0.856207 validation: 0.823021
09/16 08:27:33 AM: Global learning rate: 2.5e-05
09/16 08:27:33 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:27:36 AM: Update 1532: task edges-spr2, batch 32 (1532): mcc: 0.7747, acc: 0.1283, precision: 0.8679, recall: 0.8430, f1: 0.8553, edges-spr2_loss: 0.2312
09/16 08:27:42 AM: ***** Step 1600 / Validation 16 *****
09/16 08:27:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:42 AM: Validating...
09/16 08:27:43 AM: Updating LR scheduler:
09/16 08:27:43 AM: 	Best result seen so far for macro_avg: 0.826
09/16 08:27:43 AM: 	# validation passes without improvement: 2
09/16 08:27:43 AM: Ran out of early stopping patience. Stopping training.
09/16 08:27:43 AM: edges-spr2_loss: training: 0.230266 validation: 0.322867
09/16 08:27:43 AM: macro_avg: validation: 0.819298
09/16 08:27:43 AM: micro_avg: validation: 0.000000
09/16 08:27:43 AM: edges-spr2_mcc: training: 0.776533 validation: 0.715853
09/16 08:27:43 AM: edges-spr2_acc: training: 0.130397 validation: 0.084127
09/16 08:27:43 AM: edges-spr2_precision: training: 0.870084 validation: 0.837778
09/16 08:27:43 AM: edges-spr2_recall: training: 0.843637 validation: 0.801616
09/16 08:27:43 AM: edges-spr2_f1: training: 0.856656 validation: 0.819298
09/16 08:27:43 AM: Global learning rate: 2.5e-05
09/16 08:27:43 AM: Saving checkpoints to: ./experiments/spr2-rte-mix/run
09/16 08:27:43 AM: Stopped training after 16 validation checks
09/16 08:27:43 AM: Trained edges-spr2 for 1600 batches or 22.857 epochs
09/16 08:27:43 AM: ***** VALIDATION RESULTS *****
09/16 08:27:43 AM: edges-spr2_f1 (for best val pass 6): edges-spr2_loss: 0.31423, macro_avg: 0.82565, micro_avg: 0.00000, edges-spr2_mcc: 0.72593, edges-spr2_acc: 0.07937, edges-spr2_precision: 0.84456, edges-spr2_recall: 0.80757, edges-spr2_f1: 0.82565
09/16 08:27:43 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33963, macro_avg: 0.80325, micro_avg: 0.00000, edges-spr2_mcc: 0.70038, edges-spr2_acc: 0.09206, edges-spr2_precision: 0.85611, edges-spr2_recall: 0.75654, edges-spr2_f1: 0.80325
09/16 08:27:43 AM: macro_avg (for best val pass 6): edges-spr2_loss: 0.31423, macro_avg: 0.82565, micro_avg: 0.00000, edges-spr2_mcc: 0.72593, edges-spr2_acc: 0.07937, edges-spr2_precision: 0.84456, edges-spr2_recall: 0.80757, edges-spr2_f1: 0.82565
09/16 08:27:43 AM: Evaluating...
09/16 08:27:43 AM: Loaded model state from ./experiments/spr2-rte-mix/run/edges-spr2/model_state_target_train_val_6.best.th
09/16 08:27:43 AM: Evaluating on: edges-spr2, split: val
09/16 08:27:44 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:27:44 AM: Finished evaluating on: edges-spr2
09/16 08:27:44 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:27:44 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-rte-mix/run
09/16 08:27:44 AM: Wrote all preds for split 'val' to ./experiments/spr2-rte-mix/run
09/16 08:27:44 AM: Evaluating on: edges-spr2, split: test
09/16 08:27:45 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:27:45 AM: Finished evaluating on: edges-spr2
09/16 08:27:45 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:27:45 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-rte-mix/run
09/16 08:27:45 AM: Wrote all preds for split 'test' to ./experiments/spr2-rte-mix/run
09/16 08:27:45 AM: Writing results for split 'val' to ./experiments/spr2-rte-mix/results.tsv
09/16 08:27:45 AM: micro_avg: 0.000, macro_avg: 0.826, edges-spr2_mcc: 0.726, edges-spr2_acc: 0.079, edges-spr2_precision: 0.845, edges-spr2_recall: 0.808, edges-spr2_f1: 0.826
09/16 08:27:45 AM: Done!
09/16 08:27:45 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
