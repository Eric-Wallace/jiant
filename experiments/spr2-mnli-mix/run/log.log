09/16 08:33:50 AM: Git branch: master
09/16 08:33:50 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:33:51 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-mnli-mix/",
  "exp_name": "experiments/spr2-mnli-mix",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-mnli-mix/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/mnli",
  "pytorch_transformers_output_mode": "mix",
  "remote_log_name": "experiments/spr2-mnli-mix__run",
  "run_dir": "./experiments/spr2-mnli-mix/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:33:51 AM: Saved config to ./experiments/spr2-mnli-mix/run/params.conf
09/16 08:33:51 AM: Using random seed 1234
09/16 08:33:52 AM: Using GPU 0
09/16 08:33:52 AM: Loading tasks...
09/16 08:33:52 AM: Writing pre-preprocessed tasks to ./experiments/spr2-mnli-mix/
09/16 08:33:52 AM: 	Creating task edges-spr2 from scratch.
09/16 08:33:52 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:33:53 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:33:53 AM: 	Finished loading tasks: edges-spr2.
09/16 08:33:53 AM: 	Building vocab from scratch.
09/16 08:33:53 AM: 	Counting units for task edges-spr2.
09/16 08:33:53 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:33:54 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:33:54 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:33:54 AM: 	Saved vocab to ./experiments/spr2-mnli-mix/vocab
09/16 08:33:54 AM: Loading token dictionary from ./experiments/spr2-mnli-mix/vocab.
09/16 08:33:54 AM: 	Loaded vocab from ./experiments/spr2-mnli-mix/vocab
09/16 08:33:54 AM: 	Vocab namespace tokens: size 7943
09/16 08:33:54 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:33:54 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:33:54 AM: 	Vocab namespace chars: size 65
09/16 08:33:54 AM: 	Finished building vocab.
09/16 08:33:54 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-mnli-mix/preproc/edges-spr2__train_data
09/16 08:33:55 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-mnli-mix/preproc/edges-spr2__val_data
09/16 08:33:55 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-mnli-mix/preproc/edges-spr2__test_data
09/16 08:33:55 AM: 	Finished indexing tasks
09/16 08:33:55 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:33:55 AM: 	  Training on 
09/16 08:33:55 AM: 	  Evaluating on edges-spr2
09/16 08:33:55 AM: 	Finished loading tasks in 2.454s
09/16 08:33:55 AM: 	 Tasks: ['edges-spr2']
09/16 08:33:55 AM: Building model...
09/16 08:33:55 AM: Using BERT model (bert-base-uncased).
09/16 08:33:55 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:33:55 AM: models/mnli
09/16 08:33:55 AM: loading configuration file models/mnli/config.json
09/16 08:33:55 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "mnli",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 3,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:33:55 AM: loading weights file models/mnli/pytorch_model.bin
09/16 08:34:05 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmp3rwb9eb_
09/16 08:34:07 AM: copying /tmp/tmp3rwb9eb_ to cache at ./experiments/spr2-mnli-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: creating metadata file for ./experiments/spr2-mnli-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: removing temp file /tmp/tmp3rwb9eb_
09/16 08:34:07 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-mnli-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: NOTE: pytorch_transformers_output_mode='mix', so scalar mixing weights will be fine-tuned even if BERT model is frozen.
09/16 08:34:07 AM: Initializing parameters
09/16 08:34:07 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.gamma
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.0
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.1
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.10
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.11
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.12
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.2
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.3
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.4
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.5
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.6
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.7
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.8
09/16 08:34:07 AM:    _text_field_embedder.scalar_mix.scalar_parameters.9
09/16 08:34:07 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:34:13 AM: Model specification:
09/16 08:34:13 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
      (scalar_mix): ScalarMix(
        (scalar_parameters): ParameterList(
            (0): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (1): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (2): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (3): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (4): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (5): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (6): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (7): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (8): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (9): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (10): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (11): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (12): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:34:13 AM: Model parameters:
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.gamma: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.0: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.1: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.2: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.3: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.4: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.5: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.6: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.7: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.8: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.9: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.10: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.11: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.12: Trainable parameter, count 1 with torch.Size([1])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:34:13 AM: Total number of parameters: 110144034 (1.10144e+08)
09/16 08:34:13 AM: Number of trainable parameters: 661794 (661794)
09/16 08:34:13 AM: Finished building model in 18.156s
09/16 08:34:13 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:34:14 AM: patience = 9
09/16 08:34:14 AM: val_interval = 100
09/16 08:34:14 AM: max_vals = 100
09/16 08:34:14 AM: cuda_device = 0
09/16 08:34:14 AM: grad_norm = 5.0
09/16 08:34:14 AM: grad_clipping = None
09/16 08:34:14 AM: lr_decay = 0.99
09/16 08:34:14 AM: min_lr = 1e-06
09/16 08:34:14 AM: keep_all_checkpoints = 0
09/16 08:34:14 AM: val_data_limit = 5000
09/16 08:34:14 AM: max_epochs = -1
09/16 08:34:14 AM: dec_val_scale = 250
09/16 08:34:14 AM: training_data_fraction = 1
09/16 08:34:14 AM: type = adam
09/16 08:34:14 AM: parameter_groups = None
09/16 08:34:14 AM: Number of trainable parameters: 661794
09/16 08:34:14 AM: infer_type_and_cast = True
09/16 08:34:14 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:14 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:14 AM: lr = 0.0001
09/16 08:34:14 AM: amsgrad = True
09/16 08:34:14 AM: type = reduce_on_plateau
09/16 08:34:14 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:14 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:14 AM: mode = max
09/16 08:34:14 AM: factor = 0.5
09/16 08:34:14 AM: patience = 3
09/16 08:34:14 AM: threshold = 0.0001
09/16 08:34:14 AM: threshold_mode = abs
09/16 08:34:14 AM: verbose = True
09/16 08:34:14 AM: type = adam
09/16 08:34:14 AM: parameter_groups = None
09/16 08:34:14 AM: Number of trainable parameters: 661794
09/16 08:34:14 AM: infer_type_and_cast = True
09/16 08:34:14 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:14 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:14 AM: lr = 0.0001
09/16 08:34:14 AM: amsgrad = True
09/16 08:34:14 AM: type = reduce_on_plateau
09/16 08:34:14 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:14 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:14 AM: mode = max
09/16 08:34:14 AM: factor = 0.5
09/16 08:34:14 AM: patience = 3
09/16 08:34:14 AM: threshold = 0.0001
09/16 08:34:14 AM: threshold_mode = abs
09/16 08:34:14 AM: verbose = True
09/16 08:34:14 AM: Starting training without restoring from a checkpoint.
09/16 08:34:14 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:34:14 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:34:23 AM: ***** Step 100 / Validation 1 *****
09/16 08:34:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:23 AM: Validating...
09/16 08:34:24 AM: Best result seen so far for edges-spr2.
09/16 08:34:24 AM: Best result seen so far for micro.
09/16 08:34:24 AM: Best result seen so far for macro.
09/16 08:34:24 AM: Updating LR scheduler:
09/16 08:34:24 AM: 	Best result seen so far for macro_avg: 0.806
09/16 08:34:24 AM: 	# validation passes without improvement: 0
09/16 08:34:24 AM: edges-spr2_loss: training: 0.377256 validation: 0.336186
09/16 08:34:24 AM: macro_avg: validation: 0.806209
09/16 08:34:24 AM: micro_avg: validation: 0.000000
09/16 08:34:24 AM: edges-spr2_mcc: training: 0.624992 validation: 0.703923
09/16 08:34:24 AM: edges-spr2_acc: training: 0.043846 validation: 0.092063
09/16 08:34:24 AM: edges-spr2_precision: training: 0.777176 validation: 0.855778
09/16 08:34:24 AM: edges-spr2_recall: training: 0.741137 validation: 0.762067
09/16 08:34:24 AM: edges-spr2_f1: training: 0.758729 validation: 0.806209
09/16 08:34:24 AM: Global learning rate: 0.0001
09/16 08:34:24 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:34:24 AM: Update 101: task edges-spr2, batch 1 (101): mcc: 0.7002, acc: 0.0984, precision: 0.8299, recall: 0.7899, f1: 0.8094, edges-spr2_loss: 0.3144
09/16 08:34:32 AM: ***** Step 200 / Validation 2 *****
09/16 08:34:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:32 AM: Validating...
09/16 08:34:32 AM: Best result seen so far for edges-spr2.
09/16 08:34:32 AM: Best result seen so far for macro.
09/16 08:34:32 AM: Updating LR scheduler:
09/16 08:34:32 AM: 	Best result seen so far for macro_avg: 0.821
09/16 08:34:32 AM: 	# validation passes without improvement: 0
09/16 08:34:32 AM: edges-spr2_loss: training: 0.305325 validation: 0.318914
09/16 08:34:32 AM: macro_avg: validation: 0.820974
09/16 08:34:32 AM: micro_avg: validation: 0.000000
09/16 08:34:32 AM: edges-spr2_mcc: training: 0.703378 validation: 0.720562
09/16 08:34:32 AM: edges-spr2_acc: training: 0.074196 validation: 0.100000
09/16 08:34:32 AM: edges-spr2_precision: training: 0.831666 validation: 0.847949
09/16 08:34:32 AM: edges-spr2_recall: training: 0.786036 validation: 0.795662
09/16 08:34:32 AM: edges-spr2_f1: training: 0.808207 validation: 0.820974
09/16 08:34:32 AM: Global learning rate: 0.0001
09/16 08:34:32 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:34:34 AM: Update 211: task edges-spr2, batch 11 (211): mcc: 0.7192, acc: 0.0737, precision: 0.8351, recall: 0.8059, f1: 0.8202, edges-spr2_loss: 0.2943
09/16 08:34:41 AM: ***** Step 300 / Validation 3 *****
09/16 08:34:41 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:41 AM: Validating...
09/16 08:34:42 AM: Best result seen so far for edges-spr2.
09/16 08:34:42 AM: Best result seen so far for macro.
09/16 08:34:42 AM: Updating LR scheduler:
09/16 08:34:42 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:34:42 AM: 	# validation passes without improvement: 0
09/16 08:34:42 AM: edges-spr2_loss: training: 0.285729 validation: 0.314206
09/16 08:34:42 AM: macro_avg: validation: 0.824226
09/16 08:34:42 AM: micro_avg: validation: 0.000000
09/16 08:34:42 AM: edges-spr2_mcc: training: 0.723484 validation: 0.725710
09/16 08:34:42 AM: edges-spr2_acc: training: 0.082826 validation: 0.088889
09/16 08:34:42 AM: edges-spr2_precision: training: 0.841511 validation: 0.851508
09/16 08:34:42 AM: edges-spr2_recall: training: 0.803161 validation: 0.798639
09/16 08:34:42 AM: edges-spr2_f1: training: 0.821889 validation: 0.824226
09/16 08:34:42 AM: Global learning rate: 0.0001
09/16 08:34:42 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:34:44 AM: Update 325: task edges-spr2, batch 25 (325): mcc: 0.7315, acc: 0.0851, precision: 0.8437, recall: 0.8105, f1: 0.8268, edges-spr2_loss: 0.2766
09/16 08:34:50 AM: ***** Step 400 / Validation 4 *****
09/16 08:34:50 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:50 AM: Validating...
09/16 08:34:51 AM: Updating LR scheduler:
09/16 08:34:51 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:34:51 AM: 	# validation passes without improvement: 1
09/16 08:34:51 AM: edges-spr2_loss: training: 0.275322 validation: 0.314438
09/16 08:34:51 AM: macro_avg: validation: 0.822600
09/16 08:34:51 AM: micro_avg: validation: 0.000000
09/16 08:34:51 AM: edges-spr2_mcc: training: 0.732214 validation: 0.726392
09/16 08:34:51 AM: edges-spr2_acc: training: 0.087288 validation: 0.090476
09/16 08:34:51 AM: edges-spr2_precision: training: 0.844965 validation: 0.862407
09/16 08:34:51 AM: edges-spr2_recall: training: 0.811231 validation: 0.786307
09/16 08:34:51 AM: edges-spr2_f1: training: 0.827754 validation: 0.822600
09/16 08:34:51 AM: Global learning rate: 0.0001
09/16 08:34:51 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:34:54 AM: Update 426: task edges-spr2, batch 26 (426): mcc: 0.7280, acc: 0.0923, precision: 0.8435, recall: 0.8074, f1: 0.8251, edges-spr2_loss: 0.2766
09/16 08:35:00 AM: ***** Step 500 / Validation 5 *****
09/16 08:35:00 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:00 AM: Validating...
09/16 08:35:01 AM: Best result seen so far for edges-spr2.
09/16 08:35:01 AM: Best result seen so far for macro.
09/16 08:35:01 AM: Updating LR scheduler:
09/16 08:35:01 AM: 	Best result seen so far for macro_avg: 0.825
09/16 08:35:01 AM: 	# validation passes without improvement: 0
09/16 08:35:01 AM: edges-spr2_loss: training: 0.267200 validation: 0.309205
09/16 08:35:01 AM: macro_avg: validation: 0.825159
09/16 08:35:01 AM: micro_avg: validation: 0.000000
09/16 08:35:01 AM: edges-spr2_mcc: training: 0.739587 validation: 0.727668
09/16 08:35:01 AM: edges-spr2_acc: training: 0.095414 validation: 0.088889
09/16 08:35:01 AM: edges-spr2_precision: training: 0.850617 validation: 0.854475
09/16 08:35:01 AM: edges-spr2_recall: training: 0.815414 validation: 0.797789
09/16 08:35:01 AM: edges-spr2_f1: training: 0.832644 validation: 0.825159
09/16 08:35:01 AM: Global learning rate: 0.0001
09/16 08:35:01 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:35:04 AM: Update 539: task edges-spr2, batch 39 (539): mcc: 0.7421, acc: 0.0954, precision: 0.8533, recall: 0.8156, f1: 0.8340, edges-spr2_loss: 0.2625
09/16 08:35:09 AM: ***** Step 600 / Validation 6 *****
09/16 08:35:09 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:09 AM: Validating...
09/16 08:35:10 AM: Best result seen so far for edges-spr2.
09/16 08:35:10 AM: Best result seen so far for macro.
09/16 08:35:10 AM: Updating LR scheduler:
09/16 08:35:10 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:35:10 AM: 	# validation passes without improvement: 0
09/16 08:35:10 AM: edges-spr2_loss: training: 0.261190 validation: 0.310338
09/16 08:35:10 AM: macro_avg: validation: 0.827001
09/16 08:35:10 AM: micro_avg: validation: 0.000000
09/16 08:35:10 AM: edges-spr2_mcc: training: 0.743048 validation: 0.728393
09/16 08:35:10 AM: edges-spr2_acc: training: 0.098056 validation: 0.085714
09/16 08:35:10 AM: edges-spr2_precision: training: 0.851043 validation: 0.847390
09/16 08:35:10 AM: edges-spr2_recall: training: 0.819400 validation: 0.807570
09/16 08:35:10 AM: edges-spr2_f1: training: 0.834922 validation: 0.827001
09/16 08:35:10 AM: Global learning rate: 0.0001
09/16 08:35:10 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:35:14 AM: Update 641: task edges-spr2, batch 41 (641): mcc: 0.7475, acc: 0.0944, precision: 0.8541, recall: 0.8217, f1: 0.8376, edges-spr2_loss: 0.2565
09/16 08:35:18 AM: ***** Step 700 / Validation 7 *****
09/16 08:35:18 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:18 AM: Validating...
09/16 08:35:19 AM: Updating LR scheduler:
09/16 08:35:19 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:35:19 AM: 	# validation passes without improvement: 1
09/16 08:35:19 AM: edges-spr2_loss: training: 0.253997 validation: 0.309726
09/16 08:35:19 AM: macro_avg: validation: 0.826381
09/16 08:35:19 AM: micro_avg: validation: 0.000000
09/16 08:35:19 AM: edges-spr2_mcc: training: 0.751794 validation: 0.728039
09/16 08:35:19 AM: edges-spr2_acc: training: 0.102065 validation: 0.090476
09/16 08:35:19 AM: edges-spr2_precision: training: 0.857166 validation: 0.849383
09/16 08:35:19 AM: edges-spr2_recall: training: 0.824761 validation: 0.804593
09/16 08:35:19 AM: edges-spr2_f1: training: 0.840652 validation: 0.826381
09/16 08:35:19 AM: Global learning rate: 0.0001
09/16 08:35:19 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:35:24 AM: Update 757: task edges-spr2, batch 57 (757): mcc: 0.7534, acc: 0.1035, precision: 0.8551, recall: 0.8288, f1: 0.8418, edges-spr2_loss: 0.2531
09/16 08:35:28 AM: ***** Step 800 / Validation 8 *****
09/16 08:35:28 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:28 AM: Validating...
09/16 08:35:29 AM: Best result seen so far for edges-spr2.
09/16 08:35:29 AM: Best result seen so far for macro.
09/16 08:35:29 AM: Updating LR scheduler:
09/16 08:35:29 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:35:29 AM: 	# validation passes without improvement: 0
09/16 08:35:29 AM: edges-spr2_loss: training: 0.251119 validation: 0.312150
09/16 08:35:29 AM: macro_avg: validation: 0.827382
09/16 08:35:29 AM: micro_avg: validation: 0.000000
09/16 08:35:29 AM: edges-spr2_mcc: training: 0.755625 validation: 0.730272
09/16 08:35:29 AM: edges-spr2_acc: training: 0.107800 validation: 0.098413
09/16 08:35:29 AM: edges-spr2_precision: training: 0.857644 validation: 0.853174
09/16 08:35:29 AM: edges-spr2_recall: training: 0.829406 validation: 0.803104
09/16 08:35:29 AM: edges-spr2_f1: training: 0.843289 validation: 0.827382
09/16 08:35:29 AM: Global learning rate: 0.0001
09/16 08:35:29 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:35:34 AM: Update 868: task edges-spr2, batch 68 (868): mcc: 0.7590, acc: 0.1132, precision: 0.8597, recall: 0.8312, f1: 0.8452, edges-spr2_loss: 0.2477
09/16 08:35:36 AM: ***** Step 900 / Validation 9 *****
09/16 08:35:36 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:36 AM: Validating...
09/16 08:35:37 AM: Updating LR scheduler:
09/16 08:35:37 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:35:37 AM: 	# validation passes without improvement: 1
09/16 08:35:37 AM: edges-spr2_loss: training: 0.246665 validation: 0.314911
09/16 08:35:37 AM: macro_avg: validation: 0.823684
09/16 08:35:37 AM: micro_avg: validation: 0.000000
09/16 08:35:37 AM: edges-spr2_mcc: training: 0.759902 validation: 0.724713
09/16 08:35:37 AM: edges-spr2_acc: training: 0.111381 validation: 0.090476
09/16 08:35:37 AM: edges-spr2_precision: training: 0.860452 validation: 0.850351
09/16 08:35:37 AM: edges-spr2_recall: training: 0.831567 validation: 0.798639
09/16 08:35:37 AM: edges-spr2_f1: training: 0.845763 validation: 0.823684
09/16 08:35:37 AM: Global learning rate: 0.0001
09/16 08:35:37 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:35:44 AM: Update 981: task edges-spr2, batch 81 (981): mcc: 0.7609, acc: 0.1165, precision: 0.8612, recall: 0.8333, f1: 0.8470, edges-spr2_loss: 0.2455
09/16 08:35:46 AM: ***** Step 1000 / Validation 10 *****
09/16 08:35:46 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:46 AM: Validating...
09/16 08:35:47 AM: Updating LR scheduler:
09/16 08:35:47 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:35:47 AM: 	# validation passes without improvement: 2
09/16 08:35:47 AM: edges-spr2_loss: training: 0.244696 validation: 0.314685
09/16 08:35:47 AM: macro_avg: validation: 0.820800
09/16 08:35:47 AM: micro_avg: validation: 0.000000
09/16 08:35:47 AM: edges-spr2_mcc: training: 0.761786 validation: 0.720792
09/16 08:35:47 AM: edges-spr2_acc: training: 0.116708 validation: 0.093651
09/16 08:35:47 AM: edges-spr2_precision: training: 0.862475 validation: 0.849761
09/16 08:35:47 AM: edges-spr2_recall: training: 0.833308 validation: 0.793749
09/16 08:35:47 AM: edges-spr2_f1: training: 0.847641 validation: 0.820800
09/16 08:35:47 AM: Global learning rate: 0.0001
09/16 08:35:47 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:35:54 AM: ***** Step 1100 / Validation 11 *****
09/16 08:35:54 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:54 AM: Validating...
09/16 08:35:54 AM: Evaluate: task edges-spr2, batch 1 (10): mcc: 0.7202, acc: 0.0811, precision: 0.8447, recall: 0.8162, f1: 0.8302, edges-spr2_loss: 0.2867
09/16 08:35:55 AM: Updating LR scheduler:
09/16 08:35:55 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:35:55 AM: 	# validation passes without improvement: 3
09/16 08:35:55 AM: edges-spr2_loss: training: 0.240006 validation: 0.313379
09/16 08:35:55 AM: macro_avg: validation: 0.820772
09/16 08:35:55 AM: micro_avg: validation: 0.000000
09/16 08:35:55 AM: edges-spr2_mcc: training: 0.765650 validation: 0.720926
09/16 08:35:55 AM: edges-spr2_acc: training: 0.118570 validation: 0.090476
09/16 08:35:55 AM: edges-spr2_precision: training: 0.864002 validation: 0.850433
09/16 08:35:55 AM: edges-spr2_recall: training: 0.835518 validation: 0.793111
09/16 08:35:55 AM: edges-spr2_f1: training: 0.849522 validation: 0.820772
09/16 08:35:55 AM: Global learning rate: 0.0001
09/16 08:35:55 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:04 AM: ***** Step 1200 / Validation 12 *****
09/16 08:36:04 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:04 AM: Validating...
09/16 08:36:04 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.7276, acc: 0.0731, precision: 0.8397, recall: 0.8228, f1: 0.8312, edges-spr2_loss: 0.2842
09/16 08:36:05 AM: Updating LR scheduler:
09/16 08:36:05 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:05 AM: 	# validation passes without improvement: 0
09/16 08:36:05 AM: edges-spr2_loss: training: 0.239721 validation: 0.317015
09/16 08:36:05 AM: macro_avg: validation: 0.820385
09/16 08:36:05 AM: micro_avg: validation: 0.000000
09/16 08:36:05 AM: edges-spr2_mcc: training: 0.765253 validation: 0.716695
09/16 08:36:05 AM: edges-spr2_acc: training: 0.121597 validation: 0.074603
09/16 08:36:05 AM: edges-spr2_precision: training: 0.864204 validation: 0.835206
09/16 08:36:05 AM: edges-spr2_recall: training: 0.835242 validation: 0.806081
09/16 08:36:05 AM: edges-spr2_f1: training: 0.849476 validation: 0.820385
09/16 08:36:05 AM: Global learning rate: 5e-05
09/16 08:36:05 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:12 AM: ***** Step 1300 / Validation 13 *****
09/16 08:36:12 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:12 AM: Validating...
09/16 08:36:13 AM: Updating LR scheduler:
09/16 08:36:13 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:13 AM: 	# validation passes without improvement: 1
09/16 08:36:13 AM: edges-spr2_loss: training: 0.231994 validation: 0.316533
09/16 08:36:13 AM: macro_avg: validation: 0.820108
09/16 08:36:13 AM: micro_avg: validation: 0.000000
09/16 08:36:13 AM: edges-spr2_mcc: training: 0.774495 validation: 0.716083
09/16 08:36:13 AM: edges-spr2_acc: training: 0.127810 validation: 0.077778
09/16 08:36:13 AM: edges-spr2_precision: training: 0.869451 validation: 0.834176
09/16 08:36:13 AM: edges-spr2_recall: training: 0.841472 validation: 0.806507
09/16 08:36:13 AM: edges-spr2_f1: training: 0.855233 validation: 0.820108
09/16 08:36:13 AM: Global learning rate: 5e-05
09/16 08:36:13 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:14 AM: Update 1317: task edges-spr2, batch 17 (1317): mcc: 0.7749, acc: 0.1291, precision: 0.8701, recall: 0.8448, f1: 0.8573, edges-spr2_loss: 0.2327
09/16 08:36:21 AM: ***** Step 1400 / Validation 14 *****
09/16 08:36:21 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:21 AM: Validating...
09/16 08:36:22 AM: Updating LR scheduler:
09/16 08:36:22 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:22 AM: 	# validation passes without improvement: 2
09/16 08:36:22 AM: edges-spr2_loss: training: 0.232161 validation: 0.315555
09/16 08:36:22 AM: macro_avg: validation: 0.820412
09/16 08:36:22 AM: micro_avg: validation: 0.000000
09/16 08:36:22 AM: edges-spr2_mcc: training: 0.772322 validation: 0.718350
09/16 08:36:22 AM: edges-spr2_acc: training: 0.128638 validation: 0.092063
09/16 08:36:22 AM: edges-spr2_precision: training: 0.866493 validation: 0.841987
09/16 08:36:22 AM: edges-spr2_recall: training: 0.842711 validation: 0.799915
09/16 08:36:22 AM: edges-spr2_f1: training: 0.854436 validation: 0.820412
09/16 08:36:22 AM: Global learning rate: 5e-05
09/16 08:36:22 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:24 AM: Update 1429: task edges-spr2, batch 29 (1429): mcc: 0.7756, acc: 0.1312, precision: 0.8708, recall: 0.8411, f1: 0.8557, edges-spr2_loss: 0.2279
09/16 08:36:30 AM: ***** Step 1500 / Validation 15 *****
09/16 08:36:30 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:30 AM: Validating...
09/16 08:36:31 AM: Updating LR scheduler:
09/16 08:36:31 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:31 AM: 	# validation passes without improvement: 3
09/16 08:36:31 AM: edges-spr2_loss: training: 0.230526 validation: 0.317246
09/16 08:36:31 AM: macro_avg: validation: 0.822215
09/16 08:36:31 AM: micro_avg: validation: 0.000000
09/16 08:36:31 AM: edges-spr2_mcc: training: 0.773450 validation: 0.720091
09/16 08:36:31 AM: edges-spr2_acc: training: 0.129384 validation: 0.090476
09/16 08:36:31 AM: edges-spr2_precision: training: 0.868796 validation: 0.839238
09/16 08:36:31 AM: edges-spr2_recall: training: 0.841633 validation: 0.805869
09/16 08:36:31 AM: edges-spr2_f1: training: 0.854999 validation: 0.822215
09/16 08:36:31 AM: Global learning rate: 5e-05
09/16 08:36:31 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:35 AM: Update 1542: task edges-spr2, batch 42 (1542): mcc: 0.7710, acc: 0.1222, precision: 0.8636, recall: 0.8427, f1: 0.8530, edges-spr2_loss: 0.2322
09/16 08:36:39 AM: ***** Step 1600 / Validation 16 *****
09/16 08:36:39 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:39 AM: Validating...
09/16 08:36:40 AM: Updating LR scheduler:
09/16 08:36:40 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:40 AM: 	# validation passes without improvement: 0
09/16 08:36:40 AM: edges-spr2_loss: training: 0.228686 validation: 0.317684
09/16 08:36:40 AM: macro_avg: validation: 0.818768
09/16 08:36:40 AM: micro_avg: validation: 0.000000
09/16 08:36:40 AM: edges-spr2_mcc: training: 0.777829 validation: 0.716437
09/16 08:36:40 AM: edges-spr2_acc: training: 0.134859 validation: 0.080952
09/16 08:36:40 AM: edges-spr2_precision: training: 0.869624 validation: 0.843018
09/16 08:36:40 AM: edges-spr2_recall: training: 0.846004 validation: 0.795875
09/16 08:36:40 AM: edges-spr2_f1: training: 0.857651 validation: 0.818768
09/16 08:36:40 AM: Global learning rate: 2.5e-05
09/16 08:36:40 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:45 AM: Update 1662: task edges-spr2, batch 62 (1662): mcc: 0.7778, acc: 0.1320, precision: 0.8722, recall: 0.8430, f1: 0.8574, edges-spr2_loss: 0.2272
09/16 08:36:48 AM: ***** Step 1700 / Validation 17 *****
09/16 08:36:48 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:48 AM: Validating...
09/16 08:36:49 AM: Updating LR scheduler:
09/16 08:36:49 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:49 AM: 	# validation passes without improvement: 1
09/16 08:36:49 AM: edges-spr2_loss: training: 0.227565 validation: 0.317501
09/16 08:36:49 AM: macro_avg: validation: 0.820278
09/16 08:36:49 AM: micro_avg: validation: 0.000000
09/16 08:36:49 AM: edges-spr2_mcc: training: 0.776831 validation: 0.717650
09/16 08:36:49 AM: edges-spr2_acc: training: 0.130774 validation: 0.090476
09/16 08:36:49 AM: edges-spr2_precision: training: 0.870636 validation: 0.839831
09/16 08:36:49 AM: edges-spr2_recall: training: 0.843521 validation: 0.801616
09/16 08:36:49 AM: edges-spr2_f1: training: 0.856864 validation: 0.820278
09/16 08:36:49 AM: Global learning rate: 2.5e-05
09/16 08:36:49 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:55 AM: Update 1770: task edges-spr2, batch 70 (1770): mcc: 0.7805, acc: 0.1354, precision: 0.8740, recall: 0.8455, f1: 0.8595, edges-spr2_loss: 0.2266
09/16 08:36:57 AM: ***** Step 1800 / Validation 18 *****
09/16 08:36:57 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:57 AM: Validating...
09/16 08:36:58 AM: Updating LR scheduler:
09/16 08:36:58 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:36:58 AM: 	# validation passes without improvement: 2
09/16 08:36:58 AM: Ran out of early stopping patience. Stopping training.
09/16 08:36:58 AM: edges-spr2_loss: training: 0.225674 validation: 0.319281
09/16 08:36:58 AM: macro_avg: validation: 0.822511
09/16 08:36:58 AM: micro_avg: validation: 0.000000
09/16 08:36:58 AM: edges-spr2_mcc: training: 0.780522 validation: 0.720096
09/16 08:36:58 AM: edges-spr2_acc: training: 0.134073 validation: 0.092063
09/16 08:36:58 AM: edges-spr2_precision: training: 0.873333 validation: 0.837558
09/16 08:36:58 AM: edges-spr2_recall: training: 0.845579 validation: 0.807995
09/16 08:36:58 AM: edges-spr2_f1: training: 0.859232 validation: 0.822511
09/16 08:36:58 AM: Global learning rate: 2.5e-05
09/16 08:36:58 AM: Saving checkpoints to: ./experiments/spr2-mnli-mix/run
09/16 08:36:58 AM: Stopped training after 18 validation checks
09/16 08:36:58 AM: Trained edges-spr2 for 1800 batches or 25.714 epochs
09/16 08:36:58 AM: ***** VALIDATION RESULTS *****
09/16 08:36:58 AM: edges-spr2_f1 (for best val pass 8): edges-spr2_loss: 0.31215, macro_avg: 0.82738, micro_avg: 0.00000, edges-spr2_mcc: 0.73027, edges-spr2_acc: 0.09841, edges-spr2_precision: 0.85317, edges-spr2_recall: 0.80310, edges-spr2_f1: 0.82738
09/16 08:36:58 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33619, macro_avg: 0.80621, micro_avg: 0.00000, edges-spr2_mcc: 0.70392, edges-spr2_acc: 0.09206, edges-spr2_precision: 0.85578, edges-spr2_recall: 0.76207, edges-spr2_f1: 0.80621
09/16 08:36:58 AM: macro_avg (for best val pass 8): edges-spr2_loss: 0.31215, macro_avg: 0.82738, micro_avg: 0.00000, edges-spr2_mcc: 0.73027, edges-spr2_acc: 0.09841, edges-spr2_precision: 0.85317, edges-spr2_recall: 0.80310, edges-spr2_f1: 0.82738
09/16 08:36:58 AM: Evaluating...
09/16 08:36:58 AM: Loaded model state from ./experiments/spr2-mnli-mix/run/edges-spr2/model_state_target_train_val_8.best.th
09/16 08:36:58 AM: Evaluating on: edges-spr2, split: val
09/16 08:36:59 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:36:59 AM: Finished evaluating on: edges-spr2
09/16 08:36:59 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:36:59 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mnli-mix/run
09/16 08:36:59 AM: Wrote all preds for split 'val' to ./experiments/spr2-mnli-mix/run
09/16 08:36:59 AM: Evaluating on: edges-spr2, split: test
09/16 08:37:00 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:37:00 AM: Finished evaluating on: edges-spr2
09/16 08:37:00 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:37:00 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mnli-mix/run
09/16 08:37:00 AM: Wrote all preds for split 'test' to ./experiments/spr2-mnli-mix/run
09/16 08:37:00 AM: Writing results for split 'val' to ./experiments/spr2-mnli-mix/results.tsv
09/16 08:37:00 AM: micro_avg: 0.000, macro_avg: 0.827, edges-spr2_mcc: 0.730, edges-spr2_acc: 0.098, edges-spr2_precision: 0.853, edges-spr2_recall: 0.803, edges-spr2_f1: 0.827
09/16 08:37:00 AM: Done!
09/16 08:37:00 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
