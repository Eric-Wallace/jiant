09/16 08:38:59 AM: Git branch: master
09/16 08:38:59 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:39:00 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-coref-mix/",
  "exp_name": "experiments/spr2-coref-mix",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-coref-mix/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/coref",
  "pytorch_transformers_output_mode": "mix",
  "remote_log_name": "experiments/spr2-coref-mix__run",
  "run_dir": "./experiments/spr2-coref-mix/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:39:00 AM: Saved config to ./experiments/spr2-coref-mix/run/params.conf
09/16 08:39:00 AM: Using random seed 1234
09/16 08:39:01 AM: Using GPU 0
09/16 08:39:01 AM: Loading tasks...
09/16 08:39:01 AM: Writing pre-preprocessed tasks to ./experiments/spr2-coref-mix/
09/16 08:39:01 AM: 	Creating task edges-spr2 from scratch.
09/16 08:39:02 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:39:02 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:39:02 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:39:02 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:39:02 AM: 	Finished loading tasks: edges-spr2.
09/16 08:39:02 AM: 	Building vocab from scratch.
09/16 08:39:02 AM: 	Counting units for task edges-spr2.
09/16 08:39:02 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:39:03 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:03 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:39:03 AM: 	Saved vocab to ./experiments/spr2-coref-mix/vocab
09/16 08:39:03 AM: Loading token dictionary from ./experiments/spr2-coref-mix/vocab.
09/16 08:39:03 AM: 	Loaded vocab from ./experiments/spr2-coref-mix/vocab
09/16 08:39:03 AM: 	Vocab namespace tokens: size 7943
09/16 08:39:03 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:39:03 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:39:03 AM: 	Vocab namespace chars: size 65
09/16 08:39:03 AM: 	Finished building vocab.
09/16 08:39:03 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:39:04 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-coref-mix/preproc/edges-spr2__train_data
09/16 08:39:04 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:39:04 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-coref-mix/preproc/edges-spr2__val_data
09/16 08:39:04 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:39:04 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-coref-mix/preproc/edges-spr2__test_data
09/16 08:39:04 AM: 	Finished indexing tasks
09/16 08:39:04 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:39:04 AM: 	  Training on 
09/16 08:39:04 AM: 	  Evaluating on edges-spr2
09/16 08:39:04 AM: 	Finished loading tasks in 2.483s
09/16 08:39:04 AM: 	 Tasks: ['edges-spr2']
09/16 08:39:04 AM: Building model...
09/16 08:39:04 AM: Using BERT model (bert-base-uncased).
09/16 08:39:04 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:39:04 AM: models/coref
09/16 08:39:04 AM: loading configuration file models/coref/config.json
09/16 08:39:04 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:39:04 AM: loading weights file models/coref/pytorch_model.bin
09/16 08:39:15 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpgzjugt5u
09/16 08:39:18 AM: copying /tmp/tmpgzjugt5u to cache at ./experiments/spr2-coref-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:18 AM: creating metadata file for ./experiments/spr2-coref-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:18 AM: removing temp file /tmp/tmpgzjugt5u
09/16 08:39:18 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-coref-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:18 AM: NOTE: pytorch_transformers_output_mode='mix', so scalar mixing weights will be fine-tuned even if BERT model is frozen.
09/16 08:39:18 AM: Initializing parameters
09/16 08:39:18 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:39:18 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:39:18 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:39:18 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:39:18 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.gamma
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.0
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.1
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.10
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.11
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.12
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.2
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.3
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.4
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.5
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.6
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.7
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.8
09/16 08:39:18 AM:    _text_field_embedder.scalar_mix.scalar_parameters.9
09/16 08:39:18 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:39:23 AM: Model specification:
09/16 08:39:23 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
      (scalar_mix): ScalarMix(
        (scalar_parameters): ParameterList(
            (0): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (1): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (2): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (3): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (4): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (5): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (6): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (7): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (8): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (9): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (10): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (11): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (12): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:39:23 AM: Model parameters:
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.gamma: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.0: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.1: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.2: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.3: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.4: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.5: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.6: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.7: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.8: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.9: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.10: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.11: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.12: Trainable parameter, count 1 with torch.Size([1])
09/16 08:39:23 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:39:23 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:23 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:39:23 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:23 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:39:23 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:23 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:23 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:23 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:39:23 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:39:23 AM: Total number of parameters: 110144034 (1.10144e+08)
09/16 08:39:23 AM: Number of trainable parameters: 661794 (661794)
09/16 08:39:23 AM: Finished building model in 19.224s
09/16 08:39:23 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:39:24 AM: patience = 9
09/16 08:39:24 AM: val_interval = 100
09/16 08:39:24 AM: max_vals = 100
09/16 08:39:24 AM: cuda_device = 0
09/16 08:39:24 AM: grad_norm = 5.0
09/16 08:39:24 AM: grad_clipping = None
09/16 08:39:24 AM: lr_decay = 0.99
09/16 08:39:24 AM: min_lr = 1e-06
09/16 08:39:24 AM: keep_all_checkpoints = 0
09/16 08:39:24 AM: val_data_limit = 5000
09/16 08:39:24 AM: max_epochs = -1
09/16 08:39:24 AM: dec_val_scale = 250
09/16 08:39:24 AM: training_data_fraction = 1
09/16 08:39:24 AM: type = adam
09/16 08:39:24 AM: parameter_groups = None
09/16 08:39:24 AM: Number of trainable parameters: 661794
09/16 08:39:24 AM: infer_type_and_cast = True
09/16 08:39:24 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:24 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:24 AM: lr = 0.0001
09/16 08:39:24 AM: amsgrad = True
09/16 08:39:24 AM: type = reduce_on_plateau
09/16 08:39:24 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:24 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:24 AM: mode = max
09/16 08:39:24 AM: factor = 0.5
09/16 08:39:24 AM: patience = 3
09/16 08:39:24 AM: threshold = 0.0001
09/16 08:39:24 AM: threshold_mode = abs
09/16 08:39:24 AM: verbose = True
09/16 08:39:24 AM: type = adam
09/16 08:39:24 AM: parameter_groups = None
09/16 08:39:24 AM: Number of trainable parameters: 661794
09/16 08:39:24 AM: infer_type_and_cast = True
09/16 08:39:24 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:24 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:24 AM: lr = 0.0001
09/16 08:39:24 AM: amsgrad = True
09/16 08:39:24 AM: type = reduce_on_plateau
09/16 08:39:24 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:24 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:24 AM: mode = max
09/16 08:39:24 AM: factor = 0.5
09/16 08:39:24 AM: patience = 3
09/16 08:39:24 AM: threshold = 0.0001
09/16 08:39:24 AM: threshold_mode = abs
09/16 08:39:24 AM: verbose = True
09/16 08:39:24 AM: Starting training without restoring from a checkpoint.
09/16 08:39:24 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:39:24 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:39:33 AM: ***** Step 100 / Validation 1 *****
09/16 08:39:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:39:33 AM: Validating...
09/16 08:39:34 AM: Best result seen so far for edges-spr2.
09/16 08:39:34 AM: Best result seen so far for micro.
09/16 08:39:34 AM: Best result seen so far for macro.
09/16 08:39:34 AM: Updating LR scheduler:
09/16 08:39:34 AM: 	Best result seen so far for macro_avg: 0.808
09/16 08:39:34 AM: 	# validation passes without improvement: 0
09/16 08:39:34 AM: edges-spr2_loss: training: 0.374478 validation: 0.338146
09/16 08:39:34 AM: macro_avg: validation: 0.807502
09/16 08:39:34 AM: micro_avg: validation: 0.000000
09/16 08:39:34 AM: edges-spr2_mcc: training: 0.626501 validation: 0.705516
09/16 08:39:34 AM: edges-spr2_acc: training: 0.045115 validation: 0.092063
09/16 08:39:34 AM: edges-spr2_precision: training: 0.780365 validation: 0.855749
09/16 08:39:34 AM: edges-spr2_recall: training: 0.739038 validation: 0.764406
09/16 08:39:34 AM: edges-spr2_f1: training: 0.759139 validation: 0.807502
09/16 08:39:34 AM: Global learning rate: 0.0001
09/16 08:39:34 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:39:34 AM: Update 103: task edges-spr2, batch 3 (103): mcc: 0.6903, acc: 0.0659, precision: 0.8278, recall: 0.7757, f1: 0.8009, edges-spr2_loss: 0.3208
09/16 08:39:42 AM: ***** Step 200 / Validation 2 *****
09/16 08:39:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:39:42 AM: Validating...
09/16 08:39:43 AM: Best result seen so far for edges-spr2.
09/16 08:39:43 AM: Best result seen so far for macro.
09/16 08:39:43 AM: Updating LR scheduler:
09/16 08:39:43 AM: 	Best result seen so far for macro_avg: 0.820
09/16 08:39:43 AM: 	# validation passes without improvement: 0
09/16 08:39:43 AM: edges-spr2_loss: training: 0.305476 validation: 0.319845
09/16 08:39:43 AM: macro_avg: validation: 0.819557
09/16 08:39:43 AM: micro_avg: validation: 0.000000
09/16 08:39:43 AM: edges-spr2_mcc: training: 0.704492 validation: 0.718191
09/16 08:39:43 AM: edges-spr2_acc: training: 0.076197 validation: 0.096825
09/16 08:39:43 AM: edges-spr2_precision: training: 0.832805 validation: 0.845893
09/16 08:39:43 AM: edges-spr2_recall: training: 0.786232 validation: 0.794812
09/16 08:39:43 AM: edges-spr2_f1: training: 0.808848 validation: 0.819557
09/16 08:39:43 AM: Global learning rate: 0.0001
09/16 08:39:43 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:39:44 AM: Update 212: task edges-spr2, batch 12 (212): mcc: 0.7121, acc: 0.0811, precision: 0.8319, recall: 0.7977, f1: 0.8144, edges-spr2_loss: 0.2967
09/16 08:39:51 AM: ***** Step 300 / Validation 3 *****
09/16 08:39:51 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:39:51 AM: Validating...
09/16 08:39:52 AM: Best result seen so far for edges-spr2.
09/16 08:39:52 AM: Best result seen so far for macro.
09/16 08:39:52 AM: Updating LR scheduler:
09/16 08:39:52 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:39:52 AM: 	# validation passes without improvement: 0
09/16 08:39:52 AM: edges-spr2_loss: training: 0.285991 validation: 0.313469
09/16 08:39:52 AM: macro_avg: validation: 0.824184
09/16 08:39:52 AM: micro_avg: validation: 0.000000
09/16 08:39:52 AM: edges-spr2_mcc: training: 0.723387 validation: 0.724469
09/16 08:39:52 AM: edges-spr2_acc: training: 0.083675 validation: 0.085714
09/16 08:39:52 AM: edges-spr2_precision: training: 0.842927 validation: 0.846637
09/16 08:39:52 AM: edges-spr2_recall: training: 0.801263 validation: 0.802892
09/16 08:39:52 AM: edges-spr2_f1: training: 0.821567 validation: 0.824184
09/16 08:39:52 AM: Global learning rate: 0.0001
09/16 08:39:52 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:39:54 AM: Update 330: task edges-spr2, batch 30 (330): mcc: 0.7340, acc: 0.0878, precision: 0.8449, recall: 0.8131, f1: 0.8287, edges-spr2_loss: 0.2756
09/16 08:40:00 AM: ***** Step 400 / Validation 4 *****
09/16 08:40:00 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:00 AM: Validating...
09/16 08:40:01 AM: Updating LR scheduler:
09/16 08:40:01 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:01 AM: 	# validation passes without improvement: 1
09/16 08:40:01 AM: edges-spr2_loss: training: 0.275262 validation: 0.312697
09/16 08:40:01 AM: macro_avg: validation: 0.821088
09/16 08:40:01 AM: micro_avg: validation: 0.000000
09/16 08:40:01 AM: edges-spr2_mcc: training: 0.733387 validation: 0.723510
09/16 08:40:01 AM: edges-spr2_acc: training: 0.089407 validation: 0.092063
09/16 08:40:01 AM: edges-spr2_precision: training: 0.845689 validation: 0.858834
09/16 08:40:01 AM: edges-spr2_recall: training: 0.812024 validation: 0.786519
09/16 08:40:01 AM: edges-spr2_f1: training: 0.828514 validation: 0.821088
09/16 08:40:01 AM: Global learning rate: 0.0001
09/16 08:40:01 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:40:04 AM: Update 436: task edges-spr2, batch 36 (436): mcc: 0.7316, acc: 0.0848, precision: 0.8482, recall: 0.8074, f1: 0.8273, edges-spr2_loss: 0.2751
09/16 08:40:09 AM: ***** Step 500 / Validation 5 *****
09/16 08:40:09 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:09 AM: Validating...
09/16 08:40:10 AM: Updating LR scheduler:
09/16 08:40:10 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:10 AM: 	# validation passes without improvement: 2
09/16 08:40:10 AM: edges-spr2_loss: training: 0.267881 validation: 0.306327
09/16 08:40:10 AM: macro_avg: validation: 0.822961
09/16 08:40:10 AM: micro_avg: validation: 0.000000
09/16 08:40:10 AM: edges-spr2_mcc: training: 0.739295 validation: 0.723801
09/16 08:40:10 AM: edges-spr2_acc: training: 0.094846 validation: 0.085714
09/16 08:40:10 AM: edges-spr2_precision: training: 0.850910 validation: 0.850499
09/16 08:40:10 AM: edges-spr2_recall: training: 0.814638 validation: 0.797151
09/16 08:40:10 AM: edges-spr2_f1: training: 0.832379 validation: 0.822961
09/16 08:40:10 AM: Global learning rate: 0.0001
09/16 08:40:10 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:40:14 AM: Update 553: task edges-spr2, batch 53 (553): mcc: 0.7409, acc: 0.0967, precision: 0.8503, recall: 0.8173, f1: 0.8334, edges-spr2_loss: 0.2643
09/16 08:40:18 AM: ***** Step 600 / Validation 6 *****
09/16 08:40:18 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:18 AM: Validating...
09/16 08:40:19 AM: Updating LR scheduler:
09/16 08:40:19 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:19 AM: 	# validation passes without improvement: 3
09/16 08:40:19 AM: edges-spr2_loss: training: 0.262145 validation: 0.306433
09/16 08:40:19 AM: macro_avg: validation: 0.823811
09/16 08:40:19 AM: micro_avg: validation: 0.000000
09/16 08:40:19 AM: edges-spr2_mcc: training: 0.742704 validation: 0.722896
09/16 08:40:19 AM: edges-spr2_acc: training: 0.095520 validation: 0.084127
09/16 08:40:19 AM: edges-spr2_precision: training: 0.850577 validation: 0.842105
09/16 08:40:19 AM: edges-spr2_recall: training: 0.819477 validation: 0.806294
09/16 08:40:19 AM: edges-spr2_f1: training: 0.834738 validation: 0.823811
09/16 08:40:19 AM: Global learning rate: 0.0001
09/16 08:40:19 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:40:24 AM: Update 660: task edges-spr2, batch 60 (660): mcc: 0.7501, acc: 0.0988, precision: 0.8552, recall: 0.8248, f1: 0.8397, edges-spr2_loss: 0.2553
09/16 08:40:27 AM: ***** Step 700 / Validation 7 *****
09/16 08:40:27 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:27 AM: Validating...
09/16 08:40:28 AM: Updating LR scheduler:
09/16 08:40:28 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:28 AM: 	# validation passes without improvement: 0
09/16 08:40:28 AM: edges-spr2_loss: training: 0.255175 validation: 0.306432
09/16 08:40:28 AM: macro_avg: validation: 0.822019
09/16 08:40:28 AM: micro_avg: validation: 0.000000
09/16 08:40:28 AM: edges-spr2_mcc: training: 0.750730 validation: 0.720391
09/16 08:40:28 AM: edges-spr2_acc: training: 0.100756 validation: 0.084127
09/16 08:40:28 AM: edges-spr2_precision: training: 0.857066 validation: 0.841613
09/16 08:40:28 AM: edges-spr2_recall: training: 0.823370 validation: 0.803317
09/16 08:40:28 AM: edges-spr2_f1: training: 0.839880 validation: 0.822019
09/16 08:40:28 AM: Global learning rate: 5e-05
09/16 08:40:28 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:40:35 AM: Update 771: task edges-spr2, batch 71 (771): mcc: 0.7549, acc: 0.1113, precision: 0.8577, recall: 0.8284, f1: 0.8428, edges-spr2_loss: 0.2515
09/16 08:40:37 AM: ***** Step 800 / Validation 8 *****
09/16 08:40:37 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:37 AM: Validating...
09/16 08:40:38 AM: Updating LR scheduler:
09/16 08:40:38 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:38 AM: 	# validation passes without improvement: 1
09/16 08:40:38 AM: edges-spr2_loss: training: 0.250074 validation: 0.307991
09/16 08:40:38 AM: macro_avg: validation: 0.822420
09/16 08:40:38 AM: micro_avg: validation: 0.000000
09/16 08:40:38 AM: edges-spr2_mcc: training: 0.756899 validation: 0.722804
09/16 08:40:38 AM: edges-spr2_acc: training: 0.113218 validation: 0.085714
09/16 08:40:38 AM: edges-spr2_precision: training: 0.858766 validation: 0.849343
09/16 08:40:38 AM: edges-spr2_recall: training: 0.829855 validation: 0.797151
09/16 08:40:38 AM: edges-spr2_f1: training: 0.844063 validation: 0.822420
09/16 08:40:38 AM: Global learning rate: 5e-05
09/16 08:40:38 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:40:45 AM: Update 887: task edges-spr2, batch 87 (887): mcc: 0.7595, acc: 0.1077, precision: 0.8617, recall: 0.8297, f1: 0.8454, edges-spr2_loss: 0.2475
09/16 08:40:46 AM: ***** Step 900 / Validation 9 *****
09/16 08:40:46 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:46 AM: Validating...
09/16 08:40:47 AM: Updating LR scheduler:
09/16 08:40:47 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:47 AM: 	# validation passes without improvement: 2
09/16 08:40:47 AM: edges-spr2_loss: training: 0.247731 validation: 0.309443
09/16 08:40:47 AM: macro_avg: validation: 0.821308
09/16 08:40:47 AM: micro_avg: validation: 0.000000
09/16 08:40:47 AM: edges-spr2_mcc: training: 0.758880 validation: 0.719994
09/16 08:40:47 AM: edges-spr2_acc: training: 0.108239 validation: 0.082540
09/16 08:40:47 AM: edges-spr2_precision: training: 0.860988 validation: 0.843876
09/16 08:40:47 AM: edges-spr2_recall: training: 0.829472 validation: 0.799915
09/16 08:40:47 AM: edges-spr2_f1: training: 0.844936 validation: 0.821308
09/16 08:40:47 AM: Global learning rate: 5e-05
09/16 08:40:47 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:40:55 AM: Update 995: task edges-spr2, batch 95 (995): mcc: 0.7602, acc: 0.1115, precision: 0.8611, recall: 0.8326, f1: 0.8467, edges-spr2_loss: 0.2468
09/16 08:40:55 AM: ***** Step 1000 / Validation 10 *****
09/16 08:40:55 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:55 AM: Validating...
09/16 08:40:56 AM: Updating LR scheduler:
09/16 08:40:56 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:56 AM: 	# validation passes without improvement: 3
09/16 08:40:56 AM: edges-spr2_loss: training: 0.246331 validation: 0.308482
09/16 08:40:56 AM: macro_avg: validation: 0.821527
09/16 08:40:56 AM: micro_avg: validation: 0.000000
09/16 08:40:56 AM: edges-spr2_mcc: training: 0.760514 validation: 0.721702
09/16 08:40:56 AM: edges-spr2_acc: training: 0.113100 validation: 0.090476
09/16 08:40:56 AM: edges-spr2_precision: training: 0.861926 validation: 0.849614
09/16 08:40:56 AM: edges-spr2_recall: training: 0.832175 validation: 0.795237
09/16 08:40:56 AM: edges-spr2_f1: training: 0.846789 validation: 0.821527
09/16 08:40:56 AM: Global learning rate: 5e-05
09/16 08:40:56 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:41:04 AM: ***** Step 1100 / Validation 11 *****
09/16 08:41:04 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:04 AM: Validating...
09/16 08:41:05 AM: Evaluate: task edges-spr2, batch 8 (10): mcc: 0.7292, acc: 0.0820, precision: 0.8468, recall: 0.8137, f1: 0.8299, edges-spr2_loss: 0.2821
09/16 08:41:05 AM: Updating LR scheduler:
09/16 08:41:05 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:05 AM: 	# validation passes without improvement: 0
09/16 08:41:05 AM: edges-spr2_loss: training: 0.243902 validation: 0.308782
09/16 08:41:05 AM: macro_avg: validation: 0.821619
09/16 08:41:05 AM: micro_avg: validation: 0.000000
09/16 08:41:05 AM: edges-spr2_mcc: training: 0.762434 validation: 0.720108
09/16 08:41:05 AM: edges-spr2_acc: training: 0.113484 validation: 0.079365
09/16 08:41:05 AM: edges-spr2_precision: training: 0.863301 validation: 0.842646
09/16 08:41:05 AM: edges-spr2_recall: training: 0.831813 validation: 0.801616
09/16 08:41:05 AM: edges-spr2_f1: training: 0.847264 validation: 0.821619
09/16 08:41:05 AM: Global learning rate: 2.5e-05
09/16 08:41:05 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:41:14 AM: ***** Step 1200 / Validation 12 *****
09/16 08:41:14 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:14 AM: Validating...
09/16 08:41:15 AM: Updating LR scheduler:
09/16 08:41:15 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:15 AM: 	# validation passes without improvement: 1
09/16 08:41:15 AM: edges-spr2_loss: training: 0.242214 validation: 0.309256
09/16 08:41:15 AM: macro_avg: validation: 0.821569
09/16 08:41:15 AM: micro_avg: validation: 0.000000
09/16 08:41:15 AM: edges-spr2_mcc: training: 0.762918 validation: 0.719959
09/16 08:41:15 AM: edges-spr2_acc: training: 0.113779 validation: 0.080952
09/16 08:41:15 AM: edges-spr2_precision: training: 0.863222 validation: 0.842305
09/16 08:41:15 AM: edges-spr2_recall: training: 0.833123 validation: 0.801829
09/16 08:41:15 AM: edges-spr2_f1: training: 0.847906 validation: 0.821569
09/16 08:41:15 AM: Global learning rate: 2.5e-05
09/16 08:41:15 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:41:15 AM: Update 1205: task edges-spr2, batch 5 (1205): mcc: 0.8061, acc: 0.1890, precision: 0.8952, recall: 0.8611, f1: 0.8778, edges-spr2_loss: 0.2149
09/16 08:41:23 AM: ***** Step 1300 / Validation 13 *****
09/16 08:41:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:23 AM: Validating...
09/16 08:41:23 AM: Updating LR scheduler:
09/16 08:41:23 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:23 AM: 	# validation passes without improvement: 2
09/16 08:41:23 AM: Ran out of early stopping patience. Stopping training.
09/16 08:41:23 AM: edges-spr2_loss: training: 0.238669 validation: 0.309451
09/16 08:41:23 AM: macro_avg: validation: 0.821645
09/16 08:41:23 AM: micro_avg: validation: 0.000000
09/16 08:41:23 AM: edges-spr2_mcc: training: 0.769537 validation: 0.718729
09/16 08:41:23 AM: edges-spr2_acc: training: 0.125216 validation: 0.082540
09/16 08:41:23 AM: edges-spr2_precision: training: 0.867472 validation: 0.836676
09/16 08:41:23 AM: edges-spr2_recall: training: 0.836850 validation: 0.807144
09/16 08:41:23 AM: edges-spr2_f1: training: 0.851886 validation: 0.821645
09/16 08:41:23 AM: Global learning rate: 2.5e-05
09/16 08:41:23 AM: Saving checkpoints to: ./experiments/spr2-coref-mix/run
09/16 08:41:24 AM: Stopped training after 13 validation checks
09/16 08:41:24 AM: Trained edges-spr2 for 1300 batches or 18.571 epochs
09/16 08:41:24 AM: ***** VALIDATION RESULTS *****
09/16 08:41:24 AM: edges-spr2_f1 (for best val pass 3): edges-spr2_loss: 0.31347, macro_avg: 0.82418, micro_avg: 0.00000, edges-spr2_mcc: 0.72447, edges-spr2_acc: 0.08571, edges-spr2_precision: 0.84664, edges-spr2_recall: 0.80289, edges-spr2_f1: 0.82418
09/16 08:41:24 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33815, macro_avg: 0.80750, micro_avg: 0.00000, edges-spr2_mcc: 0.70552, edges-spr2_acc: 0.09206, edges-spr2_precision: 0.85575, edges-spr2_recall: 0.76441, edges-spr2_f1: 0.80750
09/16 08:41:24 AM: macro_avg (for best val pass 3): edges-spr2_loss: 0.31347, macro_avg: 0.82418, micro_avg: 0.00000, edges-spr2_mcc: 0.72447, edges-spr2_acc: 0.08571, edges-spr2_precision: 0.84664, edges-spr2_recall: 0.80289, edges-spr2_f1: 0.82418
09/16 08:41:24 AM: Evaluating...
09/16 08:41:24 AM: Loaded model state from ./experiments/spr2-coref-mix/run/edges-spr2/model_state_target_train_val_3.best.th
09/16 08:41:24 AM: Evaluating on: edges-spr2, split: val
09/16 08:41:24 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:41:24 AM: Finished evaluating on: edges-spr2
09/16 08:41:24 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:41:25 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-coref-mix/run
09/16 08:41:25 AM: Wrote all preds for split 'val' to ./experiments/spr2-coref-mix/run
09/16 08:41:25 AM: Evaluating on: edges-spr2, split: test
09/16 08:41:25 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:41:25 AM: Finished evaluating on: edges-spr2
09/16 08:41:25 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:41:25 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-coref-mix/run
09/16 08:41:25 AM: Wrote all preds for split 'test' to ./experiments/spr2-coref-mix/run
09/16 08:41:25 AM: Writing results for split 'val' to ./experiments/spr2-coref-mix/results.tsv
09/16 08:41:25 AM: micro_avg: 0.000, macro_avg: 0.824, edges-spr2_mcc: 0.724, edges-spr2_acc: 0.086, edges-spr2_precision: 0.847, edges-spr2_recall: 0.803, edges-spr2_f1: 0.824
09/16 08:41:25 AM: Done!
09/16 08:41:25 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
