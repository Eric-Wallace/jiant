09/16 08:33:50 AM: Git branch: master
09/16 08:33:50 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:33:51 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-mnli-cat/",
  "exp_name": "experiments/spr2-mnli-cat",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-mnli-cat/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/mnli",
  "pytorch_transformers_output_mode": "cat",
  "remote_log_name": "experiments/spr2-mnli-cat__run",
  "run_dir": "./experiments/spr2-mnli-cat/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:33:51 AM: Saved config to ./experiments/spr2-mnli-cat/run/params.conf
09/16 08:33:51 AM: Using random seed 1234
09/16 08:33:52 AM: Using GPU 0
09/16 08:33:52 AM: Loading tasks...
09/16 08:33:52 AM: Writing pre-preprocessed tasks to ./experiments/spr2-mnli-cat/
09/16 08:33:52 AM: 	Creating task edges-spr2 from scratch.
09/16 08:33:52 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:33:53 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:33:53 AM: 	Finished loading tasks: edges-spr2.
09/16 08:33:53 AM: 	Building vocab from scratch.
09/16 08:33:53 AM: 	Counting units for task edges-spr2.
09/16 08:33:53 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:33:54 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:33:54 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:33:54 AM: 	Saved vocab to ./experiments/spr2-mnli-cat/vocab
09/16 08:33:54 AM: Loading token dictionary from ./experiments/spr2-mnli-cat/vocab.
09/16 08:33:54 AM: 	Loaded vocab from ./experiments/spr2-mnli-cat/vocab
09/16 08:33:54 AM: 	Vocab namespace tokens: size 7943
09/16 08:33:54 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:33:54 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:33:54 AM: 	Vocab namespace chars: size 65
09/16 08:33:54 AM: 	Finished building vocab.
09/16 08:33:54 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:33:54 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-mnli-cat/preproc/edges-spr2__train_data
09/16 08:33:54 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-mnli-cat/preproc/edges-spr2__val_data
09/16 08:33:55 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-mnli-cat/preproc/edges-spr2__test_data
09/16 08:33:55 AM: 	Finished indexing tasks
09/16 08:33:55 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:33:55 AM: 	  Training on 
09/16 08:33:55 AM: 	  Evaluating on edges-spr2
09/16 08:33:55 AM: 	Finished loading tasks in 2.325s
09/16 08:33:55 AM: 	 Tasks: ['edges-spr2']
09/16 08:33:55 AM: Building model...
09/16 08:33:55 AM: Using BERT model (bert-base-uncased).
09/16 08:33:55 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:33:55 AM: models/mnli
09/16 08:33:55 AM: loading configuration file models/mnli/config.json
09/16 08:33:55 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "mnli",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 3,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:33:55 AM: loading weights file models/mnli/pytorch_model.bin
09/16 08:34:05 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpm7ck69rb
09/16 08:34:09 AM: copying /tmp/tmpm7ck69rb to cache at ./experiments/spr2-mnli-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:09 AM: creating metadata file for ./experiments/spr2-mnli-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:09 AM: removing temp file /tmp/tmpm7ck69rb
09/16 08:34:09 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-mnli-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:09 AM: Initializing parameters
09/16 08:34:09 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:34:09 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:34:09 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:34:09 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:34:09 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:34:09 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:34:09 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:34:15 AM: Model specification:
09/16 08:34:15 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:34:15 AM: Model parameters:
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:15 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:15 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:34:15 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:15 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:34:15 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:15 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:34:15 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:15 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:15 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:15 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:34:15 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:34:15 AM: Total number of parameters: 110537236 (1.10537e+08)
09/16 08:34:15 AM: Number of trainable parameters: 1054996 (1.055e+06)
09/16 08:34:15 AM: Finished building model in 20.753s
09/16 08:34:15 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:34:16 AM: patience = 9
09/16 08:34:16 AM: val_interval = 100
09/16 08:34:16 AM: max_vals = 100
09/16 08:34:16 AM: cuda_device = 0
09/16 08:34:16 AM: grad_norm = 5.0
09/16 08:34:16 AM: grad_clipping = None
09/16 08:34:16 AM: lr_decay = 0.99
09/16 08:34:16 AM: min_lr = 1e-06
09/16 08:34:16 AM: keep_all_checkpoints = 0
09/16 08:34:16 AM: val_data_limit = 5000
09/16 08:34:16 AM: max_epochs = -1
09/16 08:34:16 AM: dec_val_scale = 250
09/16 08:34:16 AM: training_data_fraction = 1
09/16 08:34:16 AM: type = adam
09/16 08:34:16 AM: parameter_groups = None
09/16 08:34:16 AM: Number of trainable parameters: 1054996
09/16 08:34:16 AM: infer_type_and_cast = True
09/16 08:34:16 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:16 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:16 AM: lr = 0.0001
09/16 08:34:16 AM: amsgrad = True
09/16 08:34:16 AM: type = reduce_on_plateau
09/16 08:34:16 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:16 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:16 AM: mode = max
09/16 08:34:16 AM: factor = 0.5
09/16 08:34:16 AM: patience = 3
09/16 08:34:16 AM: threshold = 0.0001
09/16 08:34:16 AM: threshold_mode = abs
09/16 08:34:16 AM: verbose = True
09/16 08:34:16 AM: type = adam
09/16 08:34:16 AM: parameter_groups = None
09/16 08:34:16 AM: Number of trainable parameters: 1054996
09/16 08:34:16 AM: infer_type_and_cast = True
09/16 08:34:16 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:16 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:16 AM: lr = 0.0001
09/16 08:34:16 AM: amsgrad = True
09/16 08:34:16 AM: type = reduce_on_plateau
09/16 08:34:16 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:16 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:16 AM: mode = max
09/16 08:34:16 AM: factor = 0.5
09/16 08:34:16 AM: patience = 3
09/16 08:34:16 AM: threshold = 0.0001
09/16 08:34:16 AM: threshold_mode = abs
09/16 08:34:16 AM: verbose = True
09/16 08:34:16 AM: Starting training without restoring from a checkpoint.
09/16 08:34:16 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:34:16 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:34:25 AM: ***** Step 100 / Validation 1 *****
09/16 08:34:25 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:25 AM: Validating...
09/16 08:34:26 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.7023, acc: 0.0731, precision: 0.8565, recall: 0.7657, f1: 0.8086, edges-spr2_loss: 0.3114
09/16 08:34:27 AM: Best result seen so far for edges-spr2.
09/16 08:34:27 AM: Best result seen so far for micro.
09/16 08:34:27 AM: Best result seen so far for macro.
09/16 08:34:27 AM: Updating LR scheduler:
09/16 08:34:27 AM: 	Best result seen so far for macro_avg: 0.796
09/16 08:34:27 AM: 	# validation passes without improvement: 0
09/16 08:34:27 AM: edges-spr2_loss: training: 0.369690 validation: 0.338123
09/16 08:34:27 AM: macro_avg: validation: 0.796027
09/16 08:34:27 AM: micro_avg: validation: 0.000000
09/16 08:34:27 AM: edges-spr2_mcc: training: 0.624888 validation: 0.689213
09/16 08:34:27 AM: edges-spr2_acc: training: 0.045115 validation: 0.074603
09/16 08:34:27 AM: edges-spr2_precision: training: 0.779028 validation: 0.848412
09/16 08:34:27 AM: edges-spr2_recall: training: 0.738402 validation: 0.749734
09/16 08:34:27 AM: edges-spr2_f1: training: 0.758171 validation: 0.796027
09/16 08:34:27 AM: Global learning rate: 0.0001
09/16 08:34:27 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:34:35 AM: ***** Step 200 / Validation 2 *****
09/16 08:34:35 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:35 AM: Validating...
09/16 08:34:36 AM: Best result seen so far for edges-spr2.
09/16 08:34:36 AM: Best result seen so far for macro.
09/16 08:34:36 AM: Updating LR scheduler:
09/16 08:34:36 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:34:36 AM: 	# validation passes without improvement: 0
09/16 08:34:36 AM: edges-spr2_loss: training: 0.305956 validation: 0.323245
09/16 08:34:36 AM: macro_avg: validation: 0.816623
09/16 08:34:36 AM: micro_avg: validation: 0.000000
09/16 08:34:36 AM: edges-spr2_mcc: training: 0.702135 validation: 0.714249
09/16 08:34:36 AM: edges-spr2_acc: training: 0.068763 validation: 0.077778
09/16 08:34:36 AM: edges-spr2_precision: training: 0.833594 validation: 0.845436
09/16 08:34:36 AM: edges-spr2_recall: training: 0.781788 validation: 0.789709
09/16 08:34:36 AM: edges-spr2_f1: training: 0.806861 validation: 0.816623
09/16 08:34:36 AM: Global learning rate: 0.0001
09/16 08:34:36 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:34:38 AM: Update 201: task edges-spr2, batch 1 (201): mcc: 0.7166, acc: 0.0625, precision: 0.8490, recall: 0.7860, f1: 0.8163, edges-spr2_loss: 0.2962
09/16 08:34:47 AM: ***** Step 300 / Validation 3 *****
09/16 08:34:47 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:47 AM: Validating...
09/16 08:34:48 AM: Best result seen so far for edges-spr2.
09/16 08:34:48 AM: Best result seen so far for macro.
09/16 08:34:48 AM: Updating LR scheduler:
09/16 08:34:48 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:34:48 AM: 	# validation passes without improvement: 0
09/16 08:34:48 AM: edges-spr2_loss: training: 0.284468 validation: 0.320619
09/16 08:34:48 AM: macro_avg: validation: 0.823985
09/16 08:34:48 AM: micro_avg: validation: 0.000000
09/16 08:34:48 AM: edges-spr2_mcc: training: 0.721257 validation: 0.721050
09/16 08:34:48 AM: edges-spr2_acc: training: 0.078012 validation: 0.076190
09/16 08:34:48 AM: edges-spr2_precision: training: 0.842489 validation: 0.832935
09/16 08:34:48 AM: edges-spr2_recall: training: 0.798726 validation: 0.815224
09/16 08:34:48 AM: edges-spr2_f1: training: 0.820024 validation: 0.823985
09/16 08:34:48 AM: Global learning rate: 0.0001
09/16 08:34:48 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:34:48 AM: Update 302: task edges-spr2, batch 2 (302): mcc: 0.7044, acc: 0.0753, precision: 0.8079, recall: 0.8158, f1: 0.8118, edges-spr2_loss: 0.3007
09/16 08:34:57 AM: ***** Step 400 / Validation 4 *****
09/16 08:34:57 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:57 AM: Validating...
09/16 08:34:57 AM: Updating LR scheduler:
09/16 08:34:57 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:34:57 AM: 	# validation passes without improvement: 1
09/16 08:34:57 AM: edges-spr2_loss: training: 0.271870 validation: 0.320424
09/16 08:34:57 AM: macro_avg: validation: 0.819567
09/16 08:34:57 AM: micro_avg: validation: 0.000000
09/16 08:34:57 AM: edges-spr2_mcc: training: 0.738027 validation: 0.719898
09/16 08:34:57 AM: edges-spr2_acc: training: 0.088559 validation: 0.071429
09/16 08:34:57 AM: edges-spr2_precision: training: 0.848116 validation: 0.852516
09/16 08:34:57 AM: edges-spr2_recall: training: 0.815699 validation: 0.789071
09/16 08:34:57 AM: edges-spr2_f1: training: 0.831591 validation: 0.819567
09/16 08:34:57 AM: Global learning rate: 0.0001
09/16 08:34:57 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:34:58 AM: Update 409: task edges-spr2, batch 9 (409): mcc: 0.7469, acc: 0.1000, precision: 0.8610, recall: 0.8164, f1: 0.8381, edges-spr2_loss: 0.2686
09/16 08:35:07 AM: ***** Step 500 / Validation 5 *****
09/16 08:35:07 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:07 AM: Validating...
09/16 08:35:08 AM: Updating LR scheduler:
09/16 08:35:08 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:35:08 AM: 	# validation passes without improvement: 2
09/16 08:35:08 AM: edges-spr2_loss: training: 0.260382 validation: 0.318077
09/16 08:35:08 AM: macro_avg: validation: 0.823209
09/16 08:35:08 AM: micro_avg: validation: 0.000000
09/16 08:35:08 AM: edges-spr2_mcc: training: 0.747627 validation: 0.722795
09/16 08:35:08 AM: edges-spr2_acc: training: 0.098112 validation: 0.074603
09/16 08:35:08 AM: edges-spr2_precision: training: 0.854537 validation: 0.845052
09/16 08:35:08 AM: edges-spr2_recall: training: 0.822105 validation: 0.802467
09/16 08:35:08 AM: edges-spr2_f1: training: 0.838007 validation: 0.823209
09/16 08:35:08 AM: Global learning rate: 0.0001
09/16 08:35:08 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:35:08 AM: Update 504: task edges-spr2, batch 4 (504): mcc: 0.7448, acc: 0.1019, precision: 0.8533, recall: 0.8222, f1: 0.8375, edges-spr2_loss: 0.2598
09/16 08:35:17 AM: ***** Step 600 / Validation 6 *****
09/16 08:35:17 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:17 AM: Validating...
09/16 08:35:18 AM: Updating LR scheduler:
09/16 08:35:18 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:35:18 AM: 	# validation passes without improvement: 3
09/16 08:35:18 AM: edges-spr2_loss: training: 0.251100 validation: 0.321033
09/16 08:35:18 AM: macro_avg: validation: 0.817307
09/16 08:35:18 AM: micro_avg: validation: 0.000000
09/16 08:35:18 AM: edges-spr2_mcc: training: 0.756272 validation: 0.716876
09/16 08:35:18 AM: edges-spr2_acc: training: 0.111017 validation: 0.063492
09/16 08:35:18 AM: edges-spr2_precision: training: 0.857610 validation: 0.852100
09/16 08:35:18 AM: edges-spr2_recall: training: 0.830238 validation: 0.785243
09/16 08:35:18 AM: edges-spr2_f1: training: 0.843702 validation: 0.817307
09/16 08:35:18 AM: Global learning rate: 0.0001
09/16 08:35:18 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:35:18 AM: Update 606: task edges-spr2, batch 6 (606): mcc: 0.7564, acc: 0.0921, precision: 0.8715, recall: 0.8166, f1: 0.8432, edges-spr2_loss: 0.2512
09/16 08:35:26 AM: ***** Step 700 / Validation 7 *****
09/16 08:35:26 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:26 AM: Validating...
09/16 08:35:27 AM: Updating LR scheduler:
09/16 08:35:27 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:35:27 AM: 	# validation passes without improvement: 0
09/16 08:35:27 AM: edges-spr2_loss: training: 0.243424 validation: 0.323792
09/16 08:35:27 AM: macro_avg: validation: 0.818813
09/16 08:35:27 AM: micro_avg: validation: 0.000000
09/16 08:35:27 AM: edges-spr2_mcc: training: 0.763867 validation: 0.718116
09/16 08:35:27 AM: edges-spr2_acc: training: 0.120238 validation: 0.074603
09/16 08:35:27 AM: edges-spr2_precision: training: 0.864428 validation: 0.849406
09/16 08:35:27 AM: edges-spr2_recall: training: 0.833105 validation: 0.790347
09/16 08:35:27 AM: edges-spr2_f1: training: 0.848477 validation: 0.818813
09/16 08:35:27 AM: Global learning rate: 5e-05
09/16 08:35:27 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:35:28 AM: Update 704: task edges-spr2, batch 4 (704): mcc: 0.7315, acc: 0.0820, precision: 0.8362, recall: 0.8195, f1: 0.8278, edges-spr2_loss: 0.2630
09/16 08:35:36 AM: ***** Step 800 / Validation 8 *****
09/16 08:35:36 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:36 AM: Validating...
09/16 08:35:37 AM: Updating LR scheduler:
09/16 08:35:37 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:35:37 AM: 	# validation passes without improvement: 1
09/16 08:35:37 AM: edges-spr2_loss: training: 0.233693 validation: 0.325872
09/16 08:35:37 AM: macro_avg: validation: 0.819443
09/16 08:35:37 AM: micro_avg: validation: 0.000000
09/16 08:35:37 AM: edges-spr2_mcc: training: 0.774607 validation: 0.717206
09/16 08:35:37 AM: edges-spr2_acc: training: 0.126479 validation: 0.066667
09/16 08:35:37 AM: edges-spr2_precision: training: 0.867975 validation: 0.842543
09/16 08:35:37 AM: edges-spr2_recall: training: 0.843782 validation: 0.797576
09/16 08:35:37 AM: edges-spr2_f1: training: 0.855707 validation: 0.819443
09/16 08:35:37 AM: Global learning rate: 5e-05
09/16 08:35:37 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:35:38 AM: Update 810: task edges-spr2, batch 10 (810): mcc: 0.7855, acc: 0.1306, precision: 0.8785, recall: 0.8485, f1: 0.8633, edges-spr2_loss: 0.2281
09/16 08:35:46 AM: ***** Step 900 / Validation 9 *****
09/16 08:35:46 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:46 AM: Validating...
09/16 08:35:47 AM: Updating LR scheduler:
09/16 08:35:47 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:35:47 AM: 	# validation passes without improvement: 2
09/16 08:35:47 AM: edges-spr2_loss: training: 0.230072 validation: 0.328933
09/16 08:35:47 AM: macro_avg: validation: 0.818043
09/16 08:35:47 AM: micro_avg: validation: 0.000000
09/16 08:35:47 AM: edges-spr2_mcc: training: 0.778375 validation: 0.714458
09/16 08:35:47 AM: edges-spr2_acc: training: 0.130087 validation: 0.071429
09/16 08:35:47 AM: edges-spr2_precision: training: 0.871183 validation: 0.838883
09/16 08:35:47 AM: edges-spr2_recall: training: 0.844787 validation: 0.798214
09/16 08:35:47 AM: edges-spr2_f1: training: 0.857782 validation: 0.818043
09/16 08:35:47 AM: Global learning rate: 5e-05
09/16 08:35:47 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:35:49 AM: Update 911: task edges-spr2, batch 11 (911): mcc: 0.7679, acc: 0.1312, precision: 0.8654, recall: 0.8421, f1: 0.8536, edges-spr2_loss: 0.2414
09/16 08:35:57 AM: ***** Step 1000 / Validation 10 *****
09/16 08:35:57 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:57 AM: Validating...
09/16 08:35:58 AM: Updating LR scheduler:
09/16 08:35:58 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:35:58 AM: 	# validation passes without improvement: 3
09/16 08:35:58 AM: edges-spr2_loss: training: 0.227957 validation: 0.327772
09/16 08:35:58 AM: macro_avg: validation: 0.818910
09/16 08:35:58 AM: micro_avg: validation: 0.000000
09/16 08:35:58 AM: edges-spr2_mcc: training: 0.781931 validation: 0.717301
09/16 08:35:58 AM: edges-spr2_acc: training: 0.137802 validation: 0.073016
09/16 08:35:58 AM: edges-spr2_precision: training: 0.873631 validation: 0.845718
09/16 08:35:58 AM: edges-spr2_recall: training: 0.848244 validation: 0.793749
09/16 08:35:58 AM: edges-spr2_f1: training: 0.860750 validation: 0.818910
09/16 08:35:58 AM: Global learning rate: 5e-05
09/16 08:35:58 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:35:59 AM: Update 1015: task edges-spr2, batch 15 (1015): mcc: 0.7913, acc: 0.1479, precision: 0.8790, recall: 0.8569, f1: 0.8678, edges-spr2_loss: 0.2205
09/16 08:36:06 AM: ***** Step 1100 / Validation 11 *****
09/16 08:36:06 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:06 AM: Validating...
09/16 08:36:07 AM: Updating LR scheduler:
09/16 08:36:07 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:36:07 AM: 	# validation passes without improvement: 0
09/16 08:36:07 AM: edges-spr2_loss: training: 0.222662 validation: 0.332991
09/16 08:36:07 AM: macro_avg: validation: 0.813255
09/16 08:36:07 AM: micro_avg: validation: 0.000000
09/16 08:36:07 AM: edges-spr2_mcc: training: 0.785634 validation: 0.710940
09/16 08:36:07 AM: edges-spr2_acc: training: 0.142110 validation: 0.069841
09/16 08:36:07 AM: edges-spr2_precision: training: 0.874695 validation: 0.849306
09/16 08:36:07 AM: edges-spr2_recall: training: 0.850877 validation: 0.780140
09/16 08:36:07 AM: edges-spr2_f1: training: 0.862622 validation: 0.813255
09/16 08:36:07 AM: Global learning rate: 2.5e-05
09/16 08:36:07 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:36:09 AM: Update 1121: task edges-spr2, batch 21 (1121): mcc: 0.7786, acc: 0.1294, precision: 0.8751, recall: 0.8413, f1: 0.8579, edges-spr2_loss: 0.2313
09/16 08:36:16 AM: ***** Step 1200 / Validation 12 *****
09/16 08:36:16 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:16 AM: Validating...
09/16 08:36:17 AM: Updating LR scheduler:
09/16 08:36:17 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:36:17 AM: 	# validation passes without improvement: 1
09/16 08:36:17 AM: edges-spr2_loss: training: 0.222404 validation: 0.333356
09/16 08:36:17 AM: macro_avg: validation: 0.814920
09/16 08:36:17 AM: micro_avg: validation: 0.000000
09/16 08:36:17 AM: edges-spr2_mcc: training: 0.784527 validation: 0.709117
09/16 08:36:17 AM: edges-spr2_acc: training: 0.142678 validation: 0.055556
09/16 08:36:17 AM: edges-spr2_precision: training: 0.874247 validation: 0.833964
09/16 08:36:17 AM: edges-spr2_recall: training: 0.850338 validation: 0.796726
09/16 08:36:17 AM: edges-spr2_f1: training: 0.862127 validation: 0.814920
09/16 08:36:17 AM: Global learning rate: 2.5e-05
09/16 08:36:17 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:36:19 AM: Update 1226: task edges-spr2, batch 26 (1226): mcc: 0.7973, acc: 0.1681, precision: 0.8824, recall: 0.8585, f1: 0.8703, edges-spr2_loss: 0.2158
09/16 08:36:26 AM: ***** Step 1300 / Validation 13 *****
09/16 08:36:26 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:26 AM: Validating...
09/16 08:36:27 AM: Updating LR scheduler:
09/16 08:36:27 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:36:27 AM: 	# validation passes without improvement: 2
09/16 08:36:27 AM: Ran out of early stopping patience. Stopping training.
09/16 08:36:27 AM: edges-spr2_loss: training: 0.218190 validation: 0.334106
09/16 08:36:27 AM: macro_avg: validation: 0.814435
09/16 08:36:27 AM: micro_avg: validation: 0.000000
09/16 08:36:27 AM: edges-spr2_mcc: training: 0.792319 validation: 0.708925
09/16 08:36:27 AM: edges-spr2_acc: training: 0.154755 validation: 0.069841
09/16 08:36:27 AM: edges-spr2_precision: training: 0.878455 validation: 0.835757
09/16 08:36:27 AM: edges-spr2_recall: training: 0.855774 validation: 0.794174
09/16 08:36:27 AM: edges-spr2_f1: training: 0.866966 validation: 0.814435
09/16 08:36:27 AM: Global learning rate: 2.5e-05
09/16 08:36:27 AM: Saving checkpoints to: ./experiments/spr2-mnli-cat/run
09/16 08:36:27 AM: Stopped training after 13 validation checks
09/16 08:36:27 AM: Trained edges-spr2 for 1300 batches or 18.571 epochs
09/16 08:36:27 AM: ***** VALIDATION RESULTS *****
09/16 08:36:27 AM: edges-spr2_f1 (for best val pass 3): edges-spr2_loss: 0.32062, macro_avg: 0.82398, micro_avg: 0.00000, edges-spr2_mcc: 0.72105, edges-spr2_acc: 0.07619, edges-spr2_precision: 0.83294, edges-spr2_recall: 0.81522, edges-spr2_f1: 0.82398
09/16 08:36:27 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33812, macro_avg: 0.79603, micro_avg: 0.00000, edges-spr2_mcc: 0.68921, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.84841, edges-spr2_recall: 0.74973, edges-spr2_f1: 0.79603
09/16 08:36:27 AM: macro_avg (for best val pass 3): edges-spr2_loss: 0.32062, macro_avg: 0.82398, micro_avg: 0.00000, edges-spr2_mcc: 0.72105, edges-spr2_acc: 0.07619, edges-spr2_precision: 0.83294, edges-spr2_recall: 0.81522, edges-spr2_f1: 0.82398
09/16 08:36:27 AM: Evaluating...
09/16 08:36:27 AM: Loaded model state from ./experiments/spr2-mnli-cat/run/edges-spr2/model_state_target_train_val_3.best.th
09/16 08:36:27 AM: Evaluating on: edges-spr2, split: val
09/16 08:36:28 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:36:28 AM: Finished evaluating on: edges-spr2
09/16 08:36:28 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:36:28 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mnli-cat/run
09/16 08:36:28 AM: Wrote all preds for split 'val' to ./experiments/spr2-mnli-cat/run
09/16 08:36:28 AM: Evaluating on: edges-spr2, split: test
09/16 08:36:29 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:36:29 AM: Finished evaluating on: edges-spr2
09/16 08:36:29 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:36:29 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mnli-cat/run
09/16 08:36:29 AM: Wrote all preds for split 'test' to ./experiments/spr2-mnli-cat/run
09/16 08:36:29 AM: Writing results for split 'val' to ./experiments/spr2-mnli-cat/results.tsv
09/16 08:36:29 AM: micro_avg: 0.000, macro_avg: 0.824, edges-spr2_mcc: 0.721, edges-spr2_acc: 0.076, edges-spr2_precision: 0.833, edges-spr2_recall: 0.815, edges-spr2_f1: 0.824
09/16 08:36:29 AM: Done!
09/16 08:36:29 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
