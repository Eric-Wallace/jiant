09/16 08:24:41 AM: Git branch: master
09/16 08:24:41 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:24:42 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-rte-top/",
  "exp_name": "experiments/spr2-rte-top",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-rte-top/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/rte",
  "pytorch_transformers_output_mode": "top",
  "remote_log_name": "experiments/spr2-rte-top__run",
  "run_dir": "./experiments/spr2-rte-top/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:24:42 AM: Saved config to ./experiments/spr2-rte-top/run/params.conf
09/16 08:24:42 AM: Using random seed 1234
09/16 08:24:44 AM: Using GPU 0
09/16 08:24:44 AM: Loading tasks...
09/16 08:24:44 AM: Writing pre-preprocessed tasks to ./experiments/spr2-rte-top/
09/16 08:24:44 AM: 	Creating task edges-spr2 from scratch.
09/16 08:24:44 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:24:44 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:24:44 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:24:44 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:24:44 AM: 	Finished loading tasks: edges-spr2.
09/16 08:24:44 AM: 	Building vocab from scratch.
09/16 08:24:44 AM: 	Counting units for task edges-spr2.
09/16 08:24:44 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:24:45 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:45 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:24:45 AM: 	Saved vocab to ./experiments/spr2-rte-top/vocab
09/16 08:24:45 AM: Loading token dictionary from ./experiments/spr2-rte-top/vocab.
09/16 08:24:45 AM: 	Loaded vocab from ./experiments/spr2-rte-top/vocab
09/16 08:24:45 AM: 	Vocab namespace tokens: size 7943
09/16 08:24:45 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:24:45 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:24:45 AM: 	Vocab namespace chars: size 65
09/16 08:24:45 AM: 	Finished building vocab.
09/16 08:24:45 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:24:46 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-rte-top/preproc/edges-spr2__train_data
09/16 08:24:46 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:24:46 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-rte-top/preproc/edges-spr2__val_data
09/16 08:24:46 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:24:46 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-rte-top/preproc/edges-spr2__test_data
09/16 08:24:46 AM: 	Finished indexing tasks
09/16 08:24:46 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:24:46 AM: 	  Training on 
09/16 08:24:46 AM: 	  Evaluating on edges-spr2
09/16 08:24:46 AM: 	Finished loading tasks in 2.313s
09/16 08:24:46 AM: 	 Tasks: ['edges-spr2']
09/16 08:24:46 AM: Building model...
09/16 08:24:46 AM: Using BERT model (bert-base-uncased).
09/16 08:24:46 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:24:46 AM: models/rte
09/16 08:24:46 AM: loading configuration file models/rte/config.json
09/16 08:24:46 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "rte",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:24:46 AM: loading weights file models/rte/pytorch_model.bin
09/16 08:24:56 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpzlyctqcw
09/16 08:24:58 AM: copying /tmp/tmpzlyctqcw to cache at ./experiments/spr2-rte-top/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:58 AM: creating metadata file for ./experiments/spr2-rte-top/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:58 AM: removing temp file /tmp/tmpzlyctqcw
09/16 08:24:58 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-rte-top/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:24:58 AM: Initializing parameters
09/16 08:24:58 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:24:58 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:24:58 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:24:58 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:24:58 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:24:58 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:24:58 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:25:04 AM: Model specification:
09/16 08:25:04 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:25:04 AM: Model parameters:
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:25:04 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:25:04 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:25:04 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:04 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:25:04 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:04 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:25:04 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:04 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:04 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:25:04 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:25:04 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:25:04 AM: Total number of parameters: 110144020 (1.10144e+08)
09/16 08:25:04 AM: Number of trainable parameters: 661780 (661780)
09/16 08:25:04 AM: Finished building model in 18.103s
09/16 08:25:04 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:25:05 AM: patience = 9
09/16 08:25:05 AM: val_interval = 100
09/16 08:25:05 AM: max_vals = 100
09/16 08:25:05 AM: cuda_device = 0
09/16 08:25:05 AM: grad_norm = 5.0
09/16 08:25:05 AM: grad_clipping = None
09/16 08:25:05 AM: lr_decay = 0.99
09/16 08:25:05 AM: min_lr = 1e-06
09/16 08:25:05 AM: keep_all_checkpoints = 0
09/16 08:25:05 AM: val_data_limit = 5000
09/16 08:25:05 AM: max_epochs = -1
09/16 08:25:05 AM: dec_val_scale = 250
09/16 08:25:05 AM: training_data_fraction = 1
09/16 08:25:05 AM: type = adam
09/16 08:25:05 AM: parameter_groups = None
09/16 08:25:05 AM: Number of trainable parameters: 661780
09/16 08:25:05 AM: infer_type_and_cast = True
09/16 08:25:05 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:05 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:05 AM: lr = 0.0001
09/16 08:25:05 AM: amsgrad = True
09/16 08:25:05 AM: type = reduce_on_plateau
09/16 08:25:05 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:05 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:05 AM: mode = max
09/16 08:25:05 AM: factor = 0.5
09/16 08:25:05 AM: patience = 3
09/16 08:25:05 AM: threshold = 0.0001
09/16 08:25:05 AM: threshold_mode = abs
09/16 08:25:05 AM: verbose = True
09/16 08:25:05 AM: type = adam
09/16 08:25:05 AM: parameter_groups = None
09/16 08:25:05 AM: Number of trainable parameters: 661780
09/16 08:25:05 AM: infer_type_and_cast = True
09/16 08:25:05 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:05 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:05 AM: lr = 0.0001
09/16 08:25:05 AM: amsgrad = True
09/16 08:25:05 AM: type = reduce_on_plateau
09/16 08:25:05 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:25:05 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:25:05 AM: mode = max
09/16 08:25:05 AM: factor = 0.5
09/16 08:25:05 AM: patience = 3
09/16 08:25:05 AM: threshold = 0.0001
09/16 08:25:05 AM: threshold_mode = abs
09/16 08:25:05 AM: verbose = True
09/16 08:25:05 AM: Starting training without restoring from a checkpoint.
09/16 08:25:05 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:25:05 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:25:14 AM: ***** Step 100 / Validation 1 *****
09/16 08:25:14 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:14 AM: Validating...
09/16 08:25:15 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.7042, acc: 0.0791, precision: 0.8581, recall: 0.7665, f1: 0.8097, edges-spr2_loss: 0.3162
09/16 08:25:16 AM: Best result seen so far for edges-spr2.
09/16 08:25:16 AM: Best result seen so far for micro.
09/16 08:25:16 AM: Best result seen so far for macro.
09/16 08:25:16 AM: Updating LR scheduler:
09/16 08:25:16 AM: 	Best result seen so far for macro_avg: 0.796
09/16 08:25:16 AM: 	# validation passes without improvement: 0
09/16 08:25:16 AM: edges-spr2_loss: training: 0.385772 validation: 0.346570
09/16 08:25:16 AM: macro_avg: validation: 0.795531
09/16 08:25:16 AM: micro_avg: validation: 0.000000
09/16 08:25:16 AM: edges-spr2_mcc: training: 0.609381 validation: 0.688347
09/16 08:25:16 AM: edges-spr2_acc: training: 0.037220 validation: 0.074603
09/16 08:25:16 AM: edges-spr2_precision: training: 0.770711 validation: 0.847560
09/16 08:25:16 AM: edges-spr2_recall: training: 0.725961 validation: 0.749522
09/16 08:25:16 AM: edges-spr2_f1: training: 0.747667 validation: 0.795531
09/16 08:25:16 AM: Global learning rate: 0.0001
09/16 08:25:16 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:25:24 AM: ***** Step 200 / Validation 2 *****
09/16 08:25:24 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:24 AM: Validating...
09/16 08:25:25 AM: Best result seen so far for edges-spr2.
09/16 08:25:25 AM: Best result seen so far for macro.
09/16 08:25:25 AM: Updating LR scheduler:
09/16 08:25:25 AM: 	Best result seen so far for macro_avg: 0.813
09/16 08:25:25 AM: 	# validation passes without improvement: 0
09/16 08:25:25 AM: edges-spr2_loss: training: 0.314997 validation: 0.327940
09/16 08:25:25 AM: macro_avg: validation: 0.813367
09/16 08:25:25 AM: micro_avg: validation: 0.000000
09/16 08:25:25 AM: edges-spr2_mcc: training: 0.694076 validation: 0.711563
09/16 08:25:25 AM: edges-spr2_acc: training: 0.069907 validation: 0.088889
09/16 08:25:25 AM: edges-spr2_precision: training: 0.826313 validation: 0.851069
09/16 08:25:25 AM: edges-spr2_recall: training: 0.779165 validation: 0.778865
09/16 08:25:25 AM: edges-spr2_f1: training: 0.802047 validation: 0.813367
09/16 08:25:25 AM: Global learning rate: 0.0001
09/16 08:25:25 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:25:25 AM: Update 202: task edges-spr2, batch 2 (202): mcc: 0.7228, acc: 0.1077, precision: 0.8466, recall: 0.7958, f1: 0.8204, edges-spr2_loss: 0.2993
09/16 08:25:34 AM: ***** Step 300 / Validation 3 *****
09/16 08:25:34 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:34 AM: Validating...
09/16 08:25:35 AM: Evaluate: task edges-spr2, batch 8 (10): mcc: 0.7248, acc: 0.0838, precision: 0.8491, recall: 0.8045, f1: 0.8262, edges-spr2_loss: 0.2907
09/16 08:25:35 AM: Best result seen so far for edges-spr2.
09/16 08:25:35 AM: Best result seen so far for macro.
09/16 08:25:35 AM: Updating LR scheduler:
09/16 08:25:35 AM: 	Best result seen so far for macro_avg: 0.818
09/16 08:25:35 AM: 	# validation passes without improvement: 0
09/16 08:25:35 AM: edges-spr2_loss: training: 0.295492 validation: 0.321605
09/16 08:25:35 AM: macro_avg: validation: 0.818112
09/16 08:25:35 AM: micro_avg: validation: 0.000000
09/16 08:25:35 AM: edges-spr2_mcc: training: 0.713707 validation: 0.715950
09/16 08:25:35 AM: edges-spr2_acc: training: 0.081976 validation: 0.080952
09/16 08:25:35 AM: edges-spr2_precision: training: 0.836546 validation: 0.844500
09/16 08:25:35 AM: edges-spr2_recall: training: 0.795181 validation: 0.793323
09/16 08:25:35 AM: edges-spr2_f1: training: 0.815339 validation: 0.818112
09/16 08:25:35 AM: Global learning rate: 0.0001
09/16 08:25:35 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:25:44 AM: ***** Step 400 / Validation 4 *****
09/16 08:25:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:44 AM: Validating...
09/16 08:25:45 AM: Best result seen so far for edges-spr2.
09/16 08:25:45 AM: Best result seen so far for macro.
09/16 08:25:45 AM: Updating LR scheduler:
09/16 08:25:45 AM: 	Best result seen so far for macro_avg: 0.819
09/16 08:25:45 AM: 	# validation passes without improvement: 0
09/16 08:25:45 AM: edges-spr2_loss: training: 0.286435 validation: 0.319635
09/16 08:25:45 AM: macro_avg: validation: 0.818927
09/16 08:25:45 AM: micro_avg: validation: 0.000000
09/16 08:25:45 AM: edges-spr2_mcc: training: 0.720723 validation: 0.719759
09/16 08:25:45 AM: edges-spr2_acc: training: 0.078107 validation: 0.088889
09/16 08:25:45 AM: edges-spr2_precision: training: 0.838506 validation: 0.855126
09/16 08:25:45 AM: edges-spr2_recall: training: 0.802662 validation: 0.785669
09/16 08:25:45 AM: edges-spr2_f1: training: 0.820193 validation: 0.818927
09/16 08:25:45 AM: Global learning rate: 0.0001
09/16 08:25:45 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:25:45 AM: Update 402: task edges-spr2, batch 2 (402): mcc: 0.7444, acc: 0.0809, precision: 0.8633, recall: 0.8116, f1: 0.8366, edges-spr2_loss: 0.2775
09/16 08:25:54 AM: ***** Step 500 / Validation 5 *****
09/16 08:25:54 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:25:54 AM: Validating...
09/16 08:25:55 AM: Best result seen so far for edges-spr2.
09/16 08:25:55 AM: Best result seen so far for macro.
09/16 08:25:55 AM: Updating LR scheduler:
09/16 08:25:55 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:25:55 AM: 	# validation passes without improvement: 0
09/16 08:25:55 AM: edges-spr2_loss: training: 0.280143 validation: 0.315515
09/16 08:25:55 AM: macro_avg: validation: 0.822134
09/16 08:25:55 AM: micro_avg: validation: 0.000000
09/16 08:25:55 AM: edges-spr2_mcc: training: 0.725434 validation: 0.722580
09/16 08:25:55 AM: edges-spr2_acc: training: 0.083629 validation: 0.084127
09/16 08:25:55 AM: edges-spr2_precision: training: 0.842056 validation: 0.849943
09/16 08:25:55 AM: edges-spr2_recall: training: 0.805640 validation: 0.796088
09/16 08:25:55 AM: edges-spr2_f1: training: 0.823445 validation: 0.822134
09/16 08:25:55 AM: Global learning rate: 0.0001
09/16 08:25:55 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:25:55 AM: Update 501: task edges-spr2, batch 1 (501): mcc: 0.7385, acc: 0.1429, precision: 0.8819, recall: 0.7850, f1: 0.8307, edges-spr2_loss: 0.2861
09/16 08:26:04 AM: ***** Step 600 / Validation 6 *****
09/16 08:26:04 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:04 AM: Validating...
09/16 08:26:05 AM: Best result seen so far for edges-spr2.
09/16 08:26:05 AM: Best result seen so far for macro.
09/16 08:26:05 AM: Updating LR scheduler:
09/16 08:26:05 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:26:05 AM: 	# validation passes without improvement: 0
09/16 08:26:05 AM: edges-spr2_loss: training: 0.273910 validation: 0.315610
09/16 08:26:05 AM: macro_avg: validation: 0.823068
09/16 08:26:05 AM: micro_avg: validation: 0.000000
09/16 08:26:05 AM: edges-spr2_mcc: training: 0.732418 validation: 0.722480
09/16 08:26:05 AM: edges-spr2_acc: training: 0.089744 validation: 0.085714
09/16 08:26:05 AM: edges-spr2_precision: training: 0.844982 validation: 0.844519
09/16 08:26:05 AM: edges-spr2_recall: training: 0.811609 validation: 0.802679
09/16 08:26:05 AM: edges-spr2_f1: training: 0.827959 validation: 0.823068
09/16 08:26:05 AM: Global learning rate: 0.0001
09/16 08:26:05 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:26:05 AM: Update 607: task edges-spr2, batch 7 (607): mcc: 0.7452, acc: 0.0947, precision: 0.8516, recall: 0.8239, f1: 0.8375, edges-spr2_loss: 0.2667
09/16 08:26:13 AM: ***** Step 700 / Validation 7 *****
09/16 08:26:13 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:13 AM: Validating...
09/16 08:26:14 AM: Updating LR scheduler:
09/16 08:26:14 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:26:14 AM: 	# validation passes without improvement: 1
09/16 08:26:14 AM: edges-spr2_loss: training: 0.268995 validation: 0.316793
09/16 08:26:14 AM: macro_avg: validation: 0.822526
09/16 08:26:14 AM: micro_avg: validation: 0.000000
09/16 08:26:14 AM: edges-spr2_mcc: training: 0.737031 validation: 0.722290
09/16 08:26:14 AM: edges-spr2_acc: training: 0.091015 validation: 0.084127
09/16 08:26:14 AM: edges-spr2_precision: training: 0.848227 validation: 0.846691
09/16 08:26:14 AM: edges-spr2_recall: training: 0.814610 validation: 0.799702
09/16 08:26:14 AM: edges-spr2_f1: training: 0.831078 validation: 0.822526
09/16 08:26:14 AM: Global learning rate: 0.0001
09/16 08:26:14 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:26:15 AM: Update 707: task edges-spr2, batch 7 (707): mcc: 0.7281, acc: 0.0757, precision: 0.8445, recall: 0.8106, f1: 0.8272, edges-spr2_loss: 0.2777
09/16 08:26:23 AM: ***** Step 800 / Validation 8 *****
09/16 08:26:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:23 AM: Validating...
09/16 08:26:24 AM: Updating LR scheduler:
09/16 08:26:24 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:26:24 AM: 	# validation passes without improvement: 2
09/16 08:26:24 AM: edges-spr2_loss: training: 0.265412 validation: 0.317661
09/16 08:26:24 AM: macro_avg: validation: 0.819611
09/16 08:26:24 AM: micro_avg: validation: 0.000000
09/16 08:26:24 AM: edges-spr2_mcc: training: 0.741982 validation: 0.718903
09/16 08:26:24 AM: edges-spr2_acc: training: 0.097818 validation: 0.084127
09/16 08:26:24 AM: edges-spr2_precision: training: 0.849846 validation: 0.848430
09/16 08:26:24 AM: edges-spr2_recall: training: 0.819478 validation: 0.792686
09/16 08:26:24 AM: edges-spr2_f1: training: 0.834386 validation: 0.819611
09/16 08:26:24 AM: Global learning rate: 0.0001
09/16 08:26:24 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:26:25 AM: Update 813: task edges-spr2, batch 13 (813): mcc: 0.7489, acc: 0.0978, precision: 0.8514, recall: 0.8277, f1: 0.8394, edges-spr2_loss: 0.2621
09/16 08:26:33 AM: ***** Step 900 / Validation 9 *****
09/16 08:26:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:33 AM: Validating...
09/16 08:26:34 AM: Updating LR scheduler:
09/16 08:26:34 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:26:34 AM: 	# validation passes without improvement: 3
09/16 08:26:34 AM: edges-spr2_loss: training: 0.262619 validation: 0.320184
09/16 08:26:34 AM: macro_avg: validation: 0.818932
09/16 08:26:34 AM: micro_avg: validation: 0.000000
09/16 08:26:34 AM: edges-spr2_mcc: training: 0.743478 validation: 0.718148
09/16 08:26:34 AM: edges-spr2_acc: training: 0.101242 validation: 0.082540
09/16 08:26:34 AM: edges-spr2_precision: training: 0.852088 validation: 0.848927
09/16 08:26:34 AM: edges-spr2_recall: training: 0.818328 validation: 0.790984
09/16 08:26:34 AM: edges-spr2_f1: training: 0.834867 validation: 0.818932
09/16 08:26:34 AM: Global learning rate: 0.0001
09/16 08:26:34 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:26:36 AM: Update 911: task edges-spr2, batch 11 (911): mcc: 0.7359, acc: 0.1036, precision: 0.8454, recall: 0.8216, f1: 0.8333, edges-spr2_loss: 0.2738
09/16 08:26:44 AM: ***** Step 1000 / Validation 10 *****
09/16 08:26:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:44 AM: Validating...
09/16 08:26:45 AM: Updating LR scheduler:
09/16 08:26:45 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:26:45 AM: 	# validation passes without improvement: 0
09/16 08:26:45 AM: edges-spr2_loss: training: 0.261054 validation: 0.320534
09/16 08:26:45 AM: macro_avg: validation: 0.818242
09/16 08:26:45 AM: micro_avg: validation: 0.000000
09/16 08:26:45 AM: edges-spr2_mcc: training: 0.743305 validation: 0.716683
09/16 08:26:45 AM: edges-spr2_acc: training: 0.098807 validation: 0.082540
09/16 08:26:45 AM: edges-spr2_precision: training: 0.851874 validation: 0.846714
09/16 08:26:45 AM: edges-spr2_recall: training: 0.819977 validation: 0.791622
09/16 08:26:45 AM: edges-spr2_f1: training: 0.835622 validation: 0.818242
09/16 08:26:45 AM: Global learning rate: 5e-05
09/16 08:26:45 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:26:46 AM: Update 1011: task edges-spr2, batch 11 (1011): mcc: 0.7553, acc: 0.1237, precision: 0.8623, recall: 0.8306, f1: 0.8462, edges-spr2_loss: 0.2563
09/16 08:26:53 AM: ***** Step 1100 / Validation 11 *****
09/16 08:26:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:26:53 AM: Validating...
09/16 08:26:54 AM: Updating LR scheduler:
09/16 08:26:54 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:26:54 AM: 	# validation passes without improvement: 1
09/16 08:26:54 AM: edges-spr2_loss: training: 0.255696 validation: 0.319801
09/16 08:26:54 AM: macro_avg: validation: 0.821080
09/16 08:26:54 AM: micro_avg: validation: 0.000000
09/16 08:26:54 AM: edges-spr2_mcc: training: 0.748614 validation: 0.720457
09/16 08:26:54 AM: edges-spr2_acc: training: 0.105057 validation: 0.076190
09/16 08:26:54 AM: edges-spr2_precision: training: 0.853476 validation: 0.846971
09/16 08:26:54 AM: edges-spr2_recall: training: 0.824064 validation: 0.796726
09/16 08:26:54 AM: edges-spr2_f1: training: 0.838512 validation: 0.821080
09/16 08:26:54 AM: Global learning rate: 5e-05
09/16 08:26:54 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:26:56 AM: Update 1116: task edges-spr2, batch 16 (1116): mcc: 0.7551, acc: 0.1060, precision: 0.8650, recall: 0.8204, f1: 0.8421, edges-spr2_loss: 0.2553
09/16 08:27:04 AM: ***** Step 1200 / Validation 12 *****
09/16 08:27:04 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:04 AM: Validating...
09/16 08:27:05 AM: Updating LR scheduler:
09/16 08:27:05 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:27:05 AM: 	# validation passes without improvement: 2
09/16 08:27:05 AM: edges-spr2_loss: training: 0.254759 validation: 0.321097
09/16 08:27:05 AM: macro_avg: validation: 0.820125
09/16 08:27:05 AM: micro_avg: validation: 0.000000
09/16 08:27:05 AM: edges-spr2_mcc: training: 0.748505 validation: 0.719057
09/16 08:27:05 AM: edges-spr2_acc: training: 0.105822 validation: 0.069841
09/16 08:27:05 AM: edges-spr2_precision: training: 0.855732 validation: 0.846380
09/16 08:27:05 AM: edges-spr2_recall: training: 0.821730 validation: 0.795450
09/16 08:27:05 AM: edges-spr2_f1: training: 0.838386 validation: 0.820125
09/16 08:27:05 AM: Global learning rate: 5e-05
09/16 08:27:05 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:27:06 AM: Update 1215: task edges-spr2, batch 15 (1215): mcc: 0.7520, acc: 0.1124, precision: 0.8578, recall: 0.8233, f1: 0.8402, edges-spr2_loss: 0.2538
09/16 08:27:13 AM: ***** Step 1300 / Validation 13 *****
09/16 08:27:13 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:13 AM: Validating...
09/16 08:27:14 AM: Updating LR scheduler:
09/16 08:27:14 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:27:14 AM: 	# validation passes without improvement: 3
09/16 08:27:14 AM: edges-spr2_loss: training: 0.252714 validation: 0.321146
09/16 08:27:14 AM: macro_avg: validation: 0.819719
09/16 08:27:14 AM: micro_avg: validation: 0.000000
09/16 08:27:14 AM: edges-spr2_mcc: training: 0.750513 validation: 0.717306
09/16 08:27:14 AM: edges-spr2_acc: training: 0.109078 validation: 0.076190
09/16 08:27:14 AM: edges-spr2_precision: training: 0.855532 validation: 0.841469
09/16 08:27:14 AM: edges-spr2_recall: training: 0.824266 validation: 0.799064
09/16 08:27:14 AM: edges-spr2_f1: training: 0.839608 validation: 0.819719
09/16 08:27:14 AM: Global learning rate: 5e-05
09/16 08:27:14 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:27:16 AM: Update 1321: task edges-spr2, batch 21 (1321): mcc: 0.7548, acc: 0.1144, precision: 0.8574, recall: 0.8308, f1: 0.8439, edges-spr2_loss: 0.2534
09/16 08:27:23 AM: ***** Step 1400 / Validation 14 *****
09/16 08:27:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:23 AM: Validating...
09/16 08:27:24 AM: Updating LR scheduler:
09/16 08:27:24 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:27:24 AM: 	# validation passes without improvement: 0
09/16 08:27:24 AM: edges-spr2_loss: training: 0.251813 validation: 0.319615
09/16 08:27:24 AM: macro_avg: validation: 0.819640
09/16 08:27:24 AM: micro_avg: validation: 0.000000
09/16 08:27:24 AM: edges-spr2_mcc: training: 0.753274 validation: 0.718771
09/16 08:27:24 AM: edges-spr2_acc: training: 0.105069 validation: 0.082540
09/16 08:27:24 AM: edges-spr2_precision: training: 0.856384 validation: 0.847762
09/16 08:27:24 AM: edges-spr2_recall: training: 0.828000 validation: 0.793323
09/16 08:27:24 AM: edges-spr2_f1: training: 0.841953 validation: 0.819640
09/16 08:27:24 AM: Global learning rate: 2.5e-05
09/16 08:27:24 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:27:26 AM: Update 1416: task edges-spr2, batch 16 (1416): mcc: 0.7490, acc: 0.0970, precision: 0.8597, recall: 0.8177, f1: 0.8382, edges-spr2_loss: 0.2534
09/16 08:27:33 AM: ***** Step 1500 / Validation 15 *****
09/16 08:27:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:33 AM: Validating...
09/16 08:27:34 AM: Updating LR scheduler:
09/16 08:27:34 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:27:34 AM: 	# validation passes without improvement: 1
09/16 08:27:34 AM: edges-spr2_loss: training: 0.248562 validation: 0.319678
09/16 08:27:34 AM: macro_avg: validation: 0.821219
09/16 08:27:34 AM: micro_avg: validation: 0.000000
09/16 08:27:34 AM: edges-spr2_mcc: training: 0.757263 validation: 0.718542
09/16 08:27:34 AM: edges-spr2_acc: training: 0.112757 validation: 0.073016
09/16 08:27:34 AM: edges-spr2_precision: training: 0.861480 validation: 0.838317
09/16 08:27:34 AM: edges-spr2_recall: training: 0.827582 validation: 0.804805
09/16 08:27:34 AM: edges-spr2_f1: training: 0.844191 validation: 0.821219
09/16 08:27:34 AM: Global learning rate: 2.5e-05
09/16 08:27:34 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:27:36 AM: Update 1516: task edges-spr2, batch 16 (1516): mcc: 0.7456, acc: 0.1036, precision: 0.8467, recall: 0.8277, f1: 0.8371, edges-spr2_loss: 0.2554
09/16 08:27:43 AM: ***** Step 1600 / Validation 16 *****
09/16 08:27:43 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:27:43 AM: Validating...
09/16 08:27:44 AM: Updating LR scheduler:
09/16 08:27:44 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:27:44 AM: 	# validation passes without improvement: 2
09/16 08:27:44 AM: Ran out of early stopping patience. Stopping training.
09/16 08:27:44 AM: edges-spr2_loss: training: 0.248492 validation: 0.319968
09/16 08:27:44 AM: macro_avg: validation: 0.820905
09/16 08:27:44 AM: micro_avg: validation: 0.000000
09/16 08:27:44 AM: edges-spr2_mcc: training: 0.755995 validation: 0.719720
09/16 08:27:44 AM: edges-spr2_acc: training: 0.112982 validation: 0.079365
09/16 08:27:44 AM: edges-spr2_precision: training: 0.858694 validation: 0.844925
09/16 08:27:44 AM: edges-spr2_recall: training: 0.828290 validation: 0.798214
09/16 08:27:44 AM: edges-spr2_f1: training: 0.843218 validation: 0.820905
09/16 08:27:44 AM: Global learning rate: 2.5e-05
09/16 08:27:44 AM: Saving checkpoints to: ./experiments/spr2-rte-top/run
09/16 08:27:44 AM: Stopped training after 16 validation checks
09/16 08:27:44 AM: Trained edges-spr2 for 1600 batches or 22.857 epochs
09/16 08:27:44 AM: ***** VALIDATION RESULTS *****
09/16 08:27:44 AM: edges-spr2_f1 (for best val pass 6): edges-spr2_loss: 0.31561, macro_avg: 0.82307, micro_avg: 0.00000, edges-spr2_mcc: 0.72248, edges-spr2_acc: 0.08571, edges-spr2_precision: 0.84452, edges-spr2_recall: 0.80268, edges-spr2_f1: 0.82307
09/16 08:27:44 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.34657, macro_avg: 0.79553, micro_avg: 0.00000, edges-spr2_mcc: 0.68835, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.84756, edges-spr2_recall: 0.74952, edges-spr2_f1: 0.79553
09/16 08:27:44 AM: macro_avg (for best val pass 6): edges-spr2_loss: 0.31561, macro_avg: 0.82307, micro_avg: 0.00000, edges-spr2_mcc: 0.72248, edges-spr2_acc: 0.08571, edges-spr2_precision: 0.84452, edges-spr2_recall: 0.80268, edges-spr2_f1: 0.82307
09/16 08:27:44 AM: Evaluating...
09/16 08:27:44 AM: Loaded model state from ./experiments/spr2-rte-top/run/edges-spr2/model_state_target_train_val_6.best.th
09/16 08:27:44 AM: Evaluating on: edges-spr2, split: val
09/16 08:27:46 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:27:46 AM: Finished evaluating on: edges-spr2
09/16 08:27:46 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:27:46 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-rte-top/run
09/16 08:27:46 AM: Wrote all preds for split 'val' to ./experiments/spr2-rte-top/run
09/16 08:27:46 AM: Evaluating on: edges-spr2, split: test
09/16 08:27:47 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:27:47 AM: Finished evaluating on: edges-spr2
09/16 08:27:47 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:27:47 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-rte-top/run
09/16 08:27:47 AM: Wrote all preds for split 'test' to ./experiments/spr2-rte-top/run
09/16 08:27:47 AM: Writing results for split 'val' to ./experiments/spr2-rte-top/results.tsv
09/16 08:27:47 AM: micro_avg: 0.000, macro_avg: 0.823, edges-spr2_mcc: 0.722, edges-spr2_acc: 0.086, edges-spr2_precision: 0.845, edges-spr2_recall: 0.803, edges-spr2_f1: 0.823
09/16 08:27:47 AM: Done!
09/16 08:27:47 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
