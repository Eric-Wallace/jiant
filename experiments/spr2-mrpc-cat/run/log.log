09/16 08:33:50 AM: Git branch: master
09/16 08:33:50 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:33:50 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-mrpc-cat/",
  "exp_name": "experiments/spr2-mrpc-cat",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-mrpc-cat/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/mrpc",
  "pytorch_transformers_output_mode": "cat",
  "remote_log_name": "experiments/spr2-mrpc-cat__run",
  "run_dir": "./experiments/spr2-mrpc-cat/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:33:50 AM: Saved config to ./experiments/spr2-mrpc-cat/run/params.conf
09/16 08:33:50 AM: Using random seed 1234
09/16 08:33:52 AM: Using GPU 0
09/16 08:33:52 AM: Loading tasks...
09/16 08:33:52 AM: Writing pre-preprocessed tasks to ./experiments/spr2-mrpc-cat/
09/16 08:33:52 AM: 	Creating task edges-spr2 from scratch.
09/16 08:33:52 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:33:52 AM: 	Finished loading tasks: edges-spr2.
09/16 08:33:52 AM: 	Building vocab from scratch.
09/16 08:33:52 AM: 	Counting units for task edges-spr2.
09/16 08:33:53 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:33:54 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:33:54 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:33:54 AM: 	Saved vocab to ./experiments/spr2-mrpc-cat/vocab
09/16 08:33:54 AM: Loading token dictionary from ./experiments/spr2-mrpc-cat/vocab.
09/16 08:33:54 AM: 	Loaded vocab from ./experiments/spr2-mrpc-cat/vocab
09/16 08:33:54 AM: 	Vocab namespace tokens: size 7943
09/16 08:33:54 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:33:54 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:33:54 AM: 	Vocab namespace chars: size 65
09/16 08:33:54 AM: 	Finished building vocab.
09/16 08:33:54 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-mrpc-cat/preproc/edges-spr2__train_data
09/16 08:33:55 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-mrpc-cat/preproc/edges-spr2__val_data
09/16 08:33:55 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-mrpc-cat/preproc/edges-spr2__test_data
09/16 08:33:55 AM: 	Finished indexing tasks
09/16 08:33:55 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:33:55 AM: 	  Training on 
09/16 08:33:55 AM: 	  Evaluating on edges-spr2
09/16 08:33:55 AM: 	Finished loading tasks in 2.525s
09/16 08:33:55 AM: 	 Tasks: ['edges-spr2']
09/16 08:33:55 AM: Building model...
09/16 08:33:55 AM: Using BERT model (bert-base-uncased).
09/16 08:33:55 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:33:55 AM: models/mrpc
09/16 08:33:55 AM: loading configuration file models/mrpc/config.json
09/16 08:33:55 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "mrpc",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:33:55 AM: loading weights file models/mrpc/pytorch_model.bin
09/16 08:34:05 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpqf7esjsv
09/16 08:34:07 AM: copying /tmp/tmpqf7esjsv to cache at ./experiments/spr2-mrpc-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: creating metadata file for ./experiments/spr2-mrpc-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: removing temp file /tmp/tmpqf7esjsv
09/16 08:34:07 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-mrpc-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: Initializing parameters
09/16 08:34:07 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:34:07 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:34:12 AM: Model specification:
09/16 08:34:12 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:34:13 AM: Model parameters:
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:13 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:34:13 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:34:13 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:34:13 AM: Total number of parameters: 110537236 (1.10537e+08)
09/16 08:34:13 AM: Number of trainable parameters: 1054996 (1.055e+06)
09/16 08:34:13 AM: Finished building model in 17.827s
09/16 08:34:13 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:34:13 AM: patience = 9
09/16 08:34:13 AM: val_interval = 100
09/16 08:34:13 AM: max_vals = 100
09/16 08:34:13 AM: cuda_device = 0
09/16 08:34:13 AM: grad_norm = 5.0
09/16 08:34:13 AM: grad_clipping = None
09/16 08:34:13 AM: lr_decay = 0.99
09/16 08:34:13 AM: min_lr = 1e-06
09/16 08:34:13 AM: keep_all_checkpoints = 0
09/16 08:34:13 AM: val_data_limit = 5000
09/16 08:34:13 AM: max_epochs = -1
09/16 08:34:13 AM: dec_val_scale = 250
09/16 08:34:13 AM: training_data_fraction = 1
09/16 08:34:13 AM: type = adam
09/16 08:34:13 AM: parameter_groups = None
09/16 08:34:13 AM: Number of trainable parameters: 1054996
09/16 08:34:13 AM: infer_type_and_cast = True
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: lr = 0.0001
09/16 08:34:13 AM: amsgrad = True
09/16 08:34:13 AM: type = reduce_on_plateau
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: mode = max
09/16 08:34:13 AM: factor = 0.5
09/16 08:34:13 AM: patience = 3
09/16 08:34:13 AM: threshold = 0.0001
09/16 08:34:13 AM: threshold_mode = abs
09/16 08:34:13 AM: verbose = True
09/16 08:34:13 AM: type = adam
09/16 08:34:13 AM: parameter_groups = None
09/16 08:34:13 AM: Number of trainable parameters: 1054996
09/16 08:34:13 AM: infer_type_and_cast = True
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: lr = 0.0001
09/16 08:34:13 AM: amsgrad = True
09/16 08:34:13 AM: type = reduce_on_plateau
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: mode = max
09/16 08:34:13 AM: factor = 0.5
09/16 08:34:13 AM: patience = 3
09/16 08:34:13 AM: threshold = 0.0001
09/16 08:34:13 AM: threshold_mode = abs
09/16 08:34:13 AM: verbose = True
09/16 08:34:13 AM: Starting training without restoring from a checkpoint.
09/16 08:34:13 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:34:13 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:34:23 AM: ***** Step 100 / Validation 1 *****
09/16 08:34:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:23 AM: Validating...
09/16 08:34:23 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.6991, acc: 0.0652, precision: 0.8573, recall: 0.7601, f1: 0.8058, edges-spr2_loss: 0.3151
09/16 08:34:24 AM: Best result seen so far for edges-spr2.
09/16 08:34:24 AM: Best result seen so far for micro.
09/16 08:34:24 AM: Best result seen so far for macro.
09/16 08:34:24 AM: Updating LR scheduler:
09/16 08:34:24 AM: 	Best result seen so far for macro_avg: 0.794
09/16 08:34:24 AM: 	# validation passes without improvement: 0
09/16 08:34:24 AM: edges-spr2_loss: training: 0.371391 validation: 0.342197
09/16 08:34:24 AM: macro_avg: validation: 0.793744
09/16 08:34:24 AM: micro_avg: validation: 0.000000
09/16 08:34:24 AM: edges-spr2_mcc: training: 0.623090 validation: 0.686879
09/16 08:34:24 AM: edges-spr2_acc: training: 0.044974 validation: 0.068254
09/16 08:34:24 AM: edges-spr2_precision: training: 0.779054 validation: 0.849794
09/16 08:34:24 AM: edges-spr2_recall: training: 0.735590 validation: 0.744631
09/16 08:34:24 AM: edges-spr2_f1: training: 0.756698 validation: 0.793744
09/16 08:34:24 AM: Global learning rate: 0.0001
09/16 08:34:24 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:34:32 AM: ***** Step 200 / Validation 2 *****
09/16 08:34:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:32 AM: Validating...
09/16 08:34:33 AM: Best result seen so far for edges-spr2.
09/16 08:34:33 AM: Best result seen so far for macro.
09/16 08:34:33 AM: Updating LR scheduler:
09/16 08:34:33 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:34:33 AM: 	# validation passes without improvement: 0
09/16 08:34:33 AM: edges-spr2_loss: training: 0.307447 validation: 0.325211
09/16 08:34:33 AM: macro_avg: validation: 0.817072
09/16 08:34:33 AM: micro_avg: validation: 0.000000
09/16 08:34:33 AM: edges-spr2_mcc: training: 0.698852 validation: 0.715081
09/16 08:34:33 AM: edges-spr2_acc: training: 0.064761 validation: 0.077778
09/16 08:34:33 AM: edges-spr2_precision: training: 0.832865 validation: 0.846399
09/16 08:34:33 AM: edges-spr2_recall: training: 0.777893 validation: 0.789709
09/16 08:34:33 AM: edges-spr2_f1: training: 0.804441 validation: 0.817072
09/16 08:34:33 AM: Global learning rate: 0.0001
09/16 08:34:33 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:34:34 AM: Update 202: task edges-spr2, batch 2 (202): mcc: 0.7248, acc: 0.1000, precision: 0.8550, recall: 0.7884, f1: 0.8204, edges-spr2_loss: 0.2887
09/16 08:34:43 AM: ***** Step 300 / Validation 3 *****
09/16 08:34:43 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:43 AM: Validating...
09/16 08:34:44 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.7314, acc: 0.0731, precision: 0.8382, recall: 0.8300, f1: 0.8341, edges-spr2_loss: 0.2866
09/16 08:34:44 AM: Best result seen so far for edges-spr2.
09/16 08:34:44 AM: Best result seen so far for macro.
09/16 08:34:44 AM: Updating LR scheduler:
09/16 08:34:44 AM: 	Best result seen so far for macro_avg: 0.821
09/16 08:34:44 AM: 	# validation passes without improvement: 0
09/16 08:34:44 AM: edges-spr2_loss: training: 0.284986 validation: 0.321283
09/16 08:34:44 AM: macro_avg: validation: 0.821245
09/16 08:34:44 AM: micro_avg: validation: 0.000000
09/16 08:34:44 AM: edges-spr2_mcc: training: 0.720471 validation: 0.716424
09/16 08:34:44 AM: edges-spr2_acc: training: 0.079428 validation: 0.066667
09/16 08:34:44 AM: edges-spr2_precision: training: 0.842790 validation: 0.828893
09/16 08:34:44 AM: edges-spr2_recall: training: 0.797215 validation: 0.813736
09/16 08:34:44 AM: edges-spr2_f1: training: 0.819369 validation: 0.821245
09/16 08:34:44 AM: Global learning rate: 0.0001
09/16 08:34:44 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:34:53 AM: ***** Step 400 / Validation 4 *****
09/16 08:34:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:53 AM: Validating...
09/16 08:34:54 AM: Updating LR scheduler:
09/16 08:34:54 AM: 	Best result seen so far for macro_avg: 0.821
09/16 08:34:54 AM: 	# validation passes without improvement: 1
09/16 08:34:54 AM: edges-spr2_loss: training: 0.271275 validation: 0.320896
09/16 08:34:54 AM: macro_avg: validation: 0.818132
09/16 08:34:54 AM: micro_avg: validation: 0.000000
09/16 08:34:54 AM: edges-spr2_mcc: training: 0.738522 validation: 0.717949
09/16 08:34:54 AM: edges-spr2_acc: training: 0.090819 validation: 0.069841
09/16 08:34:54 AM: edges-spr2_precision: training: 0.848567 validation: 0.852142
09/16 08:34:54 AM: edges-spr2_recall: training: 0.815854 validation: 0.786732
09/16 08:34:54 AM: edges-spr2_f1: training: 0.831889 validation: 0.818132
09/16 08:34:54 AM: Global learning rate: 0.0001
09/16 08:34:54 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:34:54 AM: Update 402: task edges-spr2, batch 2 (402): mcc: 0.7455, acc: 0.1250, precision: 0.8769, recall: 0.7969, f1: 0.8350, edges-spr2_loss: 0.2642
09/16 08:35:02 AM: ***** Step 500 / Validation 5 *****
09/16 08:35:02 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:02 AM: Validating...
09/16 08:35:03 AM: Best result seen so far for edges-spr2.
09/16 08:35:03 AM: Best result seen so far for macro.
09/16 08:35:03 AM: Updating LR scheduler:
09/16 08:35:03 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:35:03 AM: 	# validation passes without improvement: 0
09/16 08:35:03 AM: edges-spr2_loss: training: 0.258954 validation: 0.317413
09/16 08:35:03 AM: macro_avg: validation: 0.822401
09/16 08:35:03 AM: micro_avg: validation: 0.000000
09/16 08:35:03 AM: edges-spr2_mcc: training: 0.750162 validation: 0.721315
09/16 08:35:03 AM: edges-spr2_acc: training: 0.101377 validation: 0.076190
09/16 08:35:03 AM: edges-spr2_precision: training: 0.857010 validation: 0.843352
09/16 08:35:03 AM: edges-spr2_recall: training: 0.822706 validation: 0.802467
09/16 08:35:03 AM: edges-spr2_f1: training: 0.839508 validation: 0.822401
09/16 08:35:03 AM: Global learning rate: 0.0001
09/16 08:35:03 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:35:04 AM: Update 505: task edges-spr2, batch 5 (505): mcc: 0.7497, acc: 0.1060, precision: 0.8553, recall: 0.8239, f1: 0.8393, edges-spr2_loss: 0.2592
09/16 08:35:13 AM: ***** Step 600 / Validation 6 *****
09/16 08:35:13 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:13 AM: Validating...
09/16 08:35:14 AM: Evaluate: task edges-spr2, batch 9 (10): mcc: 0.7200, acc: 0.0734, precision: 0.8462, recall: 0.7973, f1: 0.8210, edges-spr2_loss: 0.2957
09/16 08:35:14 AM: Updating LR scheduler:
09/16 08:35:14 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:35:14 AM: 	# validation passes without improvement: 1
09/16 08:35:14 AM: edges-spr2_loss: training: 0.250035 validation: 0.320106
09/16 08:35:14 AM: macro_avg: validation: 0.819974
09/16 08:35:14 AM: micro_avg: validation: 0.000000
09/16 08:35:14 AM: edges-spr2_mcc: training: 0.758266 validation: 0.718598
09/16 08:35:14 AM: edges-spr2_acc: training: 0.115103 validation: 0.073016
09/16 08:35:14 AM: edges-spr2_precision: training: 0.859357 validation: 0.845338
09/16 08:35:14 AM: edges-spr2_recall: training: 0.830952 validation: 0.796088
09/16 08:35:14 AM: edges-spr2_f1: training: 0.844916 validation: 0.819974
09/16 08:35:14 AM: Global learning rate: 0.0001
09/16 08:35:14 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:35:22 AM: ***** Step 700 / Validation 7 *****
09/16 08:35:22 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:22 AM: Validating...
09/16 08:35:23 AM: Updating LR scheduler:
09/16 08:35:23 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:35:23 AM: 	# validation passes without improvement: 2
09/16 08:35:23 AM: edges-spr2_loss: training: 0.241471 validation: 0.322299
09/16 08:35:23 AM: macro_avg: validation: 0.818687
09/16 08:35:23 AM: micro_avg: validation: 0.000000
09/16 08:35:23 AM: edges-spr2_mcc: training: 0.767448 validation: 0.715353
09/16 08:35:23 AM: edges-spr2_acc: training: 0.123001 validation: 0.080952
09/16 08:35:23 AM: edges-spr2_precision: training: 0.866422 validation: 0.839063
09/16 08:35:23 AM: edges-spr2_recall: training: 0.835767 validation: 0.799277
09/16 08:35:23 AM: edges-spr2_f1: training: 0.850819 validation: 0.818687
09/16 08:35:23 AM: Global learning rate: 0.0001
09/16 08:35:23 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:35:24 AM: Update 701: task edges-spr2, batch 1 (701): mcc: 0.7364, acc: 0.0777, precision: 0.8483, recall: 0.8187, f1: 0.8332, edges-spr2_loss: 0.2709
09/16 08:35:33 AM: ***** Step 800 / Validation 8 *****
09/16 08:35:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:33 AM: Validating...
09/16 08:35:34 AM: Updating LR scheduler:
09/16 08:35:34 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:35:34 AM: 	# validation passes without improvement: 3
09/16 08:35:34 AM: edges-spr2_loss: training: 0.234062 validation: 0.325391
09/16 08:35:34 AM: macro_avg: validation: 0.819010
09/16 08:35:34 AM: micro_avg: validation: 0.000000
09/16 08:35:34 AM: edges-spr2_mcc: training: 0.773579 validation: 0.715104
09/16 08:35:34 AM: edges-spr2_acc: training: 0.129189 validation: 0.077778
09/16 08:35:34 AM: edges-spr2_precision: training: 0.867746 validation: 0.836251
09/16 08:35:34 AM: edges-spr2_recall: training: 0.842611 validation: 0.802467
09/16 08:35:34 AM: edges-spr2_f1: training: 0.854994 validation: 0.819010
09/16 08:35:34 AM: Global learning rate: 0.0001
09/16 08:35:34 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:35:34 AM: Update 805: task edges-spr2, batch 5 (805): mcc: 0.7787, acc: 0.1258, precision: 0.8739, recall: 0.8472, f1: 0.8604, edges-spr2_loss: 0.2308
09/16 08:35:43 AM: ***** Step 900 / Validation 9 *****
09/16 08:35:43 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:43 AM: Validating...
09/16 08:35:44 AM: Updating LR scheduler:
09/16 08:35:44 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:35:44 AM: 	# validation passes without improvement: 0
09/16 08:35:44 AM: edges-spr2_loss: training: 0.229476 validation: 0.332758
09/16 08:35:44 AM: macro_avg: validation: 0.814485
09/16 08:35:44 AM: micro_avg: validation: 0.000000
09/16 08:35:44 AM: edges-spr2_mcc: training: 0.780514 validation: 0.708432
09/16 08:35:44 AM: edges-spr2_acc: training: 0.135228 validation: 0.063492
09/16 08:35:44 AM: edges-spr2_precision: training: 0.872988 validation: 0.833519
09/16 08:35:44 AM: edges-spr2_recall: training: 0.845649 validation: 0.796300
09/16 08:35:44 AM: edges-spr2_f1: training: 0.859101 validation: 0.814485
09/16 08:35:44 AM: Global learning rate: 5e-05
09/16 08:35:44 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:35:44 AM: Update 904: task edges-spr2, batch 4 (904): mcc: 0.7632, acc: 0.1468, precision: 0.8649, recall: 0.8362, f1: 0.8503, edges-spr2_loss: 0.2470
09/16 08:35:53 AM: ***** Step 1000 / Validation 10 *****
09/16 08:35:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:53 AM: Validating...
09/16 08:35:54 AM: Updating LR scheduler:
09/16 08:35:54 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:35:54 AM: 	# validation passes without improvement: 1
09/16 08:35:54 AM: edges-spr2_loss: training: 0.221704 validation: 0.328924
09/16 08:35:54 AM: macro_avg: validation: 0.814653
09/16 08:35:54 AM: micro_avg: validation: 0.000000
09/16 08:35:54 AM: edges-spr2_mcc: training: 0.788969 validation: 0.709925
09/16 08:35:54 AM: edges-spr2_acc: training: 0.147516 validation: 0.080952
09/16 08:35:54 AM: edges-spr2_precision: training: 0.878079 validation: 0.838586
09/16 08:35:54 AM: edges-spr2_recall: training: 0.852795 validation: 0.792048
09/16 08:35:54 AM: edges-spr2_f1: training: 0.865252 validation: 0.814653
09/16 08:35:54 AM: Global learning rate: 5e-05
09/16 08:35:54 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:35:54 AM: Update 1003: task edges-spr2, batch 3 (1003): mcc: 0.8148, acc: 0.1627, precision: 0.8943, recall: 0.8713, f1: 0.8827, edges-spr2_loss: 0.2054
09/16 08:36:02 AM: ***** Step 1100 / Validation 11 *****
09/16 08:36:02 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:02 AM: Validating...
09/16 08:36:03 AM: Updating LR scheduler:
09/16 08:36:03 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:36:03 AM: 	# validation passes without improvement: 2
09/16 08:36:03 AM: edges-spr2_loss: training: 0.214903 validation: 0.332394
09/16 08:36:03 AM: macro_avg: validation: 0.813989
09/16 08:36:03 AM: micro_avg: validation: 0.000000
09/16 08:36:03 AM: edges-spr2_mcc: training: 0.795224 validation: 0.710968
09/16 08:36:03 AM: edges-spr2_acc: training: 0.159837 validation: 0.076190
09/16 08:36:03 AM: edges-spr2_precision: training: 0.880086 validation: 0.845907
09/16 08:36:03 AM: edges-spr2_recall: training: 0.857908 validation: 0.784393
09/16 08:36:03 AM: edges-spr2_f1: training: 0.868856 validation: 0.813989
09/16 08:36:03 AM: Global learning rate: 5e-05
09/16 08:36:03 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:36:04 AM: Update 1118: task edges-spr2, batch 18 (1118): mcc: 0.7937, acc: 0.1383, precision: 0.8825, recall: 0.8533, f1: 0.8676, edges-spr2_loss: 0.2209
09/16 08:36:12 AM: ***** Step 1200 / Validation 12 *****
09/16 08:36:12 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:12 AM: Validating...
09/16 08:36:13 AM: Updating LR scheduler:
09/16 08:36:13 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:36:13 AM: 	# validation passes without improvement: 3
09/16 08:36:13 AM: edges-spr2_loss: training: 0.217295 validation: 0.332962
09/16 08:36:13 AM: macro_avg: validation: 0.815024
09/16 08:36:13 AM: micro_avg: validation: 0.000000
09/16 08:36:13 AM: edges-spr2_mcc: training: 0.792120 validation: 0.709541
09/16 08:36:13 AM: edges-spr2_acc: training: 0.147843 validation: 0.063492
09/16 08:36:13 AM: edges-spr2_precision: training: 0.879036 validation: 0.835118
09/16 08:36:13 AM: edges-spr2_recall: training: 0.855281 validation: 0.795875
09/16 08:36:13 AM: edges-spr2_f1: training: 0.866996 validation: 0.815024
09/16 08:36:13 AM: Global learning rate: 5e-05
09/16 08:36:13 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:36:14 AM: Update 1215: task edges-spr2, batch 15 (1215): mcc: 0.7994, acc: 0.1729, precision: 0.8828, recall: 0.8604, f1: 0.8715, edges-spr2_loss: 0.2117
09/16 08:36:21 AM: ***** Step 1300 / Validation 13 *****
09/16 08:36:21 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:21 AM: Validating...
09/16 08:36:22 AM: Updating LR scheduler:
09/16 08:36:22 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:36:22 AM: 	# validation passes without improvement: 0
09/16 08:36:22 AM: edges-spr2_loss: training: 0.212643 validation: 0.335288
09/16 08:36:22 AM: macro_avg: validation: 0.817183
09/16 08:36:22 AM: micro_avg: validation: 0.000000
09/16 08:36:22 AM: edges-spr2_mcc: training: 0.797620 validation: 0.712706
09/16 08:36:22 AM: edges-spr2_acc: training: 0.158646 validation: 0.079365
09/16 08:36:22 AM: edges-spr2_precision: training: 0.881884 validation: 0.836376
09/16 08:36:22 AM: edges-spr2_recall: training: 0.859132 validation: 0.798852
09/16 08:36:22 AM: edges-spr2_f1: training: 0.870360 validation: 0.817183
09/16 08:36:22 AM: Global learning rate: 2.5e-05
09/16 08:36:22 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:36:24 AM: Update 1326: task edges-spr2, batch 26 (1326): mcc: 0.7976, acc: 0.1553, precision: 0.8801, recall: 0.8628, f1: 0.8714, edges-spr2_loss: 0.2110
09/16 08:36:31 AM: ***** Step 1400 / Validation 14 *****
09/16 08:36:31 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:31 AM: Validating...
09/16 08:36:32 AM: Updating LR scheduler:
09/16 08:36:32 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:36:32 AM: 	# validation passes without improvement: 1
09/16 08:36:32 AM: edges-spr2_loss: training: 0.208044 validation: 0.335815
09/16 08:36:32 AM: macro_avg: validation: 0.816500
09/16 08:36:32 AM: micro_avg: validation: 0.000000
09/16 08:36:32 AM: edges-spr2_mcc: training: 0.801852 validation: 0.711793
09/16 08:36:32 AM: edges-spr2_acc: training: 0.170382 validation: 0.066667
09/16 08:36:32 AM: edges-spr2_precision: training: 0.884215 validation: 0.836343
09/16 08:36:32 AM: edges-spr2_recall: training: 0.862947 validation: 0.797576
09/16 08:36:32 AM: edges-spr2_f1: training: 0.873451 validation: 0.816500
09/16 08:36:32 AM: Global learning rate: 2.5e-05
09/16 08:36:32 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:36:34 AM: Update 1429: task edges-spr2, batch 29 (1429): mcc: 0.8041, acc: 0.1844, precision: 0.8847, recall: 0.8645, f1: 0.8745, edges-spr2_loss: 0.2052
09/16 08:36:40 AM: ***** Step 1500 / Validation 15 *****
09/16 08:36:40 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:40 AM: Validating...
09/16 08:36:41 AM: Updating LR scheduler:
09/16 08:36:41 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:36:41 AM: 	# validation passes without improvement: 2
09/16 08:36:41 AM: Ran out of early stopping patience. Stopping training.
09/16 08:36:41 AM: edges-spr2_loss: training: 0.206862 validation: 0.336694
09/16 08:36:41 AM: macro_avg: validation: 0.819261
09/16 08:36:41 AM: micro_avg: validation: 0.000000
09/16 08:36:41 AM: edges-spr2_mcc: training: 0.803479 validation: 0.714485
09/16 08:36:41 AM: edges-spr2_acc: training: 0.173397 validation: 0.066667
09/16 08:36:41 AM: edges-spr2_precision: training: 0.885099 validation: 0.832200
09/16 08:36:41 AM: edges-spr2_recall: training: 0.864243 validation: 0.806719
09/16 08:36:41 AM: edges-spr2_f1: training: 0.874547 validation: 0.819261
09/16 08:36:41 AM: Global learning rate: 2.5e-05
09/16 08:36:41 AM: Saving checkpoints to: ./experiments/spr2-mrpc-cat/run
09/16 08:36:41 AM: Stopped training after 15 validation checks
09/16 08:36:41 AM: Trained edges-spr2 for 1500 batches or 21.429 epochs
09/16 08:36:41 AM: ***** VALIDATION RESULTS *****
09/16 08:36:41 AM: edges-spr2_f1 (for best val pass 5): edges-spr2_loss: 0.31741, macro_avg: 0.82240, micro_avg: 0.00000, edges-spr2_mcc: 0.72132, edges-spr2_acc: 0.07619, edges-spr2_precision: 0.84335, edges-spr2_recall: 0.80247, edges-spr2_f1: 0.82240
09/16 08:36:41 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.34220, macro_avg: 0.79374, micro_avg: 0.00000, edges-spr2_mcc: 0.68688, edges-spr2_acc: 0.06825, edges-spr2_precision: 0.84979, edges-spr2_recall: 0.74463, edges-spr2_f1: 0.79374
09/16 08:36:41 AM: macro_avg (for best val pass 5): edges-spr2_loss: 0.31741, macro_avg: 0.82240, micro_avg: 0.00000, edges-spr2_mcc: 0.72132, edges-spr2_acc: 0.07619, edges-spr2_precision: 0.84335, edges-spr2_recall: 0.80247, edges-spr2_f1: 0.82240
09/16 08:36:41 AM: Evaluating...
09/16 08:36:41 AM: Loaded model state from ./experiments/spr2-mrpc-cat/run/edges-spr2/model_state_target_train_val_5.best.th
09/16 08:36:41 AM: Evaluating on: edges-spr2, split: val
09/16 08:36:42 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:36:42 AM: Finished evaluating on: edges-spr2
09/16 08:36:42 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:36:42 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mrpc-cat/run
09/16 08:36:42 AM: Wrote all preds for split 'val' to ./experiments/spr2-mrpc-cat/run
09/16 08:36:42 AM: Evaluating on: edges-spr2, split: test
09/16 08:36:43 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:36:43 AM: Finished evaluating on: edges-spr2
09/16 08:36:43 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:36:43 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mrpc-cat/run
09/16 08:36:43 AM: Wrote all preds for split 'test' to ./experiments/spr2-mrpc-cat/run
09/16 08:36:43 AM: Writing results for split 'val' to ./experiments/spr2-mrpc-cat/results.tsv
09/16 08:36:43 AM: micro_avg: 0.000, macro_avg: 0.822, edges-spr2_mcc: 0.721, edges-spr2_acc: 0.076, edges-spr2_precision: 0.843, edges-spr2_recall: 0.802, edges-spr2_f1: 0.822
09/16 08:36:43 AM: Done!
09/16 08:36:43 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
