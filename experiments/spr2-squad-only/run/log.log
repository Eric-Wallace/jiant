09/16 08:49:21 AM: Git branch: master
09/16 08:49:21 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:49:21 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-squad-only/",
  "exp_name": "experiments/spr2-squad-only",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-squad-only/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/squad",
  "pytorch_transformers_output_mode": "only",
  "remote_log_name": "experiments/spr2-squad-only__run",
  "run_dir": "./experiments/spr2-squad-only/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:49:21 AM: Saved config to ./experiments/spr2-squad-only/run/params.conf
09/16 08:49:21 AM: Using random seed 1234
09/16 08:49:23 AM: Using GPU 0
09/16 08:49:23 AM: Loading tasks...
09/16 08:49:23 AM: Writing pre-preprocessed tasks to ./experiments/spr2-squad-only/
09/16 08:49:23 AM: 	Creating task edges-spr2 from scratch.
09/16 08:49:23 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:49:23 AM: 	Finished loading tasks: edges-spr2.
09/16 08:49:23 AM: 	Building vocab from scratch.
09/16 08:49:23 AM: 	Counting units for task edges-spr2.
09/16 08:49:23 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:49:24 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:24 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:49:25 AM: 	Saved vocab to ./experiments/spr2-squad-only/vocab
09/16 08:49:25 AM: Loading token dictionary from ./experiments/spr2-squad-only/vocab.
09/16 08:49:25 AM: 	Loaded vocab from ./experiments/spr2-squad-only/vocab
09/16 08:49:25 AM: 	Vocab namespace tokens: size 7943
09/16 08:49:25 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:49:25 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:49:25 AM: 	Vocab namespace chars: size 65
09/16 08:49:25 AM: 	Finished building vocab.
09/16 08:49:25 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:49:25 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-squad-only/preproc/edges-spr2__train_data
09/16 08:49:25 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:49:25 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-squad-only/preproc/edges-spr2__val_data
09/16 08:49:25 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:49:25 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-squad-only/preproc/edges-spr2__test_data
09/16 08:49:25 AM: 	Finished indexing tasks
09/16 08:49:25 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:49:25 AM: 	  Training on 
09/16 08:49:25 AM: 	  Evaluating on edges-spr2
09/16 08:49:25 AM: 	Finished loading tasks in 2.555s
09/16 08:49:25 AM: 	 Tasks: ['edges-spr2']
09/16 08:49:25 AM: Building model...
09/16 08:49:25 AM: Using BERT model (bert-base-uncased).
09/16 08:49:25 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:49:25 AM: models/squad
09/16 08:49:25 AM: loading configuration file models/squad/config.json
09/16 08:49:25 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:49:25 AM: loading weights file models/squad/pytorch_model.bin
09/16 08:49:37 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpc30dvil9
09/16 08:49:39 AM: copying /tmp/tmpc30dvil9 to cache at ./experiments/spr2-squad-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:39 AM: creating metadata file for ./experiments/spr2-squad-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:39 AM: removing temp file /tmp/tmpc30dvil9
09/16 08:49:39 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-squad-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:39 AM: Initializing parameters
09/16 08:49:39 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:49:39 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:49:39 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:49:39 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:49:39 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:49:39 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:49:39 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:49:45 AM: Model specification:
09/16 08:49:45 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:49:45 AM: Model parameters:
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:45 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:45 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:49:45 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:45 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:49:45 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:45 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:49:45 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:45 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:45 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:45 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:49:45 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:49:45 AM: Total number of parameters: 110144020 (1.10144e+08)
09/16 08:49:45 AM: Number of trainable parameters: 661780 (661780)
09/16 08:49:45 AM: Finished building model in 19.545s
09/16 08:49:45 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:49:46 AM: patience = 9
09/16 08:49:46 AM: val_interval = 100
09/16 08:49:46 AM: max_vals = 100
09/16 08:49:46 AM: cuda_device = 0
09/16 08:49:46 AM: grad_norm = 5.0
09/16 08:49:46 AM: grad_clipping = None
09/16 08:49:46 AM: lr_decay = 0.99
09/16 08:49:46 AM: min_lr = 1e-06
09/16 08:49:46 AM: keep_all_checkpoints = 0
09/16 08:49:46 AM: val_data_limit = 5000
09/16 08:49:46 AM: max_epochs = -1
09/16 08:49:46 AM: dec_val_scale = 250
09/16 08:49:46 AM: training_data_fraction = 1
09/16 08:49:46 AM: type = adam
09/16 08:49:46 AM: parameter_groups = None
09/16 08:49:46 AM: Number of trainable parameters: 661780
09/16 08:49:46 AM: infer_type_and_cast = True
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: lr = 0.0001
09/16 08:49:46 AM: amsgrad = True
09/16 08:49:46 AM: type = reduce_on_plateau
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: mode = max
09/16 08:49:46 AM: factor = 0.5
09/16 08:49:46 AM: patience = 3
09/16 08:49:46 AM: threshold = 0.0001
09/16 08:49:46 AM: threshold_mode = abs
09/16 08:49:46 AM: verbose = True
09/16 08:49:46 AM: type = adam
09/16 08:49:46 AM: parameter_groups = None
09/16 08:49:46 AM: Number of trainable parameters: 661780
09/16 08:49:46 AM: infer_type_and_cast = True
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: lr = 0.0001
09/16 08:49:46 AM: amsgrad = True
09/16 08:49:46 AM: type = reduce_on_plateau
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: mode = max
09/16 08:49:46 AM: factor = 0.5
09/16 08:49:46 AM: patience = 3
09/16 08:49:46 AM: threshold = 0.0001
09/16 08:49:46 AM: threshold_mode = abs
09/16 08:49:46 AM: verbose = True
09/16 08:49:46 AM: Starting training without restoring from a checkpoint.
09/16 08:49:46 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:49:46 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:49:49 AM: ***** Step 100 / Validation 1 *****
09/16 08:49:49 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:49:49 AM: Validating...
09/16 08:49:50 AM: Best result seen so far for edges-spr2.
09/16 08:49:50 AM: Best result seen so far for micro.
09/16 08:49:50 AM: Best result seen so far for macro.
09/16 08:49:50 AM: Updating LR scheduler:
09/16 08:49:50 AM: 	Best result seen so far for macro_avg: 0.786
09/16 08:49:50 AM: 	# validation passes without improvement: 0
09/16 08:49:50 AM: edges-spr2_loss: training: 0.389959 validation: 0.352656
09/16 08:49:50 AM: macro_avg: validation: 0.785690
09/16 08:49:50 AM: micro_avg: validation: 0.000000
09/16 08:49:50 AM: edges-spr2_mcc: training: 0.603852 validation: 0.674134
09/16 08:49:50 AM: edges-spr2_acc: training: 0.044128 validation: 0.076190
09/16 08:49:50 AM: edges-spr2_precision: training: 0.765244 validation: 0.840194
09/16 08:49:50 AM: edges-spr2_recall: training: 0.725056 validation: 0.737827
09/16 08:49:50 AM: edges-spr2_f1: training: 0.744608 validation: 0.785690
09/16 08:49:50 AM: Global learning rate: 0.0001
09/16 08:49:50 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:49:53 AM: ***** Step 200 / Validation 2 *****
09/16 08:49:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:49:53 AM: Validating...
09/16 08:49:53 AM: Best result seen so far for edges-spr2.
09/16 08:49:53 AM: Best result seen so far for macro.
09/16 08:49:53 AM: Updating LR scheduler:
09/16 08:49:53 AM: 	Best result seen so far for macro_avg: 0.797
09/16 08:49:53 AM: 	# validation passes without improvement: 0
09/16 08:49:53 AM: edges-spr2_loss: training: 0.320165 validation: 0.340037
09/16 08:49:53 AM: macro_avg: validation: 0.797103
09/16 08:49:53 AM: micro_avg: validation: 0.000000
09/16 08:49:53 AM: edges-spr2_mcc: training: 0.680696 validation: 0.687180
09/16 08:49:53 AM: edges-spr2_acc: training: 0.059185 validation: 0.076190
09/16 08:49:53 AM: edges-spr2_precision: training: 0.823701 validation: 0.837313
09/16 08:49:53 AM: edges-spr2_recall: training: 0.762723 validation: 0.760578
09/16 08:49:53 AM: edges-spr2_f1: training: 0.792040 validation: 0.797103
09/16 08:49:53 AM: Global learning rate: 0.0001
09/16 08:49:53 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:49:56 AM: Update 251: task edges-spr2, batch 51 (251): mcc: 0.6889, acc: 0.0671, precision: 0.8262, recall: 0.7693, f1: 0.7967, edges-spr2_loss: 0.3068
09/16 08:49:58 AM: ***** Step 300 / Validation 3 *****
09/16 08:49:58 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:49:58 AM: Validating...
09/16 08:49:58 AM: Updating LR scheduler:
09/16 08:49:58 AM: 	Best result seen so far for macro_avg: 0.797
09/16 08:49:58 AM: 	# validation passes without improvement: 1
09/16 08:49:58 AM: edges-spr2_loss: training: 0.304022 validation: 0.335989
09/16 08:49:58 AM: macro_avg: validation: 0.796913
09/16 08:49:58 AM: micro_avg: validation: 0.000000
09/16 08:49:58 AM: edges-spr2_mcc: training: 0.695690 validation: 0.687902
09/16 08:49:58 AM: edges-spr2_acc: training: 0.071641 validation: 0.079365
09/16 08:49:58 AM: edges-spr2_precision: training: 0.830499 validation: 0.840528
09/16 08:49:58 AM: edges-spr2_recall: training: 0.776452 validation: 0.757602
09/16 08:49:58 AM: edges-spr2_f1: training: 0.802567 validation: 0.796913
09/16 08:49:58 AM: Global learning rate: 0.0001
09/16 08:49:58 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:02 AM: ***** Step 400 / Validation 4 *****
09/16 08:50:02 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:02 AM: Validating...
09/16 08:50:02 AM: Best result seen so far for edges-spr2.
09/16 08:50:02 AM: Best result seen so far for macro.
09/16 08:50:02 AM: Updating LR scheduler:
09/16 08:50:02 AM: 	Best result seen so far for macro_avg: 0.800
09/16 08:50:02 AM: 	# validation passes without improvement: 0
09/16 08:50:02 AM: edges-spr2_loss: training: 0.291843 validation: 0.337786
09/16 08:50:02 AM: macro_avg: validation: 0.799553
09/16 08:50:02 AM: micro_avg: validation: 0.000000
09/16 08:50:02 AM: edges-spr2_mcc: training: 0.708813 validation: 0.691907
09/16 08:50:02 AM: edges-spr2_acc: training: 0.077260 validation: 0.073016
09/16 08:50:02 AM: edges-spr2_precision: training: 0.834102 validation: 0.842999
09/16 08:50:02 AM: edges-spr2_recall: training: 0.790862 validation: 0.760366
09/16 08:50:02 AM: edges-spr2_f1: training: 0.811907 validation: 0.799553
09/16 08:50:02 AM: Global learning rate: 0.0001
09/16 08:50:02 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:06 AM: Update 491: task edges-spr2, batch 91 (491): mcc: 0.7177, acc: 0.0846, precision: 0.8386, recall: 0.7988, f1: 0.8182, edges-spr2_loss: 0.2841
09/16 08:50:06 AM: ***** Step 500 / Validation 5 *****
09/16 08:50:06 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:06 AM: Validating...
09/16 08:50:06 AM: Best result seen so far for edges-spr2.
09/16 08:50:06 AM: Best result seen so far for macro.
09/16 08:50:06 AM: Updating LR scheduler:
09/16 08:50:06 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:06 AM: 	# validation passes without improvement: 0
09/16 08:50:06 AM: edges-spr2_loss: training: 0.283778 validation: 0.336869
09/16 08:50:06 AM: macro_avg: validation: 0.802379
09/16 08:50:06 AM: micro_avg: validation: 0.000000
09/16 08:50:06 AM: edges-spr2_mcc: training: 0.717215 validation: 0.692433
09/16 08:50:06 AM: edges-spr2_acc: training: 0.083487 validation: 0.071429
09/16 08:50:06 AM: edges-spr2_precision: training: 0.837855 validation: 0.832457
09/16 08:50:06 AM: edges-spr2_recall: training: 0.798988 validation: 0.774399
09/16 08:50:06 AM: edges-spr2_f1: training: 0.817960 validation: 0.802379
09/16 08:50:06 AM: Global learning rate: 0.0001
09/16 08:50:06 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:10 AM: ***** Step 600 / Validation 6 *****
09/16 08:50:10 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:10 AM: Validating...
09/16 08:50:10 AM: Updating LR scheduler:
09/16 08:50:10 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:10 AM: 	# validation passes without improvement: 1
09/16 08:50:10 AM: edges-spr2_loss: training: 0.277024 validation: 0.338705
09/16 08:50:10 AM: macro_avg: validation: 0.801838
09/16 08:50:10 AM: micro_avg: validation: 0.000000
09/16 08:50:10 AM: edges-spr2_mcc: training: 0.724351 validation: 0.689956
09/16 08:50:10 AM: edges-spr2_acc: training: 0.091293 validation: 0.066667
09/16 08:50:10 AM: edges-spr2_precision: training: 0.841354 validation: 0.825969
09/16 08:50:10 AM: edges-spr2_recall: training: 0.804474 validation: 0.779077
09/16 08:50:10 AM: edges-spr2_f1: training: 0.822501 validation: 0.801838
09/16 08:50:10 AM: Global learning rate: 0.0001
09/16 08:50:10 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:14 AM: ***** Step 700 / Validation 7 *****
09/16 08:50:14 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:14 AM: Validating...
09/16 08:50:14 AM: Updating LR scheduler:
09/16 08:50:14 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:14 AM: 	# validation passes without improvement: 2
09/16 08:50:14 AM: edges-spr2_loss: training: 0.269954 validation: 0.342244
09/16 08:50:14 AM: macro_avg: validation: 0.799737
09/16 08:50:14 AM: micro_avg: validation: 0.000000
09/16 08:50:14 AM: edges-spr2_mcc: training: 0.733344 validation: 0.687346
09/16 08:50:14 AM: edges-spr2_acc: training: 0.083891 validation: 0.079365
09/16 08:50:14 AM: edges-spr2_precision: training: 0.845080 validation: 0.826304
09/16 08:50:14 AM: edges-spr2_recall: training: 0.813199 validation: 0.774825
09/16 08:50:14 AM: edges-spr2_f1: training: 0.828833 validation: 0.799737
09/16 08:50:14 AM: Global learning rate: 0.0001
09/16 08:50:14 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:16 AM: Update 754: task edges-spr2, batch 54 (754): mcc: 0.7344, acc: 0.0888, precision: 0.8445, recall: 0.8148, f1: 0.8294, edges-spr2_loss: 0.2677
09/16 08:50:17 AM: ***** Step 800 / Validation 8 *****
09/16 08:50:17 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:17 AM: Validating...
09/16 08:50:18 AM: Updating LR scheduler:
09/16 08:50:18 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:18 AM: 	# validation passes without improvement: 3
09/16 08:50:18 AM: edges-spr2_loss: training: 0.264736 validation: 0.344109
09/16 08:50:18 AM: macro_avg: validation: 0.800620
09/16 08:50:18 AM: micro_avg: validation: 0.000000
09/16 08:50:18 AM: edges-spr2_mcc: training: 0.738708 validation: 0.690802
09/16 08:50:18 AM: edges-spr2_acc: training: 0.095109 validation: 0.071429
09/16 08:50:18 AM: edges-spr2_precision: training: 0.848380 validation: 0.834602
09/16 08:50:18 AM: edges-spr2_recall: training: 0.816591 validation: 0.769296
09/16 08:50:18 AM: edges-spr2_f1: training: 0.832182 validation: 0.800620
09/16 08:50:18 AM: Global learning rate: 0.0001
09/16 08:50:18 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:21 AM: ***** Step 900 / Validation 9 *****
09/16 08:50:21 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:21 AM: Validating...
09/16 08:50:21 AM: Updating LR scheduler:
09/16 08:50:21 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:21 AM: 	# validation passes without improvement: 0
09/16 08:50:21 AM: edges-spr2_loss: training: 0.260832 validation: 0.348813
09/16 08:50:21 AM: macro_avg: validation: 0.798198
09/16 08:50:21 AM: micro_avg: validation: 0.000000
09/16 08:50:21 AM: edges-spr2_mcc: training: 0.739287 validation: 0.685205
09/16 08:50:21 AM: edges-spr2_acc: training: 0.096816 validation: 0.071429
09/16 08:50:21 AM: edges-spr2_precision: training: 0.848467 validation: 0.825682
09/16 08:50:21 AM: edges-spr2_recall: training: 0.816761 validation: 0.772486
09/16 08:50:21 AM: edges-spr2_f1: training: 0.832312 validation: 0.798198
09/16 08:50:21 AM: Global learning rate: 5e-05
09/16 08:50:21 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:25 AM: ***** Step 1000 / Validation 10 *****
09/16 08:50:25 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:25 AM: Validating...
09/16 08:50:25 AM: Updating LR scheduler:
09/16 08:50:25 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:25 AM: 	# validation passes without improvement: 1
09/16 08:50:25 AM: edges-spr2_loss: training: 0.256852 validation: 0.346659
09/16 08:50:25 AM: macro_avg: validation: 0.795194
09/16 08:50:25 AM: micro_avg: validation: 0.000000
09/16 08:50:25 AM: edges-spr2_mcc: training: 0.745476 validation: 0.681361
09/16 08:50:25 AM: edges-spr2_acc: training: 0.107410 validation: 0.069841
09/16 08:50:25 AM: edges-spr2_precision: training: 0.852597 validation: 0.825589
09/16 08:50:25 AM: edges-spr2_recall: training: 0.822187 validation: 0.766957
09/16 08:50:25 AM: edges-spr2_f1: training: 0.837116 validation: 0.795194
09/16 08:50:25 AM: Global learning rate: 5e-05
09/16 08:50:25 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:26 AM: Update 1032: task edges-spr2, batch 32 (1032): mcc: 0.7544, acc: 0.1030, precision: 0.8569, recall: 0.8287, f1: 0.8425, edges-spr2_loss: 0.2535
09/16 08:50:28 AM: ***** Step 1100 / Validation 11 *****
09/16 08:50:28 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:28 AM: Validating...
09/16 08:50:28 AM: Updating LR scheduler:
09/16 08:50:28 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:28 AM: 	# validation passes without improvement: 2
09/16 08:50:28 AM: edges-spr2_loss: training: 0.251394 validation: 0.348489
09/16 08:50:28 AM: macro_avg: validation: 0.797546
09/16 08:50:28 AM: micro_avg: validation: 0.000000
09/16 08:50:28 AM: edges-spr2_mcc: training: 0.753066 validation: 0.683510
09/16 08:50:28 AM: edges-spr2_acc: training: 0.105057 validation: 0.066667
09/16 08:50:28 AM: edges-spr2_precision: training: 0.855087 validation: 0.822599
09/16 08:50:28 AM: edges-spr2_recall: training: 0.828446 validation: 0.773974
09/16 08:50:28 AM: edges-spr2_f1: training: 0.841556 validation: 0.797546
09/16 08:50:28 AM: Global learning rate: 5e-05
09/16 08:50:28 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:33 AM: ***** Step 1200 / Validation 12 *****
09/16 08:50:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:33 AM: Validating...
09/16 08:50:33 AM: Updating LR scheduler:
09/16 08:50:33 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:33 AM: 	# validation passes without improvement: 3
09/16 08:50:33 AM: edges-spr2_loss: training: 0.252390 validation: 0.349457
09/16 08:50:33 AM: macro_avg: validation: 0.799957
09/16 08:50:33 AM: micro_avg: validation: 0.000000
09/16 08:50:33 AM: edges-spr2_mcc: training: 0.751116 validation: 0.684524
09/16 08:50:33 AM: edges-spr2_acc: training: 0.110708 validation: 0.058730
09/16 08:50:33 AM: edges-spr2_precision: training: 0.855415 validation: 0.814774
09/16 08:50:33 AM: edges-spr2_recall: training: 0.825833 validation: 0.785669
09/16 08:50:33 AM: edges-spr2_f1: training: 0.840364 validation: 0.799957
09/16 08:50:33 AM: Global learning rate: 5e-05
09/16 08:50:33 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:36 AM: Update 1282: task edges-spr2, batch 82 (1282): mcc: 0.7568, acc: 0.1113, precision: 0.8593, recall: 0.8287, f1: 0.8437, edges-spr2_loss: 0.2488
09/16 08:50:36 AM: ***** Step 1300 / Validation 13 *****
09/16 08:50:36 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:36 AM: Validating...
09/16 08:50:36 AM: Updating LR scheduler:
09/16 08:50:36 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:36 AM: 	# validation passes without improvement: 0
09/16 08:50:36 AM: edges-spr2_loss: training: 0.248816 validation: 0.353847
09/16 08:50:36 AM: macro_avg: validation: 0.794875
09/16 08:50:36 AM: micro_avg: validation: 0.000000
09/16 08:50:36 AM: edges-spr2_mcc: training: 0.757317 validation: 0.679238
09/16 08:50:36 AM: edges-spr2_acc: training: 0.112104 validation: 0.065079
09/16 08:50:36 AM: edges-spr2_precision: training: 0.858919 validation: 0.819557
09/16 08:50:37 AM: edges-spr2_recall: training: 0.829837 validation: 0.771635
09/16 08:50:37 AM: edges-spr2_f1: training: 0.844127 validation: 0.794875
09/16 08:50:37 AM: Global learning rate: 2.5e-05
09/16 08:50:37 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:40 AM: ***** Step 1400 / Validation 14 *****
09/16 08:50:40 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:40 AM: Validating...
09/16 08:50:40 AM: Updating LR scheduler:
09/16 08:50:40 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:40 AM: 	# validation passes without improvement: 1
09/16 08:50:40 AM: edges-spr2_loss: training: 0.246311 validation: 0.353005
09/16 08:50:40 AM: macro_avg: validation: 0.795236
09/16 08:50:40 AM: micro_avg: validation: 0.000000
09/16 08:50:40 AM: edges-spr2_mcc: training: 0.758328 validation: 0.679247
09/16 08:50:40 AM: edges-spr2_acc: training: 0.117706 validation: 0.055556
09/16 08:50:40 AM: edges-spr2_precision: training: 0.859320 validation: 0.817937
09/16 08:50:40 AM: edges-spr2_recall: training: 0.831605 validation: 0.773761
09/16 08:50:40 AM: edges-spr2_f1: training: 0.845235 validation: 0.795236
09/16 08:50:40 AM: Global learning rate: 2.5e-05
09/16 08:50:40 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:44 AM: ***** Step 1500 / Validation 15 *****
09/16 08:50:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:44 AM: Validating...
09/16 08:50:45 AM: Updating LR scheduler:
09/16 08:50:45 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:50:45 AM: 	# validation passes without improvement: 2
09/16 08:50:45 AM: Ran out of early stopping patience. Stopping training.
09/16 08:50:45 AM: edges-spr2_loss: training: 0.244804 validation: 0.353785
09/16 08:50:45 AM: macro_avg: validation: 0.798613
09/16 08:50:45 AM: micro_avg: validation: 0.000000
09/16 08:50:45 AM: edges-spr2_mcc: training: 0.759347 validation: 0.682572
09/16 08:50:45 AM: edges-spr2_acc: training: 0.119044 validation: 0.053968
09/16 08:50:45 AM: edges-spr2_precision: training: 0.860797 validation: 0.814046
09/16 08:50:45 AM: edges-spr2_recall: training: 0.831357 validation: 0.783755
09/16 08:50:45 AM: edges-spr2_f1: training: 0.845821 validation: 0.798613
09/16 08:50:45 AM: Global learning rate: 2.5e-05
09/16 08:50:45 AM: Saving checkpoints to: ./experiments/spr2-squad-only/run
09/16 08:50:45 AM: Stopped training after 15 validation checks
09/16 08:50:45 AM: Trained edges-spr2 for 1500 batches or 21.429 epochs
09/16 08:50:45 AM: ***** VALIDATION RESULTS *****
09/16 08:50:45 AM: edges-spr2_f1 (for best val pass 5): edges-spr2_loss: 0.33687, macro_avg: 0.80238, micro_avg: 0.00000, edges-spr2_mcc: 0.69243, edges-spr2_acc: 0.07143, edges-spr2_precision: 0.83246, edges-spr2_recall: 0.77440, edges-spr2_f1: 0.80238
09/16 08:50:45 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.35266, macro_avg: 0.78569, micro_avg: 0.00000, edges-spr2_mcc: 0.67413, edges-spr2_acc: 0.07619, edges-spr2_precision: 0.84019, edges-spr2_recall: 0.73783, edges-spr2_f1: 0.78569
09/16 08:50:45 AM: macro_avg (for best val pass 5): edges-spr2_loss: 0.33687, macro_avg: 0.80238, micro_avg: 0.00000, edges-spr2_mcc: 0.69243, edges-spr2_acc: 0.07143, edges-spr2_precision: 0.83246, edges-spr2_recall: 0.77440, edges-spr2_f1: 0.80238
09/16 08:50:45 AM: Evaluating...
09/16 08:50:45 AM: Loaded model state from ./experiments/spr2-squad-only/run/edges-spr2/model_state_target_train_val_5.best.th
09/16 08:50:45 AM: Evaluating on: edges-spr2, split: val
09/16 08:50:45 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:50:45 AM: Finished evaluating on: edges-spr2
09/16 08:50:45 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:50:45 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-squad-only/run
09/16 08:50:45 AM: Wrote all preds for split 'val' to ./experiments/spr2-squad-only/run
09/16 08:50:45 AM: Evaluating on: edges-spr2, split: test
09/16 08:50:45 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:50:45 AM: Finished evaluating on: edges-spr2
09/16 08:50:45 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:50:45 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-squad-only/run
09/16 08:50:45 AM: Wrote all preds for split 'test' to ./experiments/spr2-squad-only/run
09/16 08:50:45 AM: Writing results for split 'val' to ./experiments/spr2-squad-only/results.tsv
09/16 08:50:45 AM: micro_avg: 0.000, macro_avg: 0.802, edges-spr2_mcc: 0.692, edges-spr2_acc: 0.071, edges-spr2_precision: 0.832, edges-spr2_recall: 0.774, edges-spr2_f1: 0.802
09/16 08:50:45 AM: Done!
09/16 08:50:45 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
