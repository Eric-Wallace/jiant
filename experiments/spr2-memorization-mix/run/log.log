09/16 08:42:05 AM: Git branch: master
09/16 08:42:05 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:42:05 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-memorization-mix/",
  "exp_name": "experiments/spr2-memorization-mix",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-memorization-mix/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/memorization",
  "pytorch_transformers_output_mode": "mix",
  "remote_log_name": "experiments/spr2-memorization-mix__run",
  "run_dir": "./experiments/spr2-memorization-mix/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:42:05 AM: Saved config to ./experiments/spr2-memorization-mix/run/params.conf
09/16 08:42:05 AM: Using random seed 1234
09/16 08:42:07 AM: Using GPU 0
09/16 08:42:07 AM: Loading tasks...
09/16 08:42:07 AM: Writing pre-preprocessed tasks to ./experiments/spr2-memorization-mix/
09/16 08:42:07 AM: 	Creating task edges-spr2 from scratch.
09/16 08:42:07 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:42:07 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:42:07 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:42:07 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:42:07 AM: 	Finished loading tasks: edges-spr2.
09/16 08:42:07 AM: 	Building vocab from scratch.
09/16 08:42:07 AM: 	Counting units for task edges-spr2.
09/16 08:42:07 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:42:08 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:08 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:42:09 AM: 	Saved vocab to ./experiments/spr2-memorization-mix/vocab
09/16 08:42:09 AM: Loading token dictionary from ./experiments/spr2-memorization-mix/vocab.
09/16 08:42:09 AM: 	Loaded vocab from ./experiments/spr2-memorization-mix/vocab
09/16 08:42:09 AM: 	Vocab namespace tokens: size 7943
09/16 08:42:09 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:42:09 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:42:09 AM: 	Vocab namespace chars: size 65
09/16 08:42:09 AM: 	Finished building vocab.
09/16 08:42:09 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:42:09 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-memorization-mix/preproc/edges-spr2__train_data
09/16 08:42:09 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:42:09 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-memorization-mix/preproc/edges-spr2__val_data
09/16 08:42:09 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:42:09 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-memorization-mix/preproc/edges-spr2__test_data
09/16 08:42:09 AM: 	Finished indexing tasks
09/16 08:42:09 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:42:09 AM: 	  Training on 
09/16 08:42:09 AM: 	  Evaluating on edges-spr2
09/16 08:42:09 AM: 	Finished loading tasks in 2.356s
09/16 08:42:09 AM: 	 Tasks: ['edges-spr2']
09/16 08:42:09 AM: Building model...
09/16 08:42:09 AM: Using BERT model (bert-base-uncased).
09/16 08:42:09 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:42:09 AM: models/memorization
09/16 08:42:09 AM: loading configuration file models/memorization/config.json
09/16 08:42:09 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "random-memorization",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:42:09 AM: loading weights file models/memorization/pytorch_model.bin
09/16 08:42:21 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmp42zagxry
09/16 08:42:24 AM: copying /tmp/tmp42zagxry to cache at ./experiments/spr2-memorization-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:24 AM: creating metadata file for ./experiments/spr2-memorization-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:24 AM: removing temp file /tmp/tmp42zagxry
09/16 08:42:24 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-memorization-mix/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:24 AM: NOTE: pytorch_transformers_output_mode='mix', so scalar mixing weights will be fine-tuned even if BERT model is frozen.
09/16 08:42:24 AM: Initializing parameters
09/16 08:42:24 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:42:24 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:42:24 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:42:24 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:42:24 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.gamma
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.0
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.1
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.10
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.11
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.12
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.2
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.3
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.4
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.5
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.6
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.7
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.8
09/16 08:42:24 AM:    _text_field_embedder.scalar_mix.scalar_parameters.9
09/16 08:42:24 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:42:29 AM: Model specification:
09/16 08:42:29 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
      (scalar_mix): ScalarMix(
        (scalar_parameters): ParameterList(
            (0): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (1): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (2): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (3): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (4): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (5): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (6): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (7): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (8): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (9): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (10): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (11): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
            (12): Parameter containing: [torch.cuda.FloatTensor of size 1 (GPU 0)]
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:42:29 AM: Model parameters:
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.gamma: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.0: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.1: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.2: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.3: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.4: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.5: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.6: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.7: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.8: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.9: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.10: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.11: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	sent_encoder._text_field_embedder.scalar_mix.scalar_parameters.12: Trainable parameter, count 1 with torch.Size([1])
09/16 08:42:29 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:42:29 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:29 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:42:29 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:29 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:42:29 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:29 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:29 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:29 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:42:29 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:42:29 AM: Total number of parameters: 110144034 (1.10144e+08)
09/16 08:42:29 AM: Number of trainable parameters: 661794 (661794)
09/16 08:42:29 AM: Finished building model in 20.057s
09/16 08:42:29 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:42:30 AM: patience = 9
09/16 08:42:30 AM: val_interval = 100
09/16 08:42:30 AM: max_vals = 100
09/16 08:42:30 AM: cuda_device = 0
09/16 08:42:30 AM: grad_norm = 5.0
09/16 08:42:30 AM: grad_clipping = None
09/16 08:42:30 AM: lr_decay = 0.99
09/16 08:42:30 AM: min_lr = 1e-06
09/16 08:42:30 AM: keep_all_checkpoints = 0
09/16 08:42:30 AM: val_data_limit = 5000
09/16 08:42:30 AM: max_epochs = -1
09/16 08:42:30 AM: dec_val_scale = 250
09/16 08:42:30 AM: training_data_fraction = 1
09/16 08:42:30 AM: type = adam
09/16 08:42:30 AM: parameter_groups = None
09/16 08:42:30 AM: Number of trainable parameters: 661794
09/16 08:42:30 AM: infer_type_and_cast = True
09/16 08:42:30 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:30 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:30 AM: lr = 0.0001
09/16 08:42:30 AM: amsgrad = True
09/16 08:42:30 AM: type = reduce_on_plateau
09/16 08:42:30 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:30 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:30 AM: mode = max
09/16 08:42:30 AM: factor = 0.5
09/16 08:42:30 AM: patience = 3
09/16 08:42:30 AM: threshold = 0.0001
09/16 08:42:30 AM: threshold_mode = abs
09/16 08:42:30 AM: verbose = True
09/16 08:42:30 AM: type = adam
09/16 08:42:30 AM: parameter_groups = None
09/16 08:42:30 AM: Number of trainable parameters: 661794
09/16 08:42:30 AM: infer_type_and_cast = True
09/16 08:42:30 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:30 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:30 AM: lr = 0.0001
09/16 08:42:30 AM: amsgrad = True
09/16 08:42:30 AM: type = reduce_on_plateau
09/16 08:42:30 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:30 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:30 AM: mode = max
09/16 08:42:30 AM: factor = 0.5
09/16 08:42:30 AM: patience = 3
09/16 08:42:30 AM: threshold = 0.0001
09/16 08:42:30 AM: threshold_mode = abs
09/16 08:42:30 AM: verbose = True
09/16 08:42:30 AM: Starting training without restoring from a checkpoint.
09/16 08:42:30 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:42:30 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:42:39 AM: ***** Step 100 / Validation 1 *****
09/16 08:42:39 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:39 AM: Validating...
09/16 08:42:40 AM: Evaluate: task edges-spr2, batch 9 (10): mcc: 0.6983, acc: 0.0845, precision: 0.8511, recall: 0.7600, f1: 0.8030, edges-spr2_loss: 0.3162
09/16 08:42:40 AM: Best result seen so far for edges-spr2.
09/16 08:42:40 AM: Best result seen so far for micro.
09/16 08:42:40 AM: Best result seen so far for macro.
09/16 08:42:40 AM: Updating LR scheduler:
09/16 08:42:40 AM: 	Best result seen so far for macro_avg: 0.802
09/16 08:42:40 AM: 	# validation passes without improvement: 0
09/16 08:42:40 AM: edges-spr2_loss: training: 0.377997 validation: 0.339414
09/16 08:42:40 AM: macro_avg: validation: 0.801977
09/16 08:42:40 AM: micro_avg: validation: 0.000000
09/16 08:42:40 AM: edges-spr2_mcc: training: 0.623343 validation: 0.696986
09/16 08:42:40 AM: edges-spr2_acc: training: 0.044833 validation: 0.084127
09/16 08:42:40 AM: edges-spr2_precision: training: 0.776537 validation: 0.850000
09/16 08:42:40 AM: edges-spr2_recall: training: 0.739480 validation: 0.759090
09/16 08:42:40 AM: edges-spr2_f1: training: 0.757556 validation: 0.801977
09/16 08:42:40 AM: Global learning rate: 0.0001
09/16 08:42:40 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:42:49 AM: ***** Step 200 / Validation 2 *****
09/16 08:42:49 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:49 AM: Validating...
09/16 08:42:50 AM: Best result seen so far for edges-spr2.
09/16 08:42:50 AM: Best result seen so far for macro.
09/16 08:42:50 AM: Updating LR scheduler:
09/16 08:42:50 AM: 	Best result seen so far for macro_avg: 0.822
09/16 08:42:50 AM: 	# validation passes without improvement: 0
09/16 08:42:50 AM: edges-spr2_loss: training: 0.305783 validation: 0.323027
09/16 08:42:50 AM: macro_avg: validation: 0.822059
09/16 08:42:50 AM: micro_avg: validation: 0.000000
09/16 08:42:50 AM: edges-spr2_mcc: training: 0.703641 validation: 0.722140
09/16 08:42:50 AM: edges-spr2_acc: training: 0.075340 validation: 0.087302
09/16 08:42:50 AM: edges-spr2_precision: training: 0.831863 validation: 0.848574
09/16 08:42:50 AM: edges-spr2_recall: training: 0.786173 validation: 0.797151
09/16 08:42:50 AM: edges-spr2_f1: training: 0.808373 validation: 0.822059
09/16 08:42:50 AM: Global learning rate: 0.0001
09/16 08:42:50 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:42:50 AM: Update 209: task edges-spr2, batch 9 (209): mcc: 0.7243, acc: 0.0845, precision: 0.8340, recall: 0.8136, f1: 0.8237, edges-spr2_loss: 0.2900
09/16 08:42:59 AM: ***** Step 300 / Validation 3 *****
09/16 08:42:59 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:59 AM: Validating...
09/16 08:43:00 AM: Best result seen so far for edges-spr2.
09/16 08:43:00 AM: Best result seen so far for macro.
09/16 08:43:00 AM: Updating LR scheduler:
09/16 08:43:00 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:43:00 AM: 	# validation passes without improvement: 0
09/16 08:43:00 AM: edges-spr2_loss: training: 0.286079 validation: 0.319073
09/16 08:43:00 AM: macro_avg: validation: 0.823801
09/16 08:43:00 AM: micro_avg: validation: 0.000000
09/16 08:43:00 AM: edges-spr2_mcc: training: 0.722440 validation: 0.725591
09/16 08:43:00 AM: edges-spr2_acc: training: 0.082543 validation: 0.096825
09/16 08:43:00 AM: edges-spr2_precision: training: 0.841715 validation: 0.853270
09/16 08:43:00 AM: edges-spr2_recall: training: 0.801398 validation: 0.796300
09/16 08:43:00 AM: edges-spr2_f1: training: 0.821062 validation: 0.823801
09/16 08:43:00 AM: Global learning rate: 0.0001
09/16 08:43:00 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:43:00 AM: Update 308: task edges-spr2, batch 8 (308): mcc: 0.7257, acc: 0.0854, precision: 0.8397, recall: 0.8101, f1: 0.8246, edges-spr2_loss: 0.2771
09/16 08:43:08 AM: ***** Step 400 / Validation 4 *****
09/16 08:43:08 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:08 AM: Validating...
09/16 08:43:09 AM: Updating LR scheduler:
09/16 08:43:09 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:43:09 AM: 	# validation passes without improvement: 1
09/16 08:43:09 AM: edges-spr2_loss: training: 0.274959 validation: 0.319632
09/16 08:43:09 AM: macro_avg: validation: 0.821611
09/16 08:43:09 AM: micro_avg: validation: 0.000000
09/16 08:43:09 AM: edges-spr2_mcc: training: 0.732429 validation: 0.724216
09/16 08:43:09 AM: edges-spr2_acc: training: 0.088701 validation: 0.088889
09/16 08:43:09 AM: edges-spr2_precision: training: 0.844950 validation: 0.858965
09/16 08:43:09 AM: edges-spr2_recall: training: 0.811559 validation: 0.787370
09/16 08:43:09 AM: edges-spr2_f1: training: 0.827918 validation: 0.821611
09/16 08:43:09 AM: Global learning rate: 0.0001
09/16 08:43:09 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:43:11 AM: Update 421: task edges-spr2, batch 21 (421): mcc: 0.7336, acc: 0.0973, precision: 0.8493, recall: 0.8095, f1: 0.8289, edges-spr2_loss: 0.2748
09/16 08:43:18 AM: ***** Step 500 / Validation 5 *****
09/16 08:43:18 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:18 AM: Validating...
09/16 08:43:19 AM: Best result seen so far for edges-spr2.
09/16 08:43:19 AM: Best result seen so far for macro.
09/16 08:43:19 AM: Updating LR scheduler:
09/16 08:43:19 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:43:19 AM: 	# validation passes without improvement: 0
09/16 08:43:19 AM: edges-spr2_loss: training: 0.267100 validation: 0.315871
09/16 08:43:19 AM: macro_avg: validation: 0.826579
09/16 08:43:19 AM: micro_avg: validation: 0.000000
09/16 08:43:19 AM: edges-spr2_mcc: training: 0.739656 validation: 0.729618
09/16 08:43:19 AM: edges-spr2_acc: training: 0.096124 validation: 0.101587
09/16 08:43:19 AM: edges-spr2_precision: training: 0.851252 validation: 0.854839
09/16 08:43:19 AM: edges-spr2_recall: training: 0.814735 validation: 0.800128
09/16 08:43:19 AM: edges-spr2_f1: training: 0.832593 validation: 0.826579
09/16 08:43:19 AM: Global learning rate: 0.0001
09/16 08:43:19 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:43:21 AM: Update 533: task edges-spr2, batch 33 (533): mcc: 0.7415, acc: 0.0877, precision: 0.8526, recall: 0.8155, f1: 0.8336, edges-spr2_loss: 0.2625
09/16 08:43:27 AM: ***** Step 600 / Validation 6 *****
09/16 08:43:27 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:27 AM: Validating...
09/16 08:43:28 AM: Updating LR scheduler:
09/16 08:43:28 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:43:28 AM: 	# validation passes without improvement: 1
09/16 08:43:28 AM: edges-spr2_loss: training: 0.260410 validation: 0.315536
09/16 08:43:28 AM: macro_avg: validation: 0.824516
09/16 08:43:28 AM: micro_avg: validation: 0.000000
09/16 08:43:28 AM: edges-spr2_mcc: training: 0.744576 validation: 0.724459
09/16 08:43:28 AM: edges-spr2_acc: training: 0.093407 validation: 0.085714
09/16 08:43:28 AM: edges-spr2_precision: training: 0.852734 validation: 0.844747
09/16 08:43:28 AM: edges-spr2_recall: training: 0.819516 validation: 0.805231
09/16 08:43:28 AM: edges-spr2_f1: training: 0.835795 validation: 0.824516
09/16 08:43:28 AM: Global learning rate: 0.0001
09/16 08:43:28 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:43:31 AM: Update 636: task edges-spr2, batch 36 (636): mcc: 0.7507, acc: 0.0972, precision: 0.8559, recall: 0.8246, f1: 0.8400, edges-spr2_loss: 0.2548
09/16 08:43:36 AM: ***** Step 700 / Validation 7 *****
09/16 08:43:36 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:36 AM: Validating...
09/16 08:43:37 AM: Updating LR scheduler:
09/16 08:43:37 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:43:37 AM: 	# validation passes without improvement: 2
09/16 08:43:37 AM: edges-spr2_loss: training: 0.253920 validation: 0.316285
09/16 08:43:37 AM: macro_avg: validation: 0.823107
09/16 08:43:37 AM: micro_avg: validation: 0.000000
09/16 08:43:37 AM: edges-spr2_mcc: training: 0.752068 validation: 0.722104
09/16 08:43:37 AM: edges-spr2_acc: training: 0.102065 validation: 0.084127
09/16 08:43:37 AM: edges-spr2_precision: training: 0.857816 validation: 0.842727
09/16 08:43:37 AM: edges-spr2_recall: training: 0.824364 validation: 0.804380
09/16 08:43:37 AM: edges-spr2_f1: training: 0.840757 validation: 0.823107
09/16 08:43:37 AM: Global learning rate: 0.0001
09/16 08:43:37 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:43:41 AM: Update 747: task edges-spr2, batch 47 (747): mcc: 0.7527, acc: 0.1040, precision: 0.8567, recall: 0.8267, f1: 0.8415, edges-spr2_loss: 0.2532
09/16 08:43:46 AM: ***** Step 800 / Validation 8 *****
09/16 08:43:46 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:46 AM: Validating...
09/16 08:43:47 AM: Updating LR scheduler:
09/16 08:43:47 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:43:47 AM: 	# validation passes without improvement: 3
09/16 08:43:47 AM: edges-spr2_loss: training: 0.249924 validation: 0.320023
09/16 08:43:47 AM: macro_avg: validation: 0.822821
09/16 08:43:47 AM: micro_avg: validation: 0.000000
09/16 08:43:47 AM: edges-spr2_mcc: training: 0.756426 validation: 0.723066
09/16 08:43:47 AM: edges-spr2_acc: training: 0.109368 validation: 0.085714
09/16 08:43:47 AM: edges-spr2_precision: training: 0.858550 validation: 0.848273
09/16 08:43:47 AM: edges-spr2_recall: training: 0.829445 validation: 0.798852
09/16 08:43:47 AM: edges-spr2_f1: training: 0.843747 validation: 0.822821
09/16 08:43:47 AM: Global learning rate: 0.0001
09/16 08:43:47 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:43:51 AM: Update 850: task edges-spr2, batch 50 (850): mcc: 0.7551, acc: 0.1072, precision: 0.8575, recall: 0.8287, f1: 0.8428, edges-spr2_loss: 0.2504
09/16 08:43:55 AM: ***** Step 900 / Validation 9 *****
09/16 08:43:55 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:55 AM: Validating...
09/16 08:43:56 AM: Updating LR scheduler:
09/16 08:43:56 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:43:56 AM: 	# validation passes without improvement: 0
09/16 08:43:56 AM: edges-spr2_loss: training: 0.245698 validation: 0.324498
09/16 08:43:56 AM: macro_avg: validation: 0.821609
09/16 08:43:56 AM: micro_avg: validation: 0.000000
09/16 08:43:56 AM: edges-spr2_mcc: training: 0.761266 validation: 0.721310
09/16 08:43:56 AM: edges-spr2_acc: training: 0.111095 validation: 0.074603
09/16 08:43:56 AM: edges-spr2_precision: training: 0.861373 validation: 0.847615
09/16 08:43:56 AM: edges-spr2_recall: training: 0.832390 validation: 0.797151
09/16 08:43:56 AM: edges-spr2_f1: training: 0.846633 validation: 0.821609
09/16 08:43:56 AM: Global learning rate: 5e-05
09/16 08:43:56 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:01 AM: Update 959: task edges-spr2, batch 59 (959): mcc: 0.7635, acc: 0.1184, precision: 0.8630, recall: 0.8346, f1: 0.8485, edges-spr2_loss: 0.2438
09/16 08:44:05 AM: ***** Step 1000 / Validation 10 *****
09/16 08:44:05 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:44:05 AM: Validating...
09/16 08:44:06 AM: Updating LR scheduler:
09/16 08:44:06 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:44:06 AM: 	# validation passes without improvement: 1
09/16 08:44:06 AM: edges-spr2_loss: training: 0.242033 validation: 0.321367
09/16 08:44:06 AM: macro_avg: validation: 0.820020
09/16 08:44:06 AM: micro_avg: validation: 0.000000
09/16 08:44:06 AM: edges-spr2_mcc: training: 0.764606 validation: 0.718209
09/16 08:44:06 AM: edges-spr2_acc: training: 0.116986 validation: 0.074603
09/16 08:44:06 AM: edges-spr2_precision: training: 0.864398 validation: 0.843525
09/16 08:44:06 AM: edges-spr2_recall: training: 0.834970 validation: 0.797789
09/16 08:44:06 AM: edges-spr2_f1: training: 0.849429 validation: 0.820020
09/16 08:44:06 AM: Global learning rate: 5e-05
09/16 08:44:06 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:11 AM: Update 1063: task edges-spr2, batch 63 (1063): mcc: 0.7639, acc: 0.1151, precision: 0.8636, recall: 0.8336, f1: 0.8483, edges-spr2_loss: 0.2416
09/16 08:44:14 AM: ***** Step 1100 / Validation 11 *****
09/16 08:44:14 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:44:14 AM: Validating...
09/16 08:44:15 AM: Updating LR scheduler:
09/16 08:44:15 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:44:15 AM: 	# validation passes without improvement: 2
09/16 08:44:15 AM: edges-spr2_loss: training: 0.238827 validation: 0.320788
09/16 08:44:15 AM: macro_avg: validation: 0.820452
09/16 08:44:15 AM: micro_avg: validation: 0.000000
09/16 08:44:15 AM: edges-spr2_mcc: training: 0.768031 validation: 0.717466
09/16 08:44:15 AM: edges-spr2_acc: training: 0.117989 validation: 0.074603
09/16 08:44:15 AM: edges-spr2_precision: training: 0.866162 validation: 0.838102
09/16 08:44:15 AM: edges-spr2_recall: training: 0.836295 validation: 0.803530
09/16 08:44:15 AM: edges-spr2_f1: training: 0.850966 validation: 0.820452
09/16 08:44:15 AM: Global learning rate: 5e-05
09/16 08:44:15 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:21 AM: Update 1171: task edges-spr2, batch 71 (1171): mcc: 0.7657, acc: 0.1194, precision: 0.8654, recall: 0.8342, f1: 0.8496, edges-spr2_loss: 0.2394
09/16 08:44:24 AM: ***** Step 1200 / Validation 12 *****
09/16 08:44:24 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:44:24 AM: Validating...
09/16 08:44:25 AM: Updating LR scheduler:
09/16 08:44:25 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:44:25 AM: 	# validation passes without improvement: 3
09/16 08:44:25 AM: edges-spr2_loss: training: 0.238640 validation: 0.322535
09/16 08:44:25 AM: macro_avg: validation: 0.821277
09/16 08:44:25 AM: micro_avg: validation: 0.000000
09/16 08:44:25 AM: edges-spr2_mcc: training: 0.766726 validation: 0.719200
09/16 08:44:25 AM: edges-spr2_acc: training: 0.121039 validation: 0.079365
09/16 08:44:25 AM: edges-spr2_precision: training: 0.865125 validation: 0.840757
09/16 08:44:25 AM: edges-spr2_recall: training: 0.836215 validation: 0.802679
09/16 08:44:25 AM: edges-spr2_f1: training: 0.850425 validation: 0.821277
09/16 08:44:25 AM: Global learning rate: 5e-05
09/16 08:44:25 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:31 AM: Update 1276: task edges-spr2, batch 76 (1276): mcc: 0.7734, acc: 0.1243, precision: 0.8677, recall: 0.8418, f1: 0.8546, edges-spr2_loss: 0.2333
09/16 08:44:33 AM: ***** Step 1300 / Validation 13 *****
09/16 08:44:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:44:33 AM: Validating...
09/16 08:44:34 AM: Updating LR scheduler:
09/16 08:44:34 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:44:34 AM: 	# validation passes without improvement: 0
09/16 08:44:34 AM: edges-spr2_loss: training: 0.233808 validation: 0.323746
09/16 08:44:34 AM: macro_avg: validation: 0.821637
09/16 08:44:34 AM: micro_avg: validation: 0.000000
09/16 08:44:34 AM: edges-spr2_mcc: training: 0.773113 validation: 0.718242
09/16 08:44:34 AM: edges-spr2_acc: training: 0.123199 validation: 0.071429
09/16 08:44:34 AM: edges-spr2_precision: training: 0.868598 validation: 0.834613
09/16 08:44:34 AM: edges-spr2_recall: training: 0.840544 validation: 0.809058
09/16 08:44:34 AM: edges-spr2_f1: training: 0.854340 validation: 0.821637
09/16 08:44:34 AM: Global learning rate: 2.5e-05
09/16 08:44:34 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:41 AM: Update 1389: task edges-spr2, batch 89 (1389): mcc: 0.7728, acc: 0.1261, precision: 0.8677, recall: 0.8423, f1: 0.8548, edges-spr2_loss: 0.2327
09/16 08:44:42 AM: ***** Step 1400 / Validation 14 *****
09/16 08:44:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:44:42 AM: Validating...
09/16 08:44:43 AM: Updating LR scheduler:
09/16 08:44:43 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:44:43 AM: 	# validation passes without improvement: 1
09/16 08:44:43 AM: edges-spr2_loss: training: 0.232478 validation: 0.322400
09/16 08:44:43 AM: macro_avg: validation: 0.819672
09/16 08:44:43 AM: micro_avg: validation: 0.000000
09/16 08:44:43 AM: edges-spr2_mcc: training: 0.773209 validation: 0.716260
09/16 08:44:43 AM: edges-spr2_acc: training: 0.127077 validation: 0.074603
09/16 08:44:43 AM: edges-spr2_precision: training: 0.867129 validation: 0.837400
09/16 08:44:43 AM: edges-spr2_recall: training: 0.843196 validation: 0.802679
09/16 08:44:43 AM: edges-spr2_f1: training: 0.854995 validation: 0.819672
09/16 08:44:43 AM: Global learning rate: 2.5e-05
09/16 08:44:43 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:51 AM: Update 1495: task edges-spr2, batch 95 (1495): mcc: 0.7736, acc: 0.1303, precision: 0.8695, recall: 0.8407, f1: 0.8548, edges-spr2_loss: 0.2321
09/16 08:44:52 AM: ***** Step 1500 / Validation 15 *****
09/16 08:44:52 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:44:52 AM: Validating...
09/16 08:44:53 AM: Updating LR scheduler:
09/16 08:44:53 AM: 	Best result seen so far for macro_avg: 0.827
09/16 08:44:53 AM: 	# validation passes without improvement: 2
09/16 08:44:53 AM: Ran out of early stopping patience. Stopping training.
09/16 08:44:53 AM: edges-spr2_loss: training: 0.231626 validation: 0.322391
09/16 08:44:53 AM: macro_avg: validation: 0.822297
09/16 08:44:53 AM: micro_avg: validation: 0.000000
09/16 08:44:53 AM: edges-spr2_mcc: training: 0.774344 validation: 0.719392
09/16 08:44:53 AM: edges-spr2_acc: training: 0.130222 validation: 0.077778
09/16 08:44:53 AM: edges-spr2_precision: training: 0.870329 validation: 0.835749
09/16 08:44:53 AM: edges-spr2_recall: training: 0.841061 validation: 0.809271
09/16 08:44:53 AM: edges-spr2_f1: training: 0.855445 validation: 0.822297
09/16 08:44:53 AM: Global learning rate: 2.5e-05
09/16 08:44:53 AM: Saving checkpoints to: ./experiments/spr2-memorization-mix/run
09/16 08:44:53 AM: Stopped training after 15 validation checks
09/16 08:44:53 AM: Trained edges-spr2 for 1500 batches or 21.429 epochs
09/16 08:44:53 AM: ***** VALIDATION RESULTS *****
09/16 08:44:53 AM: edges-spr2_f1 (for best val pass 5): edges-spr2_loss: 0.31587, macro_avg: 0.82658, micro_avg: 0.00000, edges-spr2_mcc: 0.72962, edges-spr2_acc: 0.10159, edges-spr2_precision: 0.85484, edges-spr2_recall: 0.80013, edges-spr2_f1: 0.82658
09/16 08:44:53 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33941, macro_avg: 0.80198, micro_avg: 0.00000, edges-spr2_mcc: 0.69699, edges-spr2_acc: 0.08413, edges-spr2_precision: 0.85000, edges-spr2_recall: 0.75909, edges-spr2_f1: 0.80198
09/16 08:44:53 AM: macro_avg (for best val pass 5): edges-spr2_loss: 0.31587, macro_avg: 0.82658, micro_avg: 0.00000, edges-spr2_mcc: 0.72962, edges-spr2_acc: 0.10159, edges-spr2_precision: 0.85484, edges-spr2_recall: 0.80013, edges-spr2_f1: 0.82658
09/16 08:44:53 AM: Evaluating...
09/16 08:44:53 AM: Loaded model state from ./experiments/spr2-memorization-mix/run/edges-spr2/model_state_target_train_val_5.best.th
09/16 08:44:53 AM: Evaluating on: edges-spr2, split: val
09/16 08:44:54 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:44:54 AM: Finished evaluating on: edges-spr2
09/16 08:44:54 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:44:54 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-memorization-mix/run
09/16 08:44:54 AM: Wrote all preds for split 'val' to ./experiments/spr2-memorization-mix/run
09/16 08:44:54 AM: Evaluating on: edges-spr2, split: test
09/16 08:44:55 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:44:55 AM: Finished evaluating on: edges-spr2
09/16 08:44:55 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:44:55 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-memorization-mix/run
09/16 08:44:55 AM: Wrote all preds for split 'test' to ./experiments/spr2-memorization-mix/run
09/16 08:44:55 AM: Writing results for split 'val' to ./experiments/spr2-memorization-mix/results.tsv
09/16 08:44:55 AM: micro_avg: 0.000, macro_avg: 0.827, edges-spr2_mcc: 0.730, edges-spr2_acc: 0.102, edges-spr2_precision: 0.855, edges-spr2_recall: 0.800, edges-spr2_f1: 0.827
09/16 08:44:55 AM: Done!
09/16 08:44:55 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
