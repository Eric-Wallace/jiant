09/16 08:42:05 AM: Git branch: master
09/16 08:42:05 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:42:05 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-multiqa-only/",
  "exp_name": "experiments/spr2-multiqa-only",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-multiqa-only/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/multiqa",
  "pytorch_transformers_output_mode": "only",
  "remote_log_name": "experiments/spr2-multiqa-only__run",
  "run_dir": "./experiments/spr2-multiqa-only/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:42:05 AM: Saved config to ./experiments/spr2-multiqa-only/run/params.conf
09/16 08:42:05 AM: Using random seed 1234
09/16 08:42:07 AM: Using GPU 0
09/16 08:42:07 AM: Loading tasks...
09/16 08:42:07 AM: Writing pre-preprocessed tasks to ./experiments/spr2-multiqa-only/
09/16 08:42:07 AM: 	Creating task edges-spr2 from scratch.
09/16 08:42:07 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:42:07 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:42:07 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:42:07 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:42:07 AM: 	Finished loading tasks: edges-spr2.
09/16 08:42:07 AM: 	Building vocab from scratch.
09/16 08:42:07 AM: 	Counting units for task edges-spr2.
09/16 08:42:07 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:42:08 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:09 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:42:09 AM: 	Saved vocab to ./experiments/spr2-multiqa-only/vocab
09/16 08:42:09 AM: Loading token dictionary from ./experiments/spr2-multiqa-only/vocab.
09/16 08:42:09 AM: 	Loaded vocab from ./experiments/spr2-multiqa-only/vocab
09/16 08:42:09 AM: 	Vocab namespace tokens: size 7943
09/16 08:42:09 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:42:09 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:42:09 AM: 	Vocab namespace chars: size 65
09/16 08:42:09 AM: 	Finished building vocab.
09/16 08:42:09 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:42:10 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-multiqa-only/preproc/edges-spr2__train_data
09/16 08:42:10 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:42:10 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-multiqa-only/preproc/edges-spr2__val_data
09/16 08:42:10 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:42:10 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-multiqa-only/preproc/edges-spr2__test_data
09/16 08:42:10 AM: 	Finished indexing tasks
09/16 08:42:10 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:42:10 AM: 	  Training on 
09/16 08:42:10 AM: 	  Evaluating on edges-spr2
09/16 08:42:10 AM: 	Finished loading tasks in 2.691s
09/16 08:42:10 AM: 	 Tasks: ['edges-spr2']
09/16 08:42:10 AM: Building model...
09/16 08:42:10 AM: Using BERT model (bert-base-uncased).
09/16 08:42:10 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:42:10 AM: models/multiqa
09/16 08:42:10 AM: loading configuration file models/multiqa/config.json
09/16 08:42:10 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:42:10 AM: loading weights file models/multiqa/pytorch_model.bin
09/16 08:42:21 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmp1f_uwoz2
09/16 08:42:23 AM: copying /tmp/tmp1f_uwoz2 to cache at ./experiments/spr2-multiqa-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:23 AM: creating metadata file for ./experiments/spr2-multiqa-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:23 AM: removing temp file /tmp/tmp1f_uwoz2
09/16 08:42:23 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-multiqa-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:42:23 AM: Initializing parameters
09/16 08:42:23 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:42:23 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:42:23 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:42:23 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:42:23 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:42:23 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:42:23 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:42:28 AM: Model specification:
09/16 08:42:28 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:42:28 AM: Model parameters:
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:42:28 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:42:28 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:42:28 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:28 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:42:28 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:28 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:42:28 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:28 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:28 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:42:28 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:42:28 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:42:28 AM: Total number of parameters: 110144020 (1.10144e+08)
09/16 08:42:28 AM: Number of trainable parameters: 661780 (661780)
09/16 08:42:28 AM: Finished building model in 18.712s
09/16 08:42:28 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:42:29 AM: patience = 9
09/16 08:42:29 AM: val_interval = 100
09/16 08:42:29 AM: max_vals = 100
09/16 08:42:29 AM: cuda_device = 0
09/16 08:42:29 AM: grad_norm = 5.0
09/16 08:42:29 AM: grad_clipping = None
09/16 08:42:29 AM: lr_decay = 0.99
09/16 08:42:29 AM: min_lr = 1e-06
09/16 08:42:29 AM: keep_all_checkpoints = 0
09/16 08:42:29 AM: val_data_limit = 5000
09/16 08:42:29 AM: max_epochs = -1
09/16 08:42:29 AM: dec_val_scale = 250
09/16 08:42:29 AM: training_data_fraction = 1
09/16 08:42:29 AM: type = adam
09/16 08:42:29 AM: parameter_groups = None
09/16 08:42:29 AM: Number of trainable parameters: 661780
09/16 08:42:29 AM: infer_type_and_cast = True
09/16 08:42:29 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:29 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:29 AM: lr = 0.0001
09/16 08:42:29 AM: amsgrad = True
09/16 08:42:29 AM: type = reduce_on_plateau
09/16 08:42:29 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:29 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:29 AM: mode = max
09/16 08:42:29 AM: factor = 0.5
09/16 08:42:29 AM: patience = 3
09/16 08:42:29 AM: threshold = 0.0001
09/16 08:42:29 AM: threshold_mode = abs
09/16 08:42:29 AM: verbose = True
09/16 08:42:29 AM: type = adam
09/16 08:42:29 AM: parameter_groups = None
09/16 08:42:29 AM: Number of trainable parameters: 661780
09/16 08:42:29 AM: infer_type_and_cast = True
09/16 08:42:29 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:29 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:29 AM: lr = 0.0001
09/16 08:42:29 AM: amsgrad = True
09/16 08:42:29 AM: type = reduce_on_plateau
09/16 08:42:29 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:42:29 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:42:29 AM: mode = max
09/16 08:42:29 AM: factor = 0.5
09/16 08:42:29 AM: patience = 3
09/16 08:42:29 AM: threshold = 0.0001
09/16 08:42:29 AM: threshold_mode = abs
09/16 08:42:29 AM: verbose = True
09/16 08:42:29 AM: Starting training without restoring from a checkpoint.
09/16 08:42:29 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:42:29 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:42:34 AM: ***** Step 100 / Validation 1 *****
09/16 08:42:34 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:34 AM: Validating...
09/16 08:42:34 AM: Best result seen so far for edges-spr2.
09/16 08:42:34 AM: Best result seen so far for micro.
09/16 08:42:34 AM: Best result seen so far for macro.
09/16 08:42:34 AM: Updating LR scheduler:
09/16 08:42:34 AM: 	Best result seen so far for macro_avg: 0.786
09/16 08:42:34 AM: 	# validation passes without improvement: 0
09/16 08:42:34 AM: edges-spr2_loss: training: 0.390119 validation: 0.352541
09/16 08:42:34 AM: macro_avg: validation: 0.785561
09/16 08:42:34 AM: micro_avg: validation: 0.000000
09/16 08:42:34 AM: edges-spr2_mcc: training: 0.603198 validation: 0.673794
09/16 08:42:34 AM: edges-spr2_acc: training: 0.044833 validation: 0.074603
09/16 08:42:34 AM: edges-spr2_precision: training: 0.764700 validation: 0.839623
09/16 08:42:34 AM: edges-spr2_recall: training: 0.724806 validation: 0.738040
09/16 08:42:34 AM: edges-spr2_f1: training: 0.744219 validation: 0.785561
09/16 08:42:34 AM: Global learning rate: 0.0001
09/16 08:42:34 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:42:38 AM: ***** Step 200 / Validation 2 *****
09/16 08:42:38 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:38 AM: Validating...
09/16 08:42:38 AM: Best result seen so far for edges-spr2.
09/16 08:42:38 AM: Best result seen so far for macro.
09/16 08:42:38 AM: Updating LR scheduler:
09/16 08:42:38 AM: 	Best result seen so far for macro_avg: 0.796
09/16 08:42:38 AM: 	# validation passes without improvement: 0
09/16 08:42:38 AM: edges-spr2_loss: training: 0.320155 validation: 0.339958
09/16 08:42:38 AM: macro_avg: validation: 0.796389
09/16 08:42:38 AM: micro_avg: validation: 0.000000
09/16 08:42:38 AM: edges-spr2_mcc: training: 0.681021 validation: 0.686130
09/16 08:42:38 AM: edges-spr2_acc: training: 0.058899 validation: 0.074603
09/16 08:42:38 AM: edges-spr2_precision: training: 0.823803 validation: 0.836768
09/16 08:42:38 AM: edges-spr2_recall: training: 0.763075 validation: 0.759728
09/16 08:42:38 AM: edges-spr2_f1: training: 0.792277 validation: 0.796389
09/16 08:42:38 AM: Global learning rate: 0.0001
09/16 08:42:38 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:42:39 AM: Update 209: task edges-spr2, batch 9 (209): mcc: 0.6988, acc: 0.0622, precision: 0.8301, recall: 0.7815, f1: 0.8051, edges-spr2_loss: 0.3042
09/16 08:42:44 AM: ***** Step 300 / Validation 3 *****
09/16 08:42:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:44 AM: Validating...
09/16 08:42:45 AM: Best result seen so far for edges-spr2.
09/16 08:42:45 AM: Best result seen so far for macro.
09/16 08:42:45 AM: Updating LR scheduler:
09/16 08:42:45 AM: 	Best result seen so far for macro_avg: 0.797
09/16 08:42:45 AM: 	# validation passes without improvement: 0
09/16 08:42:45 AM: edges-spr2_loss: training: 0.303975 validation: 0.335800
09/16 08:42:45 AM: macro_avg: validation: 0.796597
09/16 08:42:45 AM: micro_avg: validation: 0.000000
09/16 08:42:45 AM: edges-spr2_mcc: training: 0.696876 validation: 0.687693
09/16 08:42:45 AM: edges-spr2_acc: training: 0.071641 validation: 0.076190
09/16 08:42:45 AM: edges-spr2_precision: training: 0.831204 validation: 0.841135
09/16 08:42:45 AM: edges-spr2_recall: training: 0.777304 validation: 0.756538
09/16 08:42:45 AM: edges-spr2_f1: training: 0.803351 validation: 0.796597
09/16 08:42:45 AM: Global learning rate: 0.0001
09/16 08:42:45 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:42:49 AM: ***** Step 400 / Validation 4 *****
09/16 08:42:49 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:49 AM: Validating...
09/16 08:42:49 AM: Best result seen so far for edges-spr2.
09/16 08:42:49 AM: Best result seen so far for macro.
09/16 08:42:49 AM: Updating LR scheduler:
09/16 08:42:49 AM: 	Best result seen so far for macro_avg: 0.799
09/16 08:42:49 AM: 	# validation passes without improvement: 0
09/16 08:42:49 AM: edges-spr2_loss: training: 0.291679 validation: 0.337527
09/16 08:42:49 AM: macro_avg: validation: 0.799238
09/16 08:42:49 AM: micro_avg: validation: 0.000000
09/16 08:42:49 AM: edges-spr2_mcc: training: 0.708631 validation: 0.692169
09/16 08:42:49 AM: edges-spr2_acc: training: 0.076977 validation: 0.068254
09/16 08:42:49 AM: edges-spr2_precision: training: 0.833952 validation: 0.845187
09/16 08:42:49 AM: edges-spr2_recall: training: 0.790785 validation: 0.758027
09/16 08:42:49 AM: edges-spr2_f1: training: 0.811795 validation: 0.799238
09/16 08:42:49 AM: Global learning rate: 0.0001
09/16 08:42:49 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:42:49 AM: Update 409: task edges-spr2, batch 9 (409): mcc: 0.7217, acc: 0.0818, precision: 0.8475, recall: 0.7971, f1: 0.8215, edges-spr2_loss: 0.2880
09/16 08:42:54 AM: ***** Step 500 / Validation 5 *****
09/16 08:42:54 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:54 AM: Validating...
09/16 08:42:54 AM: Best result seen so far for edges-spr2.
09/16 08:42:54 AM: Best result seen so far for macro.
09/16 08:42:54 AM: Updating LR scheduler:
09/16 08:42:54 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:42:54 AM: 	# validation passes without improvement: 0
09/16 08:42:54 AM: edges-spr2_loss: training: 0.283727 validation: 0.336408
09/16 08:42:54 AM: macro_avg: validation: 0.802690
09/16 08:42:54 AM: micro_avg: validation: 0.000000
09/16 08:42:54 AM: edges-spr2_mcc: training: 0.716402 validation: 0.693083
09/16 08:42:54 AM: edges-spr2_acc: training: 0.084481 validation: 0.068254
09/16 08:42:54 AM: edges-spr2_precision: training: 0.837704 validation: 0.833371
09/16 08:42:54 AM: edges-spr2_recall: training: 0.797999 validation: 0.774187
09/16 08:42:54 AM: edges-spr2_f1: training: 0.817369 validation: 0.802690
09/16 08:42:54 AM: Global learning rate: 0.0001
09/16 08:42:54 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:42:58 AM: ***** Step 600 / Validation 6 *****
09/16 08:42:58 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:42:58 AM: Validating...
09/16 08:42:58 AM: Updating LR scheduler:
09/16 08:42:58 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:42:58 AM: 	# validation passes without improvement: 1
09/16 08:42:58 AM: edges-spr2_loss: training: 0.276841 validation: 0.338362
09/16 08:42:58 AM: macro_avg: validation: 0.802496
09/16 08:42:58 AM: micro_avg: validation: 0.000000
09/16 08:42:58 AM: edges-spr2_mcc: training: 0.725076 validation: 0.691119
09/16 08:42:58 AM: edges-spr2_acc: training: 0.090871 validation: 0.068254
09/16 08:42:58 AM: edges-spr2_precision: training: 0.841638 validation: 0.827127
09/16 08:42:58 AM: edges-spr2_recall: training: 0.805168 validation: 0.779290
09/16 08:42:58 AM: edges-spr2_f1: training: 0.823000 validation: 0.802496
09/16 08:42:58 AM: Global learning rate: 0.0001
09/16 08:42:58 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:00 AM: Update 631: task edges-spr2, batch 31 (631): mcc: 0.7318, acc: 0.0775, precision: 0.8443, recall: 0.8124, f1: 0.8281, edges-spr2_loss: 0.2711
09/16 08:43:03 AM: ***** Step 700 / Validation 7 *****
09/16 08:43:03 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:03 AM: Validating...
09/16 08:43:03 AM: Updating LR scheduler:
09/16 08:43:03 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:03 AM: 	# validation passes without improvement: 2
09/16 08:43:03 AM: edges-spr2_loss: training: 0.269861 validation: 0.341967
09/16 08:43:03 AM: macro_avg: validation: 0.800088
09/16 08:43:03 AM: micro_avg: validation: 0.000000
09/16 08:43:03 AM: edges-spr2_mcc: training: 0.732591 validation: 0.688410
09/16 08:43:03 AM: edges-spr2_acc: training: 0.085490 validation: 0.073016
09/16 08:43:03 AM: edges-spr2_precision: training: 0.844688 validation: 0.828513
09/16 08:43:03 AM: edges-spr2_recall: training: 0.812603 validation: 0.773549
09/16 08:43:03 AM: edges-spr2_f1: training: 0.828335 validation: 0.800088
09/16 08:43:03 AM: Global learning rate: 0.0001
09/16 08:43:03 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:08 AM: ***** Step 800 / Validation 8 *****
09/16 08:43:08 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:08 AM: Validating...
09/16 08:43:08 AM: Updating LR scheduler:
09/16 08:43:08 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:08 AM: 	# validation passes without improvement: 3
09/16 08:43:08 AM: edges-spr2_loss: training: 0.264679 validation: 0.343480
09/16 08:43:08 AM: macro_avg: validation: 0.800442
09/16 08:43:08 AM: micro_avg: validation: 0.000000
09/16 08:43:08 AM: edges-spr2_mcc: training: 0.738325 validation: 0.690326
09/16 08:43:08 AM: edges-spr2_acc: training: 0.094966 validation: 0.071429
09/16 08:43:08 AM: edges-spr2_precision: training: 0.848077 validation: 0.833717
09/16 08:43:08 AM: edges-spr2_recall: training: 0.816416 validation: 0.769721
09/16 08:43:08 AM: edges-spr2_f1: training: 0.831945 validation: 0.800442
09/16 08:43:08 AM: Global learning rate: 0.0001
09/16 08:43:08 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:10 AM: Update 841: task edges-spr2, batch 41 (841): mcc: 0.7337, acc: 0.0910, precision: 0.8461, recall: 0.8125, f1: 0.8290, edges-spr2_loss: 0.2654
09/16 08:43:12 AM: ***** Step 900 / Validation 9 *****
09/16 08:43:12 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:12 AM: Validating...
09/16 08:43:12 AM: Updating LR scheduler:
09/16 08:43:12 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:12 AM: 	# validation passes without improvement: 0
09/16 08:43:12 AM: edges-spr2_loss: training: 0.260735 validation: 0.348121
09/16 08:43:12 AM: macro_avg: validation: 0.798508
09/16 08:43:12 AM: micro_avg: validation: 0.000000
09/16 08:43:12 AM: edges-spr2_mcc: training: 0.739240 validation: 0.685313
09/16 08:43:12 AM: edges-spr2_acc: training: 0.096387 validation: 0.069841
09/16 08:43:12 AM: edges-spr2_precision: training: 0.848285 validation: 0.824649
09/16 08:43:12 AM: edges-spr2_recall: training: 0.816918 validation: 0.773974
09/16 08:43:12 AM: edges-spr2_f1: training: 0.832306 validation: 0.798508
09/16 08:43:12 AM: Global learning rate: 5e-05
09/16 08:43:12 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:16 AM: ***** Step 1000 / Validation 10 *****
09/16 08:43:16 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:16 AM: Validating...
09/16 08:43:17 AM: Updating LR scheduler:
09/16 08:43:17 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:17 AM: 	# validation passes without improvement: 1
09/16 08:43:17 AM: edges-spr2_loss: training: 0.256823 validation: 0.346187
09/16 08:43:17 AM: macro_avg: validation: 0.795329
09/16 08:43:17 AM: micro_avg: validation: 0.000000
09/16 08:43:17 AM: edges-spr2_mcc: training: 0.745657 validation: 0.681404
09/16 08:43:17 AM: edges-spr2_acc: training: 0.107688 validation: 0.061905
09/16 08:43:17 AM: edges-spr2_precision: training: 0.852870 validation: 0.825143
09/16 08:43:17 AM: edges-spr2_recall: training: 0.822111 validation: 0.767595
09/16 08:43:17 AM: edges-spr2_f1: training: 0.837208 validation: 0.795329
09/16 08:43:17 AM: Global learning rate: 5e-05
09/16 08:43:17 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:20 AM: Update 1079: task edges-spr2, batch 79 (1079): mcc: 0.7510, acc: 0.1054, precision: 0.8545, recall: 0.8260, f1: 0.8400, edges-spr2_loss: 0.2526
09/16 08:43:21 AM: ***** Step 1100 / Validation 11 *****
09/16 08:43:21 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:21 AM: Validating...
09/16 08:43:21 AM: Updating LR scheduler:
09/16 08:43:21 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:21 AM: 	# validation passes without improvement: 2
09/16 08:43:21 AM: edges-spr2_loss: training: 0.251270 validation: 0.348094
09/16 08:43:21 AM: macro_avg: validation: 0.798379
09/16 08:43:21 AM: micro_avg: validation: 0.000000
09/16 08:43:21 AM: edges-spr2_mcc: training: 0.753137 validation: 0.684737
09/16 08:43:21 AM: edges-spr2_acc: training: 0.105638 validation: 0.066667
09/16 08:43:21 AM: edges-spr2_precision: training: 0.855546 validation: 0.823171
09/16 08:43:21 AM: edges-spr2_recall: training: 0.827988 validation: 0.775037
09/16 08:43:21 AM: edges-spr2_f1: training: 0.841542 validation: 0.798379
09/16 08:43:21 AM: Global learning rate: 5e-05
09/16 08:43:21 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:26 AM: ***** Step 1200 / Validation 12 *****
09/16 08:43:26 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:26 AM: Validating...
09/16 08:43:26 AM: Updating LR scheduler:
09/16 08:43:26 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:26 AM: 	# validation passes without improvement: 3
09/16 08:43:26 AM: edges-spr2_loss: training: 0.252220 validation: 0.349226
09/16 08:43:26 AM: macro_avg: validation: 0.800216
09/16 08:43:26 AM: micro_avg: validation: 0.000000
09/16 08:43:26 AM: edges-spr2_mcc: training: 0.751874 validation: 0.684887
09/16 08:43:26 AM: edges-spr2_acc: training: 0.110568 validation: 0.060317
09/16 08:43:26 AM: edges-spr2_precision: training: 0.855751 validation: 0.814856
09/16 08:43:26 AM: edges-spr2_recall: training: 0.826501 validation: 0.786094
09/16 08:43:26 AM: edges-spr2_f1: training: 0.840872 validation: 0.800216
09/16 08:43:26 AM: Global learning rate: 5e-05
09/16 08:43:26 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:30 AM: Update 1289: task edges-spr2, batch 89 (1289): mcc: 0.7584, acc: 0.1124, precision: 0.8602, recall: 0.8300, f1: 0.8448, edges-spr2_loss: 0.2484
09/16 08:43:31 AM: ***** Step 1300 / Validation 13 *****
09/16 08:43:31 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:31 AM: Validating...
09/16 08:43:31 AM: Updating LR scheduler:
09/16 08:43:31 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:31 AM: 	# validation passes without improvement: 0
09/16 08:43:31 AM: edges-spr2_loss: training: 0.248655 validation: 0.353542
09/16 08:43:31 AM: macro_avg: validation: 0.794346
09/16 08:43:31 AM: micro_avg: validation: 0.000000
09/16 08:43:31 AM: edges-spr2_mcc: training: 0.757985 validation: 0.678517
09/16 08:43:31 AM: edges-spr2_acc: training: 0.109654 validation: 0.060317
09/16 08:43:31 AM: edges-spr2_precision: training: 0.859425 validation: 0.819394
09/16 08:43:31 AM: edges-spr2_recall: training: 0.830173 validation: 0.770785
09/16 08:43:31 AM: edges-spr2_f1: training: 0.844545 validation: 0.794346
09/16 08:43:31 AM: Global learning rate: 2.5e-05
09/16 08:43:31 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:34 AM: ***** Step 1400 / Validation 14 *****
09/16 08:43:34 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:34 AM: Validating...
09/16 08:43:35 AM: Updating LR scheduler:
09/16 08:43:35 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:35 AM: 	# validation passes without improvement: 1
09/16 08:43:35 AM: edges-spr2_loss: training: 0.246142 validation: 0.352793
09/16 08:43:35 AM: macro_avg: validation: 0.796458
09/16 08:43:35 AM: micro_avg: validation: 0.000000
09/16 08:43:35 AM: edges-spr2_mcc: training: 0.758872 validation: 0.681272
09/16 08:43:35 AM: edges-spr2_acc: training: 0.117706 validation: 0.057143
09/16 08:43:35 AM: edges-spr2_precision: training: 0.859284 validation: 0.819573
09/16 08:43:35 AM: edges-spr2_recall: training: 0.832419 validation: 0.774612
09/16 08:43:35 AM: edges-spr2_f1: training: 0.845638 validation: 0.796458
09/16 08:43:35 AM: Global learning rate: 2.5e-05
09/16 08:43:35 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:39 AM: ***** Step 1500 / Validation 15 *****
09/16 08:43:39 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:43:39 AM: Validating...
09/16 08:43:39 AM: Updating LR scheduler:
09/16 08:43:39 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:43:39 AM: 	# validation passes without improvement: 2
09/16 08:43:39 AM: Ran out of early stopping patience. Stopping training.
09/16 08:43:39 AM: edges-spr2_loss: training: 0.244749 validation: 0.353578
09/16 08:43:39 AM: macro_avg: validation: 0.798182
09/16 08:43:39 AM: micro_avg: validation: 0.000000
09/16 08:43:39 AM: edges-spr2_mcc: training: 0.759400 validation: 0.681650
09/16 08:43:39 AM: edges-spr2_acc: training: 0.118485 validation: 0.055556
09/16 08:43:39 AM: edges-spr2_precision: training: 0.860922 validation: 0.812693
09/16 08:43:39 AM: edges-spr2_recall: training: 0.831281 validation: 0.784180
09/16 08:43:39 AM: edges-spr2_f1: training: 0.845842 validation: 0.798182
09/16 08:43:39 AM: Global learning rate: 2.5e-05
09/16 08:43:39 AM: Saving checkpoints to: ./experiments/spr2-multiqa-only/run
09/16 08:43:39 AM: Stopped training after 15 validation checks
09/16 08:43:39 AM: Trained edges-spr2 for 1500 batches or 21.429 epochs
09/16 08:43:39 AM: ***** VALIDATION RESULTS *****
09/16 08:43:39 AM: edges-spr2_f1 (for best val pass 5): edges-spr2_loss: 0.33641, macro_avg: 0.80269, micro_avg: 0.00000, edges-spr2_mcc: 0.69308, edges-spr2_acc: 0.06825, edges-spr2_precision: 0.83337, edges-spr2_recall: 0.77419, edges-spr2_f1: 0.80269
09/16 08:43:39 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.35254, macro_avg: 0.78556, micro_avg: 0.00000, edges-spr2_mcc: 0.67379, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.83962, edges-spr2_recall: 0.73804, edges-spr2_f1: 0.78556
09/16 08:43:39 AM: macro_avg (for best val pass 5): edges-spr2_loss: 0.33641, macro_avg: 0.80269, micro_avg: 0.00000, edges-spr2_mcc: 0.69308, edges-spr2_acc: 0.06825, edges-spr2_precision: 0.83337, edges-spr2_recall: 0.77419, edges-spr2_f1: 0.80269
09/16 08:43:39 AM: Evaluating...
09/16 08:43:39 AM: Loaded model state from ./experiments/spr2-multiqa-only/run/edges-spr2/model_state_target_train_val_5.best.th
09/16 08:43:39 AM: Evaluating on: edges-spr2, split: val
09/16 08:43:40 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:43:40 AM: Finished evaluating on: edges-spr2
09/16 08:43:40 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:43:40 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-multiqa-only/run
09/16 08:43:40 AM: Wrote all preds for split 'val' to ./experiments/spr2-multiqa-only/run
09/16 08:43:40 AM: Evaluating on: edges-spr2, split: test
09/16 08:43:40 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:43:40 AM: Finished evaluating on: edges-spr2
09/16 08:43:40 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:43:40 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-multiqa-only/run
09/16 08:43:40 AM: Wrote all preds for split 'test' to ./experiments/spr2-multiqa-only/run
09/16 08:43:40 AM: Writing results for split 'val' to ./experiments/spr2-multiqa-only/results.tsv
09/16 08:43:40 AM: micro_avg: 0.000, macro_avg: 0.803, edges-spr2_mcc: 0.693, edges-spr2_acc: 0.068, edges-spr2_precision: 0.833, edges-spr2_recall: 0.774, edges-spr2_f1: 0.803
09/16 08:43:40 AM: Done!
09/16 08:43:40 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
