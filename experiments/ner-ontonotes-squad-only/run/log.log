09/16 03:34:04 PM: Git branch: master
09/16 03:34:04 PM: Git SHA: 93c1dfd555f3458ddbb66d458dfeca984f2d8527
09/16 03:34:05 PM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/ner-ontonotes-squad-only/",
  "exp_name": "experiments/ner-ontonotes-squad-only",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/ner-ontonotes-squad-only/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/squad",
  "pytorch_transformers_output_mode": "only",
  "remote_log_name": "experiments/ner-ontonotes-squad-only__run",
  "run_dir": "./experiments/ner-ontonotes-squad-only/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-ner-ontonotes",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 03:34:06 PM: Saved config to ./experiments/ner-ontonotes-squad-only/run/params.conf
09/16 03:34:06 PM: Using random seed 1234
09/16 03:34:28 PM: Using GPU 0
09/16 03:34:28 PM: Loading tasks...
09/16 03:34:28 PM: Writing pre-preprocessed tasks to ./experiments/ner-ontonotes-squad-only/
09/16 03:34:28 PM: 	Creating task edges-ner-ontonotes from scratch.
09/16 03:34:30 PM: Read=49706, Skip=66106, Total=115812 from ./probing_data/edges/ontonotes/ner/train.json.retokenized.bert-base-uncased
09/16 03:34:30 PM: Read=7610, Skip=8070, Total=15680 from ./probing_data/edges/ontonotes/ner/development.json.retokenized.bert-base-uncased
09/16 03:34:30 PM: Read=5099, Skip=7118, Total=12217 from ./probing_data/edges/ontonotes/ner/test.json.retokenized.bert-base-uncased
09/16 03:34:30 PM: 	Task 'edges-ner-ontonotes': |train|=49706 |val|=7610 |test|=5099
09/16 03:34:30 PM: 	Finished loading tasks: edges-ner-ontonotes.
09/16 03:34:30 PM: 	Building vocab from scratch.
09/16 03:34:30 PM: 	Counting units for task edges-ner-ontonotes.
09/16 03:34:32 PM: 	Task 'edges-ner-ontonotes': adding vocab namespace 'edges-ner-ontonotes_labels'
09/16 03:34:33 PM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 03:34:33 PM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 03:34:34 PM: 	Saved vocab to ./experiments/ner-ontonotes-squad-only/vocab
09/16 03:34:34 PM: Loading token dictionary from ./experiments/ner-ontonotes-squad-only/vocab.
09/16 03:34:34 PM: 	Loaded vocab from ./experiments/ner-ontonotes-squad-only/vocab
09/16 03:34:34 PM: 	Vocab namespace edges-ner-ontonotes_labels: size 18
09/16 03:34:34 PM: 	Vocab namespace tokens: size 22840
09/16 03:34:34 PM: 	Vocab namespace bert_uncased: size 30524
09/16 03:34:34 PM: 	Vocab namespace chars: size 77
09/16 03:34:34 PM: 	Finished building vocab.
09/16 03:34:34 PM: 	Task edges-ner-ontonotes (train): Indexing from scratch.
09/16 03:34:49 PM: 	Task edges-ner-ontonotes (train): Saved 49706 instances to ./experiments/ner-ontonotes-squad-only/preproc/edges-ner-ontonotes__train_data
09/16 03:34:49 PM: 	Task edges-ner-ontonotes (val): Indexing from scratch.
09/16 03:34:51 PM: 	Task edges-ner-ontonotes (val): Saved 7610 instances to ./experiments/ner-ontonotes-squad-only/preproc/edges-ner-ontonotes__val_data
09/16 03:34:51 PM: 	Task edges-ner-ontonotes (test): Indexing from scratch.
09/16 03:34:52 PM: 	Task edges-ner-ontonotes (test): Saved 5099 instances to ./experiments/ner-ontonotes-squad-only/preproc/edges-ner-ontonotes__test_data
09/16 03:34:52 PM: 	Finished indexing tasks
09/16 03:34:52 PM: 	Creating trimmed target-only version of edges-ner-ontonotes train.
09/16 03:34:52 PM: 	  Training on 
09/16 03:34:52 PM: 	  Evaluating on edges-ner-ontonotes
09/16 03:34:52 PM: 	Finished loading tasks in 23.408s
09/16 03:34:52 PM: 	 Tasks: ['edges-ner-ontonotes']
09/16 03:34:52 PM: Building model...
09/16 03:34:52 PM: Using BERT model (bert-base-uncased).
09/16 03:34:52 PM: LOADING A FUNETUNED MODEL from: 
09/16 03:34:52 PM: models/squad
09/16 03:34:52 PM: loading configuration file models/squad/config.json
09/16 03:34:52 PM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 03:34:52 PM: loading weights file models/squad/pytorch_model.bin
09/16 03:34:57 PM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmp94qm9hyj
09/16 03:35:00 PM: copying /tmp/tmp94qm9hyj to cache at ./experiments/ner-ontonotes-squad-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 03:35:00 PM: creating metadata file for ./experiments/ner-ontonotes-squad-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 03:35:00 PM: removing temp file /tmp/tmp94qm9hyj
09/16 03:35:00 PM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/ner-ontonotes-squad-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 03:35:00 PM: Initializing parameters
09/16 03:35:00 PM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 03:35:00 PM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 03:35:00 PM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 03:35:00 PM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 03:35:00 PM:    _text_field_embedder.model.pooler.dense.bias
09/16 03:35:00 PM:    _text_field_embedder.model.pooler.dense.weight
09/16 03:35:00 PM: 	Task 'edges-ner-ontonotes' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-ner-ontonotes"
}
09/16 03:35:14 PM: Model specification:
09/16 03:35:14 PM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-ner-ontonotes_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Linear(in_features=512, out_features=18, bias=True)
    )
  )
)
09/16 03:35:14 PM: Model parameters:
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 03:35:14 PM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 03:35:14 PM: 	edges-ner-ontonotes_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 03:35:14 PM: 	edges-ner-ontonotes_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 03:35:14 PM: 	edges-ner-ontonotes_mdl.classifier.classifier.weight: Trainable parameter, count 9216 with torch.Size([18, 512])
09/16 03:35:14 PM: 	edges-ner-ontonotes_mdl.classifier.classifier.bias: Trainable parameter, count 18 with torch.Size([18])
09/16 03:35:14 PM: Total number of parameters: 109688338 (1.09688e+08)
09/16 03:35:14 PM: Number of trainable parameters: 206098 (206098)
09/16 03:35:14 PM: Finished building model in 22.152s
09/16 03:35:14 PM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-ner-ontonotes 

09/16 03:35:17 PM: patience = 9
09/16 03:35:17 PM: val_interval = 1000
09/16 03:35:17 PM: max_vals = 250
09/16 03:35:17 PM: cuda_device = 0
09/16 03:35:17 PM: grad_norm = 5.0
09/16 03:35:17 PM: grad_clipping = None
09/16 03:35:17 PM: lr_decay = 0.99
09/16 03:35:17 PM: min_lr = 1e-06
09/16 03:35:17 PM: keep_all_checkpoints = 0
09/16 03:35:17 PM: val_data_limit = 5000
09/16 03:35:17 PM: max_epochs = -1
09/16 03:35:17 PM: dec_val_scale = 250
09/16 03:35:17 PM: training_data_fraction = 1
09/16 03:35:17 PM: type = adam
09/16 03:35:17 PM: parameter_groups = None
09/16 03:35:17 PM: Number of trainable parameters: 206098
09/16 03:35:17 PM: infer_type_and_cast = True
09/16 03:35:17 PM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 03:35:17 PM: CURRENTLY DEFINED PARAMETERS: 
09/16 03:35:17 PM: lr = 0.0001
09/16 03:35:17 PM: amsgrad = True
09/16 03:35:17 PM: type = reduce_on_plateau
09/16 03:35:17 PM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 03:35:17 PM: CURRENTLY DEFINED PARAMETERS: 
09/16 03:35:17 PM: mode = max
09/16 03:35:17 PM: factor = 0.5
09/16 03:35:17 PM: patience = 3
09/16 03:35:17 PM: threshold = 0.0001
09/16 03:35:17 PM: threshold_mode = abs
09/16 03:35:17 PM: verbose = True
09/16 03:35:17 PM: type = adam
09/16 03:35:17 PM: parameter_groups = None
09/16 03:35:17 PM: Number of trainable parameters: 206098
09/16 03:35:17 PM: infer_type_and_cast = True
09/16 03:35:17 PM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 03:35:17 PM: CURRENTLY DEFINED PARAMETERS: 
09/16 03:35:17 PM: lr = 0.0001
09/16 03:35:17 PM: amsgrad = True
09/16 03:35:17 PM: type = reduce_on_plateau
09/16 03:35:17 PM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 03:35:17 PM: CURRENTLY DEFINED PARAMETERS: 
09/16 03:35:17 PM: mode = max
09/16 03:35:17 PM: factor = 0.5
09/16 03:35:17 PM: patience = 3
09/16 03:35:17 PM: threshold = 0.0001
09/16 03:35:17 PM: threshold_mode = abs
09/16 03:35:17 PM: verbose = True
09/16 03:35:17 PM: Starting training without restoring from a checkpoint.
09/16 03:35:17 PM: Training examples per task, before any subsampling: {'edges-ner-ontonotes': 49706}
09/16 03:35:17 PM: Beginning training with stopping criteria based on metric: edges-ner-ontonotes_f1
09/16 03:35:27 PM: Update 312: task edges-ner-ontonotes, batch 312 (312): mcc: 0.4413, acc: 0.3972, precision: 0.5067, recall: 0.4361, f1: 0.4687, edges-ner-ontonotes_loss: 0.1734
09/16 03:35:37 PM: Update 500: task edges-ner-ontonotes, batch 500 (500): mcc: 0.5689, acc: 0.5073, precision: 0.6548, recall: 0.5322, f1: 0.5871, edges-ner-ontonotes_loss: 0.1366
09/16 03:35:47 PM: Update 875: task edges-ner-ontonotes, batch 875 (875): mcc: 0.6779, acc: 0.6077, precision: 0.7653, recall: 0.6293, f1: 0.6907, edges-ner-ontonotes_loss: 0.1032
09/16 03:35:53 PM: ***** Step 1000 / Validation 1 *****
09/16 03:35:53 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:35:53 PM: Validating...
09/16 03:35:59 PM: Evaluate: task edges-ner-ontonotes, batch 113 (157): mcc: 0.8006, acc: 0.7283, precision: 0.8779, recall: 0.7486, f1: 0.8081, edges-ner-ontonotes_loss: 0.0627
09/16 03:36:00 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:36:00 PM: Best result seen so far for micro.
09/16 03:36:00 PM: Best result seen so far for macro.
09/16 03:36:00 PM: Updating LR scheduler:
09/16 03:36:00 PM: 	Best result seen so far for macro_avg: 0.821
09/16 03:36:00 PM: 	# validation passes without improvement: 0
09/16 03:36:00 PM: edges-ner-ontonotes_loss: training: 0.096985 validation: 0.058318
09/16 03:36:00 PM: macro_avg: validation: 0.820794
09/16 03:36:00 PM: micro_avg: validation: 0.000000
09/16 03:36:00 PM: edges-ner-ontonotes_mcc: training: 0.697036 validation: 0.813405
09/16 03:36:00 PM: edges-ner-ontonotes_acc: training: 0.626638 validation: 0.744389
09/16 03:36:00 PM: edges-ner-ontonotes_precision: training: 0.782042 validation: 0.884538
09/16 03:36:00 PM: edges-ner-ontonotes_recall: training: 0.648597 validation: 0.765620
09/16 03:36:00 PM: edges-ner-ontonotes_f1: training: 0.709096 validation: 0.820794
09/16 03:36:00 PM: Global learning rate: 0.0001
09/16 03:36:00 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:36:09 PM: Update 1291: task edges-ner-ontonotes, batch 291 (1291): mcc: 0.8248, acc: 0.7584, precision: 0.8885, recall: 0.7825, f1: 0.8321, edges-ner-ontonotes_loss: 0.0510
09/16 03:36:19 PM: Update 1637: task edges-ner-ontonotes, batch 637 (1637): mcc: 0.8220, acc: 0.7577, precision: 0.8900, recall: 0.7761, f1: 0.8292, edges-ner-ontonotes_loss: 0.0541
09/16 03:36:28 PM: ***** Step 2000 / Validation 2 *****
09/16 03:36:28 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:36:28 PM: Validating...
09/16 03:36:29 PM: Evaluate: task edges-ner-ontonotes, batch 61 (157): mcc: 0.8536, acc: 0.8070, precision: 0.9110, recall: 0.8142, f1: 0.8599, edges-ner-ontonotes_loss: 0.0476
09/16 03:36:31 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:36:31 PM: Best result seen so far for macro.
09/16 03:36:31 PM: Updating LR scheduler:
09/16 03:36:31 PM: 	Best result seen so far for macro_avg: 0.843
09/16 03:36:31 PM: 	# validation passes without improvement: 0
09/16 03:36:31 PM: edges-ner-ontonotes_loss: training: 0.050785 validation: 0.049441
09/16 03:36:31 PM: macro_avg: validation: 0.843161
09/16 03:36:31 PM: micro_avg: validation: 0.000000
09/16 03:36:31 PM: edges-ner-ontonotes_mcc: training: 0.832060 validation: 0.836067
09/16 03:36:31 PM: edges-ner-ontonotes_acc: training: 0.772953 validation: 0.784046
09/16 03:36:31 PM: edges-ner-ontonotes_precision: training: 0.895943 validation: 0.895078
09/16 03:36:31 PM: edges-ner-ontonotes_recall: training: 0.788905 validation: 0.796937
09/16 03:36:31 PM: edges-ner-ontonotes_f1: training: 0.839024 validation: 0.843161
09/16 03:36:31 PM: Global learning rate: 0.0001
09/16 03:36:31 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:36:39 PM: Update 2259: task edges-ner-ontonotes, batch 259 (2259): mcc: 0.8522, acc: 0.8013, precision: 0.9032, recall: 0.8188, f1: 0.8589, edges-ner-ontonotes_loss: 0.0429
09/16 03:36:49 PM: Update 2597: task edges-ner-ontonotes, batch 597 (2597): mcc: 0.8521, acc: 0.7993, precision: 0.8991, recall: 0.8225, f1: 0.8591, edges-ner-ontonotes_loss: 0.0423
09/16 03:36:59 PM: Update 2987: task edges-ner-ontonotes, batch 987 (2987): mcc: 0.8504, acc: 0.7974, precision: 0.8983, recall: 0.8201, f1: 0.8574, edges-ner-ontonotes_loss: 0.0437
09/16 03:36:59 PM: ***** Step 3000 / Validation 3 *****
09/16 03:36:59 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:37:01 PM: Validating...
09/16 03:37:05 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:37:05 PM: Best result seen so far for macro.
09/16 03:37:05 PM: Updating LR scheduler:
09/16 03:37:05 PM: 	Best result seen so far for macro_avg: 0.851
09/16 03:37:05 PM: 	# validation passes without improvement: 0
09/16 03:37:05 PM: edges-ner-ontonotes_loss: training: 0.043736 validation: 0.047362
09/16 03:37:05 PM: macro_avg: validation: 0.851369
09/16 03:37:05 PM: micro_avg: validation: 0.000000
09/16 03:37:05 PM: edges-ner-ontonotes_mcc: training: 0.850473 validation: 0.844338
09/16 03:37:05 PM: edges-ner-ontonotes_acc: training: 0.797406 validation: 0.796254
09/16 03:37:05 PM: edges-ner-ontonotes_precision: training: 0.898358 validation: 0.897404
09/16 03:37:05 PM: edges-ner-ontonotes_recall: training: 0.820145 validation: 0.809827
09/16 03:37:05 PM: edges-ner-ontonotes_f1: training: 0.857472 validation: 0.851369
09/16 03:37:05 PM: Global learning rate: 0.0001
09/16 03:37:05 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:37:09 PM: Update 3113: task edges-ner-ontonotes, batch 113 (3113): mcc: 0.8368, acc: 0.7828, precision: 0.8940, recall: 0.7992, f1: 0.8439, edges-ner-ontonotes_loss: 0.0515
09/16 03:37:19 PM: Update 3495: task edges-ner-ontonotes, batch 495 (3495): mcc: 0.8619, acc: 0.8178, precision: 0.9086, recall: 0.8315, f1: 0.8683, edges-ner-ontonotes_loss: 0.0424
09/16 03:37:29 PM: Update 3861: task edges-ner-ontonotes, batch 861 (3861): mcc: 0.8634, acc: 0.8185, precision: 0.9075, recall: 0.8354, f1: 0.8699, edges-ner-ontonotes_loss: 0.0413
09/16 03:37:32 PM: ***** Step 4000 / Validation 4 *****
09/16 03:37:32 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:37:32 PM: Validating...
09/16 03:37:36 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:37:36 PM: Best result seen so far for macro.
09/16 03:37:36 PM: Updating LR scheduler:
09/16 03:37:36 PM: 	Best result seen so far for macro_avg: 0.860
09/16 03:37:36 PM: 	# validation passes without improvement: 0
09/16 03:37:36 PM: edges-ner-ontonotes_loss: training: 0.040661 validation: 0.045522
09/16 03:37:36 PM: macro_avg: validation: 0.860154
09/16 03:37:36 PM: micro_avg: validation: 0.000000
09/16 03:37:36 PM: edges-ner-ontonotes_mcc: training: 0.864227 validation: 0.853089
09/16 03:37:36 PM: edges-ner-ontonotes_acc: training: 0.818876 validation: 0.811723
09/16 03:37:36 PM: edges-ner-ontonotes_precision: training: 0.907330 validation: 0.897012
09/16 03:37:36 PM: edges-ner-ontonotes_recall: training: 0.836953 validation: 0.826206
09/16 03:37:36 PM: edges-ner-ontonotes_f1: training: 0.870722 validation: 0.860154
09/16 03:37:36 PM: Global learning rate: 0.0001
09/16 03:37:36 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:37:39 PM: Update 4055: task edges-ner-ontonotes, batch 55 (4055): mcc: 0.8603, acc: 0.8124, precision: 0.8940, recall: 0.8423, f1: 0.8674, edges-ner-ontonotes_loss: 0.0376
09/16 03:37:49 PM: Update 4429: task edges-ner-ontonotes, batch 429 (4429): mcc: 0.8634, acc: 0.8158, precision: 0.9014, recall: 0.8410, f1: 0.8702, edges-ner-ontonotes_loss: 0.0391
09/16 03:37:59 PM: Update 4821: task edges-ner-ontonotes, batch 821 (4821): mcc: 0.8613, acc: 0.8147, precision: 0.9027, recall: 0.8359, f1: 0.8680, edges-ner-ontonotes_loss: 0.0420
09/16 03:38:04 PM: ***** Step 5000 / Validation 5 *****
09/16 03:38:04 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:38:08 PM: Validating...
09/16 03:38:09 PM: Evaluate: task edges-ner-ontonotes, batch 74 (157): mcc: 0.8568, acc: 0.8124, precision: 0.9090, recall: 0.8219, f1: 0.8632, edges-ner-ontonotes_loss: 0.0452
09/16 03:38:11 PM: Updating LR scheduler:
09/16 03:38:11 PM: 	Best result seen so far for macro_avg: 0.860
09/16 03:38:11 PM: 	# validation passes without improvement: 1
09/16 03:38:11 PM: edges-ner-ontonotes_loss: training: 0.041071 validation: 0.044466
09/16 03:38:11 PM: macro_avg: validation: 0.852493
09/16 03:38:11 PM: micro_avg: validation: 0.000000
09/16 03:38:11 PM: edges-ner-ontonotes_mcc: training: 0.864055 validation: 0.845427
09/16 03:38:11 PM: edges-ner-ontonotes_acc: training: 0.818592 validation: 0.802699
09/16 03:38:11 PM: edges-ner-ontonotes_precision: training: 0.905092 validation: 0.896927
09/16 03:38:11 PM: edges-ner-ontonotes_recall: training: 0.838750 validation: 0.812254
09/16 03:38:11 PM: edges-ner-ontonotes_f1: training: 0.870659 validation: 0.852493
09/16 03:38:11 PM: Global learning rate: 0.0001
09/16 03:38:11 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:38:19 PM: Update 5297: task edges-ner-ontonotes, batch 297 (5297): mcc: 0.8716, acc: 0.8302, precision: 0.9106, recall: 0.8474, f1: 0.8778, edges-ner-ontonotes_loss: 0.0379
09/16 03:38:29 PM: Update 5665: task edges-ner-ontonotes, batch 665 (5665): mcc: 0.8685, acc: 0.8233, precision: 0.9047, recall: 0.8473, f1: 0.8751, edges-ner-ontonotes_loss: 0.0375
09/16 03:38:38 PM: ***** Step 6000 / Validation 6 *****
09/16 03:38:40 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:38:40 PM: Validating...
09/16 03:38:40 PM: Evaluate: task edges-ner-ontonotes, batch 1 (157): mcc: 0.7570, acc: 0.7377, precision: 0.7705, recall: 0.7705, f1: 0.7705, edges-ner-ontonotes_loss: 0.0821
09/16 03:38:43 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:38:43 PM: Best result seen so far for macro.
09/16 03:38:45 PM: Updating LR scheduler:
09/16 03:38:45 PM: 	Best result seen so far for macro_avg: 0.860
09/16 03:38:45 PM: 	# validation passes without improvement: 2
09/16 03:38:45 PM: edges-ner-ontonotes_loss: training: 0.038059 validation: 0.044678
09/16 03:38:45 PM: macro_avg: validation: 0.860247
09/16 03:38:45 PM: micro_avg: validation: 0.000000
09/16 03:38:45 PM: edges-ner-ontonotes_mcc: training: 0.868119 validation: 0.853434
09/16 03:38:45 PM: edges-ner-ontonotes_acc: training: 0.821950 validation: 0.813467
09/16 03:38:45 PM: edges-ner-ontonotes_precision: training: 0.904684 validation: 0.901729
09/16 03:38:45 PM: edges-ner-ontonotes_recall: training: 0.846638 validation: 0.822414
09/16 03:38:45 PM: edges-ner-ontonotes_f1: training: 0.874699 validation: 0.860247
09/16 03:38:45 PM: Global learning rate: 0.0001
09/16 03:38:45 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:38:50 PM: Update 6223: task edges-ner-ontonotes, batch 223 (6223): mcc: 0.8509, acc: 0.8055, precision: 0.8966, recall: 0.8227, f1: 0.8580, edges-ner-ontonotes_loss: 0.0473
09/16 03:39:00 PM: Update 6544: task edges-ner-ontonotes, batch 544 (6544): mcc: 0.8700, acc: 0.8295, precision: 0.9093, recall: 0.8457, f1: 0.8763, edges-ner-ontonotes_loss: 0.0405
09/16 03:39:10 PM: Update 6890: task edges-ner-ontonotes, batch 890 (6890): mcc: 0.8718, acc: 0.8309, precision: 0.9098, recall: 0.8486, f1: 0.8781, edges-ner-ontonotes_loss: 0.0392
09/16 03:39:13 PM: ***** Step 7000 / Validation 7 *****
09/16 03:39:13 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:39:13 PM: Validating...
09/16 03:39:16 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:39:19 PM: Best result seen so far for macro.
09/16 03:39:19 PM: Updating LR scheduler:
09/16 03:39:19 PM: 	Best result seen so far for macro_avg: 0.862
09/16 03:39:19 PM: 	# validation passes without improvement: 0
09/16 03:39:19 PM: edges-ner-ontonotes_loss: training: 0.038913 validation: 0.044095
09/16 03:39:19 PM: macro_avg: validation: 0.862140
09/16 03:39:19 PM: micro_avg: validation: 0.000000
09/16 03:39:19 PM: edges-ner-ontonotes_mcc: training: 0.871546 validation: 0.854799
09/16 03:39:19 PM: edges-ner-ontonotes_acc: training: 0.829848 validation: 0.815438
09/16 03:39:19 PM: edges-ner-ontonotes_precision: training: 0.908682 validation: 0.890758
09/16 03:39:19 PM: edges-ner-ontonotes_recall: training: 0.849159 validation: 0.835305
09/16 03:39:19 PM: edges-ner-ontonotes_f1: training: 0.877913 validation: 0.862140
09/16 03:39:19 PM: Global learning rate: 0.0001
09/16 03:39:19 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:39:20 PM: Update 7063: task edges-ner-ontonotes, batch 63 (7063): mcc: 0.8717, acc: 0.8248, precision: 0.9003, recall: 0.8575, f1: 0.8784, edges-ner-ontonotes_loss: 0.0356
09/16 03:39:30 PM: Update 7462: task edges-ner-ontonotes, batch 462 (7462): mcc: 0.8731, acc: 0.8277, precision: 0.9048, recall: 0.8558, f1: 0.8796, edges-ner-ontonotes_loss: 0.0355
09/16 03:39:41 PM: Update 7781: task edges-ner-ontonotes, batch 781 (7781): mcc: 0.8656, acc: 0.8191, precision: 0.9020, recall: 0.8445, f1: 0.8723, edges-ner-ontonotes_loss: 0.0400
09/16 03:39:45 PM: ***** Step 8000 / Validation 8 *****
09/16 03:39:45 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:39:45 PM: Validating...
09/16 03:39:48 PM: Updating LR scheduler:
09/16 03:39:48 PM: 	Best result seen so far for macro_avg: 0.862
09/16 03:39:48 PM: 	# validation passes without improvement: 1
09/16 03:39:48 PM: edges-ner-ontonotes_loss: training: 0.038789 validation: 0.044990
09/16 03:39:48 PM: macro_avg: validation: 0.855353
09/16 03:39:48 PM: micro_avg: validation: 0.000000
09/16 03:39:48 PM: edges-ner-ontonotes_mcc: training: 0.869743 validation: 0.848250
09/16 03:39:48 PM: edges-ner-ontonotes_acc: training: 0.825350 validation: 0.808538
09/16 03:39:48 PM: edges-ner-ontonotes_precision: training: 0.905257 validation: 0.896443
09/16 03:39:48 PM: edges-ner-ontonotes_recall: training: 0.849093 validation: 0.817865
09/16 03:39:48 PM: edges-ner-ontonotes_f1: training: 0.876276 validation: 0.855353
09/16 03:39:48 PM: Global learning rate: 0.0001
09/16 03:39:48 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:39:52 PM: Update 8094: task edges-ner-ontonotes, batch 94 (8094): mcc: 0.8901, acc: 0.8545, precision: 0.9189, recall: 0.8738, f1: 0.8958, edges-ner-ontonotes_loss: 0.0334
09/16 03:40:02 PM: Update 8485: task edges-ner-ontonotes, batch 485 (8485): mcc: 0.8767, acc: 0.8352, precision: 0.9109, recall: 0.8565, f1: 0.8829, edges-ner-ontonotes_loss: 0.0361
09/16 03:40:12 PM: Update 8898: task edges-ner-ontonotes, batch 898 (8898): mcc: 0.8766, acc: 0.8334, precision: 0.9090, recall: 0.8582, f1: 0.8829, edges-ner-ontonotes_loss: 0.0353
09/16 03:40:14 PM: ***** Step 9000 / Validation 9 *****
09/16 03:40:17 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:40:17 PM: Validating...
09/16 03:40:21 PM: Best result seen so far for edges-ner-ontonotes.
09/16 03:40:23 PM: Best result seen so far for macro.
09/16 03:40:23 PM: Updating LR scheduler:
09/16 03:40:23 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:40:23 PM: 	# validation passes without improvement: 0
09/16 03:40:23 PM: edges-ner-ontonotes_loss: training: 0.035317 validation: 0.043876
09/16 03:40:23 PM: macro_avg: validation: 0.869207
09/16 03:40:23 PM: micro_avg: validation: 0.000000
09/16 03:40:23 PM: edges-ner-ontonotes_mcc: training: 0.876193 validation: 0.862389
09/16 03:40:23 PM: edges-ner-ontonotes_acc: training: 0.832688 validation: 0.821580
09/16 03:40:23 PM: edges-ner-ontonotes_precision: training: 0.908377 validation: 0.900773
09/16 03:40:23 PM: edges-ner-ontonotes_recall: training: 0.858055 validation: 0.839779
09/16 03:40:23 PM: edges-ner-ontonotes_f1: training: 0.882499 validation: 0.869207
09/16 03:40:23 PM: Global learning rate: 0.0001
09/16 03:40:23 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:40:24 PM: Update 9001: task edges-ner-ontonotes, batch 1 (9001): mcc: 0.8866, acc: 0.8358, precision: 0.9206, recall: 0.8657, f1: 0.8923, edges-ner-ontonotes_loss: 0.0354
09/16 03:40:34 PM: Update 9337: task edges-ner-ontonotes, batch 337 (9337): mcc: 0.8558, acc: 0.8088, precision: 0.8966, recall: 0.8316, f1: 0.8629, edges-ner-ontonotes_loss: 0.0454
09/16 03:40:46 PM: Update 9738: task edges-ner-ontonotes, batch 738 (9738): mcc: 0.8713, acc: 0.8295, precision: 0.9081, recall: 0.8493, f1: 0.8777, edges-ner-ontonotes_loss: 0.0396
09/16 03:40:54 PM: ***** Step 10000 / Validation 10 *****
09/16 03:40:54 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:40:54 PM: Validating...
09/16 03:40:56 PM: Evaluate: task edges-ner-ontonotes, batch 127 (157): mcc: 0.8488, acc: 0.8102, precision: 0.8868, recall: 0.8279, f1: 0.8563, edges-ner-ontonotes_loss: 0.0456
09/16 03:40:57 PM: Updating LR scheduler:
09/16 03:40:57 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:40:57 PM: 	# validation passes without improvement: 1
09/16 03:40:57 PM: edges-ner-ontonotes_loss: training: 0.038438 validation: 0.043686
09/16 03:40:57 PM: macro_avg: validation: 0.862103
09/16 03:40:57 PM: micro_avg: validation: 0.000000
09/16 03:40:57 PM: edges-ner-ontonotes_mcc: training: 0.874024 validation: 0.854817
09/16 03:40:57 PM: edges-ner-ontonotes_acc: training: 0.832712 validation: 0.817106
09/16 03:40:57 PM: edges-ner-ontonotes_precision: training: 0.909323 validation: 0.892061
09/16 03:40:57 PM: edges-ner-ontonotes_recall: training: 0.853129 validation: 0.834092
09/16 03:40:57 PM: edges-ner-ontonotes_f1: training: 0.880330 validation: 0.862103
09/16 03:40:57 PM: Global learning rate: 0.0001
09/16 03:40:57 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:41:06 PM: Update 10329: task edges-ner-ontonotes, batch 329 (10329): mcc: 0.8722, acc: 0.8272, precision: 0.9009, recall: 0.8579, f1: 0.8789, edges-ner-ontonotes_loss: 0.0350
09/16 03:41:16 PM: Update 10726: task edges-ner-ontonotes, batch 726 (10726): mcc: 0.8693, acc: 0.8234, precision: 0.9010, recall: 0.8523, f1: 0.8760, edges-ner-ontonotes_loss: 0.0372
09/16 03:41:24 PM: ***** Step 11000 / Validation 11 *****
09/16 03:41:24 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:41:24 PM: Validating...
09/16 03:41:26 PM: Evaluate: task edges-ner-ontonotes, batch 127 (157): mcc: 0.8472, acc: 0.8078, precision: 0.8952, recall: 0.8170, f1: 0.8543, edges-ner-ontonotes_loss: 0.0455
09/16 03:41:27 PM: Updating LR scheduler:
09/16 03:41:27 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:41:27 PM: 	# validation passes without improvement: 2
09/16 03:41:27 PM: edges-ner-ontonotes_loss: training: 0.038278 validation: 0.044012
09/16 03:41:27 PM: macro_avg: validation: 0.858809
09/16 03:41:27 PM: micro_avg: validation: 0.000000
09/16 03:41:27 PM: edges-ner-ontonotes_mcc: training: 0.869694 validation: 0.851933
09/16 03:41:27 PM: edges-ner-ontonotes_acc: training: 0.825068 validation: 0.811799
09/16 03:41:27 PM: edges-ner-ontonotes_precision: training: 0.902376 validation: 0.900574
09/16 03:41:27 PM: edges-ner-ontonotes_recall: training: 0.851769 validation: 0.820746
09/16 03:41:27 PM: edges-ner-ontonotes_f1: training: 0.876342 validation: 0.858809
09/16 03:41:27 PM: Global learning rate: 0.0001
09/16 03:41:27 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:41:36 PM: Update 11376: task edges-ner-ontonotes, batch 376 (11376): mcc: 0.8831, acc: 0.8456, precision: 0.9157, recall: 0.8639, f1: 0.8890, edges-ner-ontonotes_loss: 0.0339
09/16 03:41:46 PM: Update 11732: task edges-ner-ontonotes, batch 732 (11732): mcc: 0.8805, acc: 0.8405, precision: 0.9118, recall: 0.8628, f1: 0.8866, edges-ner-ontonotes_loss: 0.0345
09/16 03:41:53 PM: ***** Step 12000 / Validation 12 *****
09/16 03:41:53 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:41:53 PM: Validating...
09/16 03:41:56 PM: Evaluate: task edges-ner-ontonotes, batch 125 (157): mcc: 0.8547, acc: 0.8151, precision: 0.8939, recall: 0.8321, f1: 0.8619, edges-ner-ontonotes_loss: 0.0465
09/16 03:41:57 PM: Updating LR scheduler:
09/16 03:41:57 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:41:57 PM: 	# validation passes without improvement: 3
09/16 03:41:57 PM: edges-ner-ontonotes_loss: training: 0.034390 validation: 0.043603
09/16 03:41:57 PM: macro_avg: validation: 0.868491
09/16 03:41:57 PM: micro_avg: validation: 0.000000
09/16 03:41:57 PM: edges-ner-ontonotes_mcc: training: 0.879038 validation: 0.861597
09/16 03:41:57 PM: edges-ner-ontonotes_acc: training: 0.837796 validation: 0.822414
09/16 03:41:57 PM: edges-ner-ontonotes_precision: training: 0.909509 validation: 0.899237
09/16 03:41:57 PM: edges-ner-ontonotes_recall: training: 0.862247 validation: 0.839779
09/16 03:41:57 PM: edges-ner-ontonotes_f1: training: 0.885248 validation: 0.868491
09/16 03:41:57 PM: Global learning rate: 0.0001
09/16 03:41:57 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:42:06 PM: Update 12366: task edges-ner-ontonotes, batch 366 (12366): mcc: 0.8648, acc: 0.8193, precision: 0.9001, recall: 0.8448, f1: 0.8716, edges-ner-ontonotes_loss: 0.0410
09/16 03:42:17 PM: Update 12762: task edges-ner-ontonotes, batch 762 (12762): mcc: 0.8741, acc: 0.8326, precision: 0.9073, recall: 0.8551, f1: 0.8804, edges-ner-ontonotes_loss: 0.0381
09/16 03:42:24 PM: ***** Step 13000 / Validation 13 *****
09/16 03:42:26 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:42:26 PM: Validating...
09/16 03:42:27 PM: Evaluate: task edges-ner-ontonotes, batch 56 (157): mcc: 0.8761, acc: 0.8494, precision: 0.9057, recall: 0.8606, f1: 0.8825, edges-ner-ontonotes_loss: 0.0410
09/16 03:42:30 PM: Updating LR scheduler:
09/16 03:42:30 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:42:30 PM: 	# validation passes without improvement: 0
09/16 03:42:30 PM: edges-ner-ontonotes_loss: training: 0.037562 validation: 0.043099
09/16 03:42:30 PM: macro_avg: validation: 0.865515
09/16 03:42:30 PM: micro_avg: validation: 0.000000
09/16 03:42:30 PM: edges-ner-ontonotes_mcc: training: 0.874715 validation: 0.858412
09/16 03:42:30 PM: edges-ner-ontonotes_acc: training: 0.833606 validation: 0.823400
09/16 03:42:30 PM: edges-ner-ontonotes_precision: training: 0.907522 validation: 0.895291
09/16 03:42:30 PM: edges-ner-ontonotes_recall: training: 0.856135 validation: 0.837655
09/16 03:42:30 PM: edges-ner-ontonotes_f1: training: 0.881080 validation: 0.865515
09/16 03:42:30 PM: Global learning rate: 5e-05
09/16 03:42:30 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:42:37 PM: Update 13235: task edges-ner-ontonotes, batch 235 (13235): mcc: 0.8767, acc: 0.8351, precision: 0.9064, recall: 0.8610, f1: 0.8831, edges-ner-ontonotes_loss: 0.0346
09/16 03:42:47 PM: Update 13588: task edges-ner-ontonotes, batch 588 (13588): mcc: 0.8741, acc: 0.8295, precision: 0.9029, recall: 0.8594, f1: 0.8807, edges-ner-ontonotes_loss: 0.0350
09/16 03:42:57 PM: Update 13962: task edges-ner-ontonotes, batch 962 (13962): mcc: 0.8694, acc: 0.8241, precision: 0.9012, recall: 0.8524, f1: 0.8761, edges-ner-ontonotes_loss: 0.0377
09/16 03:42:58 PM: ***** Step 14000 / Validation 14 *****
09/16 03:42:58 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:42:58 PM: Validating...
09/16 03:43:02 PM: Updating LR scheduler:
09/16 03:43:02 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:43:02 PM: 	# validation passes without improvement: 1
09/16 03:43:02 PM: edges-ner-ontonotes_loss: training: 0.037810 validation: 0.043611
09/16 03:43:02 PM: macro_avg: validation: 0.863051
09/16 03:43:02 PM: micro_avg: validation: 0.000000
09/16 03:43:02 PM: edges-ner-ontonotes_mcc: training: 0.869306 validation: 0.856233
09/16 03:43:02 PM: edges-ner-ontonotes_acc: training: 0.824027 validation: 0.818850
09/16 03:43:02 PM: edges-ner-ontonotes_precision: training: 0.901358 validation: 0.901619
09/16 03:43:02 PM: edges-ner-ontonotes_recall: training: 0.852027 validation: 0.827646
09/16 03:43:02 PM: edges-ner-ontonotes_f1: training: 0.875999 validation: 0.863051
09/16 03:43:02 PM: Global learning rate: 5e-05
09/16 03:43:02 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:43:07 PM: Update 14146: task edges-ner-ontonotes, batch 146 (14146): mcc: 0.8924, acc: 0.8565, precision: 0.9207, recall: 0.8764, f1: 0.8980, edges-ner-ontonotes_loss: 0.0337
09/16 03:43:17 PM: Update 14485: task edges-ner-ontonotes, batch 485 (14485): mcc: 0.8896, acc: 0.8535, precision: 0.9187, recall: 0.8731, f1: 0.8953, edges-ner-ontonotes_loss: 0.0334
09/16 03:43:27 PM: Update 14820: task edges-ner-ontonotes, batch 820 (14820): mcc: 0.8853, acc: 0.8467, precision: 0.9146, recall: 0.8691, f1: 0.8912, edges-ner-ontonotes_loss: 0.0336
09/16 03:43:34 PM: ***** Step 15000 / Validation 15 *****
09/16 03:43:37 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:43:37 PM: Validating...
09/16 03:43:37 PM: Evaluate: task edges-ner-ontonotes, batch 20 (157): mcc: 0.8074, acc: 0.7694, precision: 0.8536, recall: 0.7832, f1: 0.8169, edges-ner-ontonotes_loss: 0.0574
09/16 03:43:40 PM: Updating LR scheduler:
09/16 03:43:40 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:43:40 PM: 	# validation passes without improvement: 2
09/16 03:43:40 PM: edges-ner-ontonotes_loss: training: 0.033686 validation: 0.043279
09/16 03:43:40 PM: macro_avg: validation: 0.868059
09/16 03:43:40 PM: micro_avg: validation: 0.000000
09/16 03:43:40 PM: edges-ner-ontonotes_mcc: training: 0.883451 validation: 0.861031
09/16 03:43:40 PM: edges-ner-ontonotes_acc: training: 0.843433 validation: 0.822414
09/16 03:43:40 PM: edges-ner-ontonotes_precision: training: 0.912678 validation: 0.896237
09/16 03:43:40 PM: edges-ner-ontonotes_recall: training: 0.867391 validation: 0.841598
09/16 03:43:40 PM: edges-ner-ontonotes_f1: training: 0.889459 validation: 0.868059
09/16 03:43:40 PM: Global learning rate: 5e-05
09/16 03:43:40 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:43:48 PM: Update 15261: task edges-ner-ontonotes, batch 261 (15261): mcc: 0.8745, acc: 0.8294, precision: 0.9032, recall: 0.8599, f1: 0.8810, edges-ner-ontonotes_loss: 0.0346
09/16 03:43:58 PM: Update 15623: task edges-ner-ontonotes, batch 623 (15623): mcc: 0.8683, acc: 0.8238, precision: 0.9015, recall: 0.8500, f1: 0.8750, edges-ner-ontonotes_loss: 0.0394
09/16 03:44:07 PM: ***** Step 16000 / Validation 16 *****
09/16 03:44:07 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:44:07 PM: Validating...
09/16 03:44:08 PM: Evaluate: task edges-ner-ontonotes, batch 22 (157): mcc: 0.8262, acc: 0.7881, precision: 0.8693, recall: 0.8030, f1: 0.8348, edges-ner-ontonotes_loss: 0.0515
09/16 03:44:10 PM: Updating LR scheduler:
09/16 03:44:10 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:44:10 PM: 	# validation passes without improvement: 3
09/16 03:44:10 PM: edges-ner-ontonotes_loss: training: 0.036793 validation: 0.042648
09/16 03:44:10 PM: macro_avg: validation: 0.865682
09/16 03:44:10 PM: micro_avg: validation: 0.000000
09/16 03:44:10 PM: edges-ner-ontonotes_mcc: training: 0.877018 validation: 0.858819
09/16 03:44:10 PM: edges-ner-ontonotes_acc: training: 0.836225 validation: 0.823628
09/16 03:44:10 PM: edges-ner-ontonotes_precision: training: 0.908666 validation: 0.900467
09/16 03:44:10 PM: edges-ner-ontonotes_recall: training: 0.859309 validation: 0.833485
09/16 03:44:10 PM: edges-ner-ontonotes_f1: training: 0.883298 validation: 0.865682
09/16 03:44:10 PM: Global learning rate: 5e-05
09/16 03:44:10 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:44:18 PM: Update 16212: task edges-ner-ontonotes, batch 212 (16212): mcc: 0.8785, acc: 0.8393, precision: 0.9099, recall: 0.8608, f1: 0.8847, edges-ner-ontonotes_loss: 0.0354
09/16 03:44:28 PM: Update 16613: task edges-ner-ontonotes, batch 613 (16613): mcc: 0.8779, acc: 0.8350, precision: 0.9065, recall: 0.8630, f1: 0.8842, edges-ner-ontonotes_loss: 0.0344
09/16 03:44:38 PM: Update 16988: task edges-ner-ontonotes, batch 988 (16988): mcc: 0.8739, acc: 0.8297, precision: 0.9041, recall: 0.8579, f1: 0.8804, edges-ner-ontonotes_loss: 0.0363
09/16 03:44:38 PM: ***** Step 17000 / Validation 17 *****
09/16 03:44:38 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:44:38 PM: Validating...
09/16 03:44:41 PM: Updating LR scheduler:
09/16 03:44:42 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:44:42 PM: 	# validation passes without improvement: 0
09/16 03:44:42 PM: edges-ner-ontonotes_loss: training: 0.036312 validation: 0.043475
09/16 03:44:42 PM: macro_avg: validation: 0.861078
09/16 03:44:42 PM: micro_avg: validation: 0.000000
09/16 03:44:42 PM: edges-ner-ontonotes_mcc: training: 0.873876 validation: 0.854060
09/16 03:44:42 PM: edges-ner-ontonotes_acc: training: 0.829623 validation: 0.818623
09/16 03:44:42 PM: edges-ner-ontonotes_precision: training: 0.904224 validation: 0.897860
09/16 03:44:42 PM: edges-ner-ontonotes_recall: training: 0.857755 validation: 0.827191
09/16 03:44:42 PM: edges-ner-ontonotes_f1: training: 0.880377 validation: 0.861078
09/16 03:44:42 PM: Global learning rate: 2.5e-05
09/16 03:44:42 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:44:48 PM: Update 17165: task edges-ner-ontonotes, batch 165 (17165): mcc: 0.8710, acc: 0.8267, precision: 0.9077, recall: 0.8491, f1: 0.8774, edges-ner-ontonotes_loss: 0.0403
09/16 03:44:58 PM: Update 17553: task edges-ner-ontonotes, batch 553 (17553): mcc: 0.8842, acc: 0.8463, precision: 0.9155, recall: 0.8660, f1: 0.8901, edges-ner-ontonotes_loss: 0.0354
09/16 03:45:08 PM: Update 17937: task edges-ner-ontonotes, batch 937 (17937): mcc: 0.8811, acc: 0.8418, precision: 0.9116, recall: 0.8640, f1: 0.8872, edges-ner-ontonotes_loss: 0.0350
09/16 03:45:09 PM: ***** Step 18000 / Validation 18 *****
09/16 03:45:09 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:45:09 PM: Validating...
09/16 03:45:12 PM: Updating LR scheduler:
09/16 03:45:12 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:45:12 PM: 	# validation passes without improvement: 1
09/16 03:45:12 PM: edges-ner-ontonotes_loss: training: 0.034713 validation: 0.042813
09/16 03:45:12 PM: macro_avg: validation: 0.866674
09/16 03:45:12 PM: micro_avg: validation: 0.000000
09/16 03:45:12 PM: edges-ner-ontonotes_mcc: training: 0.881406 validation: 0.859526
09/16 03:45:12 PM: edges-ner-ontonotes_acc: training: 0.841949 validation: 0.820215
09/16 03:45:12 PM: edges-ner-ontonotes_precision: training: 0.911711 validation: 0.893804
09/16 03:45:12 PM: edges-ner-ontonotes_recall: training: 0.864524 validation: 0.841143
09/16 03:45:12 PM: edges-ner-ontonotes_f1: training: 0.887491 validation: 0.866674
09/16 03:45:12 PM: Global learning rate: 2.5e-05
09/16 03:45:12 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:45:18 PM: Update 18187: task edges-ner-ontonotes, batch 187 (18187): mcc: 0.8761, acc: 0.8291, precision: 0.9053, recall: 0.8608, f1: 0.8825, edges-ner-ontonotes_loss: 0.0337
09/16 03:45:28 PM: Update 18557: task edges-ner-ontonotes, batch 557 (18557): mcc: 0.8693, acc: 0.8227, precision: 0.9012, recall: 0.8521, f1: 0.8760, edges-ner-ontonotes_loss: 0.0377
09/16 03:45:38 PM: Update 18977: task edges-ner-ontonotes, batch 977 (18977): mcc: 0.8757, acc: 0.8330, precision: 0.9072, recall: 0.8583, f1: 0.8821, edges-ner-ontonotes_loss: 0.0365
09/16 03:45:40 PM: ***** Step 19000 / Validation 19 *****
09/16 03:45:40 PM: edges-ner-ontonotes: trained on 1000 batches, 0.644 epochs
09/16 03:45:40 PM: Validating...
09/16 03:45:43 PM: Updating LR scheduler:
09/16 03:45:43 PM: 	Best result seen so far for macro_avg: 0.869
09/16 03:45:43 PM: 	# validation passes without improvement: 2
09/16 03:45:43 PM: Ran out of early stopping patience. Stopping training.
09/16 03:45:43 PM: edges-ner-ontonotes_loss: training: 0.036432 validation: 0.042887
09/16 03:45:43 PM: macro_avg: validation: 0.862210
09/16 03:45:43 PM: micro_avg: validation: 0.000000
09/16 03:45:43 PM: edges-ner-ontonotes_mcc: training: 0.875712 validation: 0.855532
09/16 03:45:43 PM: edges-ner-ontonotes_acc: training: 0.833182 validation: 0.815742
09/16 03:45:43 PM: edges-ner-ontonotes_precision: training: 0.907157 validation: 0.904219
09/16 03:45:43 PM: edges-ner-ontonotes_recall: training: 0.858338 validation: 0.823931
09/16 03:45:43 PM: edges-ner-ontonotes_f1: training: 0.882072 validation: 0.862210
09/16 03:45:43 PM: Global learning rate: 2.5e-05
09/16 03:45:43 PM: Saving checkpoints to: ./experiments/ner-ontonotes-squad-only/run
09/16 03:45:43 PM: Stopped training after 19 validation checks
09/16 03:45:43 PM: Trained edges-ner-ontonotes for 19000 batches or 12.227 epochs
09/16 03:45:43 PM: ***** VALIDATION RESULTS *****
09/16 03:45:43 PM: edges-ner-ontonotes_f1 (for best val pass 9): edges-ner-ontonotes_loss: 0.04388, macro_avg: 0.86921, micro_avg: 0.00000, edges-ner-ontonotes_mcc: 0.86239, edges-ner-ontonotes_acc: 0.82158, edges-ner-ontonotes_precision: 0.90077, edges-ner-ontonotes_recall: 0.83978, edges-ner-ontonotes_f1: 0.86921
09/16 03:45:43 PM: micro_avg (for best val pass 1): edges-ner-ontonotes_loss: 0.05832, macro_avg: 0.82079, micro_avg: 0.00000, edges-ner-ontonotes_mcc: 0.81341, edges-ner-ontonotes_acc: 0.74439, edges-ner-ontonotes_precision: 0.88454, edges-ner-ontonotes_recall: 0.76562, edges-ner-ontonotes_f1: 0.82079
09/16 03:45:43 PM: macro_avg (for best val pass 9): edges-ner-ontonotes_loss: 0.04388, macro_avg: 0.86921, micro_avg: 0.00000, edges-ner-ontonotes_mcc: 0.86239, edges-ner-ontonotes_acc: 0.82158, edges-ner-ontonotes_precision: 0.90077, edges-ner-ontonotes_recall: 0.83978, edges-ner-ontonotes_f1: 0.86921
09/16 03:45:43 PM: Evaluating...
09/16 03:45:43 PM: Loaded model state from ./experiments/ner-ontonotes-squad-only/run/edges-ner-ontonotes/model_state_target_train_val_9.best.th
09/16 03:45:43 PM: Evaluating on: edges-ner-ontonotes, split: val
09/16 03:45:49 PM: Task 'edges-ner-ontonotes': sorting predictions by 'idx'
09/16 03:45:49 PM: Finished evaluating on: edges-ner-ontonotes
09/16 03:45:49 PM: Task 'edges-ner-ontonotes': joining predictions with input split 'val'
09/16 03:45:49 PM: Task 'edges-ner-ontonotes': Wrote predictions to ./experiments/ner-ontonotes-squad-only/run
09/16 03:45:49 PM: Wrote all preds for split 'val' to ./experiments/ner-ontonotes-squad-only/run
09/16 03:45:49 PM: Evaluating on: edges-ner-ontonotes, split: test
09/16 03:45:53 PM: Task 'edges-ner-ontonotes': sorting predictions by 'idx'
09/16 03:45:53 PM: Finished evaluating on: edges-ner-ontonotes
09/16 03:45:53 PM: Task 'edges-ner-ontonotes': joining predictions with input split 'test'
09/16 03:45:53 PM: Task 'edges-ner-ontonotes': Wrote predictions to ./experiments/ner-ontonotes-squad-only/run
09/16 03:45:53 PM: Wrote all preds for split 'test' to ./experiments/ner-ontonotes-squad-only/run
09/16 03:45:53 PM: Writing results for split 'val' to ./experiments/ner-ontonotes-squad-only/results.tsv
09/16 03:45:53 PM: micro_avg: 0.000, macro_avg: 0.870, edges-ner-ontonotes_mcc: 0.863, edges-ner-ontonotes_acc: 0.822, edges-ner-ontonotes_precision: 0.902, edges-ner-ontonotes_recall: 0.839, edges-ner-ontonotes_f1: 0.870
09/16 03:45:53 PM: Done!
09/16 03:45:53 PM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
