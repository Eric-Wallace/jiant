09/16 08:28:45 AM: Git branch: master
09/16 08:28:45 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:28:46 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-sst-cat/",
  "exp_name": "experiments/spr2-sst-cat",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-sst-cat/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/sst",
  "pytorch_transformers_output_mode": "cat",
  "remote_log_name": "experiments/spr2-sst-cat__run",
  "run_dir": "./experiments/spr2-sst-cat/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:28:46 AM: Saved config to ./experiments/spr2-sst-cat/run/params.conf
09/16 08:28:46 AM: Using random seed 1234
09/16 08:28:48 AM: Using GPU 0
09/16 08:28:48 AM: Loading tasks...
09/16 08:28:48 AM: Writing pre-preprocessed tasks to ./experiments/spr2-sst-cat/
09/16 08:28:48 AM: 	Creating task edges-spr2 from scratch.
09/16 08:28:48 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:28:48 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:28:48 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:28:48 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:28:48 AM: 	Finished loading tasks: edges-spr2.
09/16 08:28:48 AM: 	Building vocab from scratch.
09/16 08:28:48 AM: 	Counting units for task edges-spr2.
09/16 08:28:48 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:28:49 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:28:49 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:28:50 AM: 	Saved vocab to ./experiments/spr2-sst-cat/vocab
09/16 08:28:50 AM: Loading token dictionary from ./experiments/spr2-sst-cat/vocab.
09/16 08:28:50 AM: 	Loaded vocab from ./experiments/spr2-sst-cat/vocab
09/16 08:28:50 AM: 	Vocab namespace tokens: size 7943
09/16 08:28:50 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:28:50 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:28:50 AM: 	Vocab namespace chars: size 65
09/16 08:28:50 AM: 	Finished building vocab.
09/16 08:28:50 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:28:50 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-sst-cat/preproc/edges-spr2__train_data
09/16 08:28:50 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:28:50 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-sst-cat/preproc/edges-spr2__val_data
09/16 08:28:50 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:28:50 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-sst-cat/preproc/edges-spr2__test_data
09/16 08:28:50 AM: 	Finished indexing tasks
09/16 08:28:50 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:28:50 AM: 	  Training on 
09/16 08:28:50 AM: 	  Evaluating on edges-spr2
09/16 08:28:50 AM: 	Finished loading tasks in 2.645s
09/16 08:28:50 AM: 	 Tasks: ['edges-spr2']
09/16 08:28:50 AM: Building model...
09/16 08:28:50 AM: Using BERT model (bert-base-uncased).
09/16 08:28:50 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:28:50 AM: models/sst
09/16 08:28:50 AM: loading configuration file models/sst/config.json
09/16 08:28:50 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "sst-2",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:28:50 AM: loading weights file models/sst/pytorch_model.bin
09/16 08:29:02 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpixnwwqjn
09/16 08:29:04 AM: copying /tmp/tmpixnwwqjn to cache at ./experiments/spr2-sst-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:29:04 AM: creating metadata file for ./experiments/spr2-sst-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:29:04 AM: removing temp file /tmp/tmpixnwwqjn
09/16 08:29:04 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-sst-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:29:04 AM: Initializing parameters
09/16 08:29:04 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:29:04 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:29:09 AM: Model specification:
09/16 08:29:09 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:29:09 AM: Model parameters:
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:29:09 AM: Total number of parameters: 110537236 (1.10537e+08)
09/16 08:29:09 AM: Number of trainable parameters: 1054996 (1.055e+06)
09/16 08:29:09 AM: Finished building model in 18.766s
09/16 08:29:09 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:29:10 AM: patience = 9
09/16 08:29:10 AM: val_interval = 100
09/16 08:29:10 AM: max_vals = 100
09/16 08:29:10 AM: cuda_device = 0
09/16 08:29:10 AM: grad_norm = 5.0
09/16 08:29:10 AM: grad_clipping = None
09/16 08:29:10 AM: lr_decay = 0.99
09/16 08:29:10 AM: min_lr = 1e-06
09/16 08:29:10 AM: keep_all_checkpoints = 0
09/16 08:29:10 AM: val_data_limit = 5000
09/16 08:29:10 AM: max_epochs = -1
09/16 08:29:10 AM: dec_val_scale = 250
09/16 08:29:10 AM: training_data_fraction = 1
09/16 08:29:10 AM: type = adam
09/16 08:29:10 AM: parameter_groups = None
09/16 08:29:10 AM: Number of trainable parameters: 1054996
09/16 08:29:10 AM: infer_type_and_cast = True
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: lr = 0.0001
09/16 08:29:10 AM: amsgrad = True
09/16 08:29:10 AM: type = reduce_on_plateau
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: mode = max
09/16 08:29:10 AM: factor = 0.5
09/16 08:29:10 AM: patience = 3
09/16 08:29:10 AM: threshold = 0.0001
09/16 08:29:10 AM: threshold_mode = abs
09/16 08:29:10 AM: verbose = True
09/16 08:29:10 AM: type = adam
09/16 08:29:10 AM: parameter_groups = None
09/16 08:29:10 AM: Number of trainable parameters: 1054996
09/16 08:29:10 AM: infer_type_and_cast = True
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: lr = 0.0001
09/16 08:29:10 AM: amsgrad = True
09/16 08:29:10 AM: type = reduce_on_plateau
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: mode = max
09/16 08:29:10 AM: factor = 0.5
09/16 08:29:10 AM: patience = 3
09/16 08:29:10 AM: threshold = 0.0001
09/16 08:29:10 AM: threshold_mode = abs
09/16 08:29:10 AM: verbose = True
09/16 08:29:10 AM: Starting training without restoring from a checkpoint.
09/16 08:29:10 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:29:10 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:29:18 AM: ***** Step 100 / Validation 1 *****
09/16 08:29:18 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:18 AM: Validating...
09/16 08:29:19 AM: Best result seen so far for edges-spr2.
09/16 08:29:19 AM: Best result seen so far for micro.
09/16 08:29:19 AM: Best result seen so far for macro.
09/16 08:29:19 AM: Updating LR scheduler:
09/16 08:29:19 AM: 	Best result seen so far for macro_avg: 0.787
09/16 08:29:19 AM: 	# validation passes without improvement: 0
09/16 08:29:19 AM: edges-spr2_loss: training: 0.379578 validation: 0.347791
09/16 08:29:19 AM: macro_avg: validation: 0.787176
09/16 08:29:19 AM: micro_avg: validation: 0.000000
09/16 08:29:19 AM: edges-spr2_mcc: training: 0.611780 validation: 0.677736
09/16 08:29:19 AM: edges-spr2_acc: training: 0.043564 validation: 0.084127
09/16 08:29:19 AM: edges-spr2_precision: training: 0.769474 validation: 0.845834
09/16 08:29:19 AM: edges-spr2_recall: training: 0.731450 validation: 0.736126
09/16 08:29:19 AM: edges-spr2_f1: training: 0.749980 validation: 0.787176
09/16 08:29:19 AM: Global learning rate: 0.0001
09/16 08:29:19 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:29:20 AM: Update 106: task edges-spr2, batch 6 (106): mcc: 0.6815, acc: 0.0599, precision: 0.8367, recall: 0.7515, f1: 0.7918, edges-spr2_loss: 0.3242
09/16 08:29:27 AM: ***** Step 200 / Validation 2 *****
09/16 08:29:27 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:27 AM: Validating...
09/16 08:29:28 AM: Best result seen so far for edges-spr2.
09/16 08:29:28 AM: Best result seen so far for macro.
09/16 08:29:28 AM: Updating LR scheduler:
09/16 08:29:28 AM: 	Best result seen so far for macro_avg: 0.807
09/16 08:29:28 AM: 	# validation passes without improvement: 0
09/16 08:29:28 AM: edges-spr2_loss: training: 0.316265 validation: 0.333697
09/16 08:29:28 AM: macro_avg: validation: 0.807281
09/16 08:29:28 AM: micro_avg: validation: 0.000000
09/16 08:29:28 AM: edges-spr2_mcc: training: 0.685599 validation: 0.700454
09/16 08:29:28 AM: edges-spr2_acc: training: 0.064332 validation: 0.068254
09/16 08:29:28 AM: edges-spr2_precision: training: 0.826253 validation: 0.838835
09/16 08:29:28 AM: edges-spr2_recall: training: 0.766736 validation: 0.778014
09/16 08:29:28 AM: edges-spr2_f1: training: 0.795383 validation: 0.807281
09/16 08:29:28 AM: Global learning rate: 0.0001
09/16 08:29:28 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:29:30 AM: Update 216: task edges-spr2, batch 16 (216): mcc: 0.6917, acc: 0.0661, precision: 0.8306, recall: 0.7682, f1: 0.7982, edges-spr2_loss: 0.3020
09/16 08:29:36 AM: ***** Step 300 / Validation 3 *****
09/16 08:29:36 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:36 AM: Validating...
09/16 08:29:37 AM: Best result seen so far for edges-spr2.
09/16 08:29:37 AM: Best result seen so far for macro.
09/16 08:29:37 AM: Updating LR scheduler:
09/16 08:29:37 AM: 	Best result seen so far for macro_avg: 0.811
09/16 08:29:37 AM: 	# validation passes without improvement: 0
09/16 08:29:37 AM: edges-spr2_loss: training: 0.296548 validation: 0.329047
09/16 08:29:37 AM: macro_avg: validation: 0.810534
09/16 08:29:37 AM: micro_avg: validation: 0.000000
09/16 08:29:37 AM: edges-spr2_mcc: training: 0.705112 validation: 0.702377
09/16 08:29:37 AM: edges-spr2_acc: training: 0.071358 validation: 0.073016
09/16 08:29:37 AM: edges-spr2_precision: training: 0.836100 validation: 0.830138
09/16 08:29:37 AM: edges-spr2_recall: training: 0.783212 validation: 0.791835
09/16 08:29:37 AM: edges-spr2_f1: training: 0.808792 validation: 0.810534
09/16 08:29:37 AM: Global learning rate: 0.0001
09/16 08:29:37 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:29:40 AM: Update 336: task edges-spr2, batch 36 (336): mcc: 0.7224, acc: 0.0813, precision: 0.8379, recall: 0.8053, f1: 0.8213, edges-spr2_loss: 0.2844
09/16 08:29:45 AM: ***** Step 400 / Validation 4 *****
09/16 08:29:45 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:45 AM: Validating...
09/16 08:29:46 AM: Best result seen so far for edges-spr2.
09/16 08:29:46 AM: Best result seen so far for macro.
09/16 08:29:46 AM: Updating LR scheduler:
09/16 08:29:46 AM: 	Best result seen so far for macro_avg: 0.813
09/16 08:29:46 AM: 	# validation passes without improvement: 0
09/16 08:29:46 AM: edges-spr2_loss: training: 0.283166 validation: 0.330403
09/16 08:29:46 AM: macro_avg: validation: 0.813466
09/16 08:29:46 AM: micro_avg: validation: 0.000000
09/16 08:29:46 AM: edges-spr2_mcc: training: 0.723351 validation: 0.710257
09/16 08:29:46 AM: edges-spr2_acc: training: 0.080932 validation: 0.076190
09/16 08:29:46 AM: edges-spr2_precision: training: 0.840705 validation: 0.845765
09/16 08:29:46 AM: edges-spr2_recall: training: 0.803725 validation: 0.783542
09/16 08:29:46 AM: edges-spr2_f1: training: 0.821799 validation: 0.813466
09/16 08:29:46 AM: Global learning rate: 0.0001
09/16 08:29:46 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:29:50 AM: Update 444: task edges-spr2, batch 44 (444): mcc: 0.7263, acc: 0.0899, precision: 0.8426, recall: 0.8064, f1: 0.8241, edges-spr2_loss: 0.2774
09/16 08:29:54 AM: ***** Step 500 / Validation 5 *****
09/16 08:29:54 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:54 AM: Validating...
09/16 08:29:55 AM: Best result seen so far for edges-spr2.
09/16 08:29:55 AM: Best result seen so far for macro.
09/16 08:29:55 AM: Updating LR scheduler:
09/16 08:29:55 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:29:55 AM: 	# validation passes without improvement: 0
09/16 08:29:55 AM: edges-spr2_loss: training: 0.271794 validation: 0.332892
09/16 08:29:55 AM: macro_avg: validation: 0.815735
09/16 08:29:55 AM: micro_avg: validation: 0.000000
09/16 08:29:55 AM: edges-spr2_mcc: training: 0.732167 validation: 0.710850
09/16 08:29:55 AM: edges-spr2_acc: training: 0.090870 validation: 0.074603
09/16 08:29:55 AM: edges-spr2_precision: training: 0.846489 validation: 0.836612
09/16 08:29:55 AM: edges-spr2_recall: training: 0.809848 validation: 0.795875
09/16 08:29:55 AM: edges-spr2_f1: training: 0.827763 validation: 0.815735
09/16 08:29:55 AM: Global learning rate: 0.0001
09/16 08:29:55 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:00 AM: Update 562: task edges-spr2, batch 62 (562): mcc: 0.7363, acc: 0.0912, precision: 0.8483, recall: 0.8132, f1: 0.8304, edges-spr2_loss: 0.2679
09/16 08:30:03 AM: ***** Step 600 / Validation 6 *****
09/16 08:30:03 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:03 AM: Validating...
09/16 08:30:04 AM: Updating LR scheduler:
09/16 08:30:04 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:04 AM: 	# validation passes without improvement: 1
09/16 08:30:04 AM: edges-spr2_loss: training: 0.264491 validation: 0.334456
09/16 08:30:04 AM: macro_avg: validation: 0.812841
09/16 08:30:04 AM: micro_avg: validation: 0.000000
09/16 08:30:04 AM: edges-spr2_mcc: training: 0.740136 validation: 0.706759
09/16 08:30:04 AM: edges-spr2_acc: training: 0.095943 validation: 0.074603
09/16 08:30:04 AM: edges-spr2_precision: training: 0.849468 validation: 0.835466
09/16 08:30:04 AM: edges-spr2_recall: training: 0.817163 validation: 0.791410
09/16 08:30:04 AM: edges-spr2_f1: training: 0.833002 validation: 0.812841
09/16 08:30:04 AM: Global learning rate: 0.0001
09/16 08:30:04 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:10 AM: Update 681: task edges-spr2, batch 81 (681): mcc: 0.7460, acc: 0.0996, precision: 0.8520, recall: 0.8230, f1: 0.8372, edges-spr2_loss: 0.2575
09/16 08:30:11 AM: ***** Step 700 / Validation 7 *****
09/16 08:30:11 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:11 AM: Validating...
09/16 08:30:12 AM: Updating LR scheduler:
09/16 08:30:12 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:12 AM: 	# validation passes without improvement: 2
09/16 08:30:12 AM: edges-spr2_loss: training: 0.256421 validation: 0.334248
09/16 08:30:12 AM: macro_avg: validation: 0.812288
09/16 08:30:12 AM: micro_avg: validation: 0.000000
09/16 08:30:12 AM: edges-spr2_mcc: training: 0.747573 validation: 0.706162
09/16 08:30:12 AM: edges-spr2_acc: training: 0.099593 validation: 0.073016
09/16 08:30:12 AM: edges-spr2_precision: training: 0.854432 validation: 0.835959
09/16 08:30:12 AM: edges-spr2_recall: training: 0.822079 validation: 0.789921
09/16 08:30:12 AM: edges-spr2_f1: training: 0.837943 validation: 0.812288
09/16 08:30:12 AM: Global learning rate: 0.0001
09/16 08:30:12 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:20 AM: Update 798: task edges-spr2, batch 98 (798): mcc: 0.7533, acc: 0.1061, precision: 0.8568, recall: 0.8271, f1: 0.8417, edges-spr2_loss: 0.2507
09/16 08:30:20 AM: ***** Step 800 / Validation 8 *****
09/16 08:30:20 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:20 AM: Validating...
09/16 08:30:21 AM: Updating LR scheduler:
09/16 08:30:21 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:21 AM: 	# validation passes without improvement: 3
09/16 08:30:21 AM: edges-spr2_loss: training: 0.250322 validation: 0.336907
09/16 08:30:21 AM: macro_avg: validation: 0.807650
09/16 08:30:21 AM: micro_avg: validation: 0.000000
09/16 08:30:21 AM: edges-spr2_mcc: training: 0.754001 validation: 0.698802
09/16 08:30:21 AM: edges-spr2_acc: training: 0.106802 validation: 0.069841
09/16 08:30:21 AM: edges-spr2_precision: training: 0.856901 validation: 0.830897
09/16 08:30:21 AM: edges-spr2_recall: training: 0.828002 validation: 0.785669
09/16 08:30:21 AM: edges-spr2_f1: training: 0.842203 validation: 0.807650
09/16 08:30:21 AM: Global learning rate: 0.0001
09/16 08:30:21 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:29 AM: ***** Step 900 / Validation 9 *****
09/16 08:30:29 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:29 AM: Validating...
09/16 08:30:30 AM: Updating LR scheduler:
09/16 08:30:30 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:30 AM: 	# validation passes without improvement: 0
09/16 08:30:30 AM: edges-spr2_loss: training: 0.246233 validation: 0.341969
09/16 08:30:30 AM: macro_avg: validation: 0.806715
09/16 08:30:30 AM: micro_avg: validation: 0.000000
09/16 08:30:30 AM: edges-spr2_mcc: training: 0.760617 validation: 0.696757
09/16 08:30:30 AM: edges-spr2_acc: training: 0.116664 validation: 0.060317
09/16 08:30:30 AM: edges-spr2_precision: training: 0.860220 validation: 0.827740
09/16 08:30:30 AM: edges-spr2_recall: training: 0.832860 validation: 0.786732
09/16 08:30:30 AM: edges-spr2_f1: training: 0.846319 validation: 0.806715
09/16 08:30:30 AM: Global learning rate: 5e-05
09/16 08:30:30 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:30 AM: Update 906: task edges-spr2, batch 6 (906): mcc: 0.7438, acc: 0.1080, precision: 0.8442, recall: 0.8330, f1: 0.8385, edges-spr2_loss: 0.2574
09/16 08:30:38 AM: ***** Step 1000 / Validation 10 *****
09/16 08:30:38 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:38 AM: Validating...
09/16 08:30:39 AM: Updating LR scheduler:
09/16 08:30:39 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:39 AM: 	# validation passes without improvement: 1
09/16 08:30:39 AM: edges-spr2_loss: training: 0.238969 validation: 0.340326
09/16 08:30:39 AM: macro_avg: validation: 0.804770
09/16 08:30:39 AM: micro_avg: validation: 0.000000
09/16 08:30:39 AM: edges-spr2_mcc: training: 0.766335 validation: 0.696778
09/16 08:30:39 AM: edges-spr2_acc: training: 0.121704 validation: 0.073016
09/16 08:30:39 AM: edges-spr2_precision: training: 0.863408 validation: 0.837124
09/16 08:30:39 AM: edges-spr2_recall: training: 0.838595 validation: 0.774825
09/16 08:30:39 AM: edges-spr2_f1: training: 0.850821 validation: 0.804770
09/16 08:30:39 AM: Global learning rate: 5e-05
09/16 08:30:39 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:40 AM: Update 1016: task edges-spr2, batch 16 (1016): mcc: 0.7782, acc: 0.1344, precision: 0.8706, recall: 0.8478, f1: 0.8591, edges-spr2_loss: 0.2326
09/16 08:30:47 AM: ***** Step 1100 / Validation 11 *****
09/16 08:30:47 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:47 AM: Validating...
09/16 08:30:47 AM: Updating LR scheduler:
09/16 08:30:47 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:47 AM: 	# validation passes without improvement: 2
09/16 08:30:47 AM: edges-spr2_loss: training: 0.233000 validation: 0.343452
09/16 08:30:47 AM: macro_avg: validation: 0.805689
09/16 08:30:47 AM: micro_avg: validation: 0.000000
09/16 08:30:47 AM: edges-spr2_mcc: training: 0.773821 validation: 0.695976
09/16 08:30:47 AM: edges-spr2_acc: training: 0.132665 validation: 0.069841
09/16 08:30:47 AM: edges-spr2_precision: training: 0.867554 validation: 0.829840
09/16 08:30:47 AM: edges-spr2_recall: training: 0.842789 validation: 0.782905
09/16 08:30:47 AM: edges-spr2_f1: training: 0.854992 validation: 0.805689
09/16 08:30:47 AM: Global learning rate: 5e-05
09/16 08:30:47 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:30:50 AM: Update 1127: task edges-spr2, batch 27 (1127): mcc: 0.7650, acc: 0.1207, precision: 0.8626, recall: 0.8358, f1: 0.8490, edges-spr2_loss: 0.2422
09/16 08:30:56 AM: ***** Step 1200 / Validation 12 *****
09/16 08:30:56 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:56 AM: Validating...
09/16 08:30:57 AM: Updating LR scheduler:
09/16 08:30:57 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:30:57 AM: 	# validation passes without improvement: 3
09/16 08:30:57 AM: edges-spr2_loss: training: 0.234261 validation: 0.343927
09/16 08:30:57 AM: macro_avg: validation: 0.804412
09/16 08:30:57 AM: micro_avg: validation: 0.000000
09/16 08:30:57 AM: edges-spr2_mcc: training: 0.771292 validation: 0.693536
09/16 08:30:57 AM: edges-spr2_acc: training: 0.129275 validation: 0.057143
09/16 08:30:57 AM: edges-spr2_precision: training: 0.866431 validation: 0.826897
09/16 08:30:57 AM: edges-spr2_recall: training: 0.841082 validation: 0.783117
09/16 08:30:57 AM: edges-spr2_f1: training: 0.853568 validation: 0.804412
09/16 08:30:57 AM: Global learning rate: 5e-05
09/16 08:30:57 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:31:00 AM: Update 1245: task edges-spr2, batch 45 (1245): mcc: 0.7790, acc: 0.1300, precision: 0.8710, recall: 0.8464, f1: 0.8586, edges-spr2_loss: 0.2298
09/16 08:31:05 AM: ***** Step 1300 / Validation 13 *****
09/16 08:31:05 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:31:05 AM: Validating...
09/16 08:31:06 AM: Updating LR scheduler:
09/16 08:31:06 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:31:06 AM: 	# validation passes without improvement: 0
09/16 08:31:06 AM: edges-spr2_loss: training: 0.229969 validation: 0.345889
09/16 08:31:06 AM: macro_avg: validation: 0.803943
09/16 08:31:06 AM: micro_avg: validation: 0.000000
09/16 08:31:06 AM: edges-spr2_mcc: training: 0.779090 validation: 0.693494
09/16 08:31:06 AM: edges-spr2_acc: training: 0.132709 validation: 0.066667
09/16 08:31:06 AM: edges-spr2_precision: training: 0.870060 validation: 0.829004
09/16 08:31:06 AM: edges-spr2_recall: training: 0.847201 validation: 0.780353
09/16 08:31:06 AM: edges-spr2_f1: training: 0.858478 validation: 0.803943
09/16 08:31:06 AM: Global learning rate: 2.5e-05
09/16 08:31:06 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:31:10 AM: Update 1348: task edges-spr2, batch 48 (1348): mcc: 0.7787, acc: 0.1359, precision: 0.8690, recall: 0.8477, f1: 0.8582, edges-spr2_loss: 0.2277
09/16 08:31:14 AM: ***** Step 1400 / Validation 14 *****
09/16 08:31:14 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:31:14 AM: Validating...
09/16 08:31:15 AM: Updating LR scheduler:
09/16 08:31:15 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:31:15 AM: 	# validation passes without improvement: 1
09/16 08:31:15 AM: edges-spr2_loss: training: 0.226114 validation: 0.344034
09/16 08:31:15 AM: macro_avg: validation: 0.806715
09/16 08:31:15 AM: micro_avg: validation: 0.000000
09/16 08:31:15 AM: edges-spr2_mcc: training: 0.782785 validation: 0.696757
09/16 08:31:15 AM: edges-spr2_acc: training: 0.140849 validation: 0.060317
09/16 08:31:15 AM: edges-spr2_precision: training: 0.872501 validation: 0.827740
09/16 08:31:15 AM: edges-spr2_recall: training: 0.850212 validation: 0.786732
09/16 08:31:15 AM: edges-spr2_f1: training: 0.861213 validation: 0.806715
09/16 08:31:15 AM: Global learning rate: 2.5e-05
09/16 08:31:15 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:31:20 AM: Update 1463: task edges-spr2, batch 63 (1463): mcc: 0.7817, acc: 0.1405, precision: 0.8713, recall: 0.8499, f1: 0.8605, edges-spr2_loss: 0.2257
09/16 08:31:23 AM: ***** Step 1500 / Validation 15 *****
09/16 08:31:24 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:31:24 AM: Validating...
09/16 08:31:25 AM: Updating LR scheduler:
09/16 08:31:25 AM: 	Best result seen so far for macro_avg: 0.816
09/16 08:31:25 AM: 	# validation passes without improvement: 2
09/16 08:31:25 AM: Ran out of early stopping patience. Stopping training.
09/16 08:31:25 AM: edges-spr2_loss: training: 0.224523 validation: 0.345298
09/16 08:31:25 AM: macro_avg: validation: 0.809642
09/16 08:31:25 AM: micro_avg: validation: 0.000000
09/16 08:31:25 AM: edges-spr2_mcc: training: 0.782829 validation: 0.698588
09/16 08:31:25 AM: edges-spr2_acc: training: 0.142378 validation: 0.058730
09/16 08:31:25 AM: edges-spr2_precision: training: 0.873124 validation: 0.819608
09/16 08:31:25 AM: edges-spr2_recall: training: 0.849621 validation: 0.799915
09/16 08:31:25 AM: edges-spr2_f1: training: 0.861212 validation: 0.809642
09/16 08:31:25 AM: Global learning rate: 2.5e-05
09/16 08:31:25 AM: Saving checkpoints to: ./experiments/spr2-sst-cat/run
09/16 08:31:25 AM: Stopped training after 15 validation checks
09/16 08:31:25 AM: Trained edges-spr2 for 1500 batches or 21.429 epochs
09/16 08:31:25 AM: ***** VALIDATION RESULTS *****
09/16 08:31:25 AM: edges-spr2_f1 (for best val pass 5): edges-spr2_loss: 0.33289, macro_avg: 0.81573, micro_avg: 0.00000, edges-spr2_mcc: 0.71085, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.83661, edges-spr2_recall: 0.79587, edges-spr2_f1: 0.81573
09/16 08:31:25 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.34779, macro_avg: 0.78718, micro_avg: 0.00000, edges-spr2_mcc: 0.67774, edges-spr2_acc: 0.08413, edges-spr2_precision: 0.84583, edges-spr2_recall: 0.73613, edges-spr2_f1: 0.78718
09/16 08:31:25 AM: macro_avg (for best val pass 5): edges-spr2_loss: 0.33289, macro_avg: 0.81573, micro_avg: 0.00000, edges-spr2_mcc: 0.71085, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.83661, edges-spr2_recall: 0.79587, edges-spr2_f1: 0.81573
09/16 08:31:25 AM: Evaluating...
09/16 08:31:25 AM: Loaded model state from ./experiments/spr2-sst-cat/run/edges-spr2/model_state_target_train_val_5.best.th
09/16 08:31:25 AM: Evaluating on: edges-spr2, split: val
09/16 08:31:26 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:31:26 AM: Finished evaluating on: edges-spr2
09/16 08:31:26 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:31:26 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-sst-cat/run
09/16 08:31:26 AM: Wrote all preds for split 'val' to ./experiments/spr2-sst-cat/run
09/16 08:31:26 AM: Evaluating on: edges-spr2, split: test
09/16 08:31:27 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:31:27 AM: Finished evaluating on: edges-spr2
09/16 08:31:27 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:31:27 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-sst-cat/run
09/16 08:31:27 AM: Wrote all preds for split 'test' to ./experiments/spr2-sst-cat/run
09/16 08:31:27 AM: Writing results for split 'val' to ./experiments/spr2-sst-cat/results.tsv
09/16 08:31:27 AM: micro_avg: 0.000, macro_avg: 0.816, edges-spr2_mcc: 0.711, edges-spr2_acc: 0.075, edges-spr2_precision: 0.837, edges-spr2_recall: 0.796, edges-spr2_f1: 0.816
09/16 08:31:27 AM: Done!
09/16 08:31:27 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
