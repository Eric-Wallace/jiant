09/16 08:38:59 AM: Git branch: master
09/16 08:38:59 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:39:00 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-coref-cat/",
  "exp_name": "experiments/spr2-coref-cat",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-coref-cat/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/coref",
  "pytorch_transformers_output_mode": "cat",
  "remote_log_name": "experiments/spr2-coref-cat__run",
  "run_dir": "./experiments/spr2-coref-cat/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:39:00 AM: Saved config to ./experiments/spr2-coref-cat/run/params.conf
09/16 08:39:00 AM: Using random seed 1234
09/16 08:39:01 AM: Using GPU 0
09/16 08:39:01 AM: Loading tasks...
09/16 08:39:01 AM: Writing pre-preprocessed tasks to ./experiments/spr2-coref-cat/
09/16 08:39:01 AM: 	Creating task edges-spr2 from scratch.
09/16 08:39:02 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:39:02 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:39:02 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:39:02 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:39:02 AM: 	Finished loading tasks: edges-spr2.
09/16 08:39:02 AM: 	Building vocab from scratch.
09/16 08:39:02 AM: 	Counting units for task edges-spr2.
09/16 08:39:02 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:39:03 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:03 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:39:03 AM: 	Saved vocab to ./experiments/spr2-coref-cat/vocab
09/16 08:39:03 AM: Loading token dictionary from ./experiments/spr2-coref-cat/vocab.
09/16 08:39:03 AM: 	Loaded vocab from ./experiments/spr2-coref-cat/vocab
09/16 08:39:03 AM: 	Vocab namespace tokens: size 7943
09/16 08:39:03 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:39:03 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:39:03 AM: 	Vocab namespace chars: size 65
09/16 08:39:03 AM: 	Finished building vocab.
09/16 08:39:03 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:39:04 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-coref-cat/preproc/edges-spr2__train_data
09/16 08:39:04 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:39:04 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-coref-cat/preproc/edges-spr2__val_data
09/16 08:39:04 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:39:04 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-coref-cat/preproc/edges-spr2__test_data
09/16 08:39:04 AM: 	Finished indexing tasks
09/16 08:39:04 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:39:04 AM: 	  Training on 
09/16 08:39:04 AM: 	  Evaluating on edges-spr2
09/16 08:39:04 AM: 	Finished loading tasks in 2.538s
09/16 08:39:04 AM: 	 Tasks: ['edges-spr2']
09/16 08:39:04 AM: Building model...
09/16 08:39:04 AM: Using BERT model (bert-base-uncased).
09/16 08:39:04 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:39:04 AM: models/coref
09/16 08:39:04 AM: loading configuration file models/coref/config.json
09/16 08:39:04 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:39:04 AM: loading weights file models/coref/pytorch_model.bin
09/16 08:39:15 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpqmiq4s1p
09/16 08:39:19 AM: copying /tmp/tmpqmiq4s1p to cache at ./experiments/spr2-coref-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:19 AM: creating metadata file for ./experiments/spr2-coref-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:19 AM: removing temp file /tmp/tmpqmiq4s1p
09/16 08:39:19 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-coref-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:39:19 AM: Initializing parameters
09/16 08:39:19 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:39:19 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:39:19 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:39:19 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:39:19 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:39:19 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:39:19 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:39:24 AM: Model specification:
09/16 08:39:24 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:39:24 AM: Model parameters:
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:39:24 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:39:24 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:39:24 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:24 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:39:24 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:24 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:39:24 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:24 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:24 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:39:24 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:39:24 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:39:24 AM: Total number of parameters: 110537236 (1.10537e+08)
09/16 08:39:24 AM: Number of trainable parameters: 1054996 (1.055e+06)
09/16 08:39:24 AM: Finished building model in 20.510s
09/16 08:39:24 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:39:25 AM: patience = 9
09/16 08:39:25 AM: val_interval = 100
09/16 08:39:25 AM: max_vals = 100
09/16 08:39:25 AM: cuda_device = 0
09/16 08:39:25 AM: grad_norm = 5.0
09/16 08:39:25 AM: grad_clipping = None
09/16 08:39:25 AM: lr_decay = 0.99
09/16 08:39:25 AM: min_lr = 1e-06
09/16 08:39:25 AM: keep_all_checkpoints = 0
09/16 08:39:25 AM: val_data_limit = 5000
09/16 08:39:25 AM: max_epochs = -1
09/16 08:39:25 AM: dec_val_scale = 250
09/16 08:39:25 AM: training_data_fraction = 1
09/16 08:39:25 AM: type = adam
09/16 08:39:25 AM: parameter_groups = None
09/16 08:39:25 AM: Number of trainable parameters: 1054996
09/16 08:39:25 AM: infer_type_and_cast = True
09/16 08:39:25 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:25 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:25 AM: lr = 0.0001
09/16 08:39:25 AM: amsgrad = True
09/16 08:39:25 AM: type = reduce_on_plateau
09/16 08:39:25 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:25 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:25 AM: mode = max
09/16 08:39:25 AM: factor = 0.5
09/16 08:39:25 AM: patience = 3
09/16 08:39:25 AM: threshold = 0.0001
09/16 08:39:25 AM: threshold_mode = abs
09/16 08:39:25 AM: verbose = True
09/16 08:39:25 AM: type = adam
09/16 08:39:25 AM: parameter_groups = None
09/16 08:39:25 AM: Number of trainable parameters: 1054996
09/16 08:39:25 AM: infer_type_and_cast = True
09/16 08:39:25 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:25 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:25 AM: lr = 0.0001
09/16 08:39:25 AM: amsgrad = True
09/16 08:39:25 AM: type = reduce_on_plateau
09/16 08:39:25 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:39:25 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:39:25 AM: mode = max
09/16 08:39:25 AM: factor = 0.5
09/16 08:39:25 AM: patience = 3
09/16 08:39:25 AM: threshold = 0.0001
09/16 08:39:25 AM: threshold_mode = abs
09/16 08:39:25 AM: verbose = True
09/16 08:39:25 AM: Starting training without restoring from a checkpoint.
09/16 08:39:25 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:39:25 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:39:33 AM: ***** Step 100 / Validation 1 *****
09/16 08:39:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:39:33 AM: Validating...
09/16 08:39:34 AM: Best result seen so far for edges-spr2.
09/16 08:39:34 AM: Best result seen so far for micro.
09/16 08:39:35 AM: Best result seen so far for macro.
09/16 08:39:35 AM: Updating LR scheduler:
09/16 08:39:35 AM: 	Best result seen so far for macro_avg: 0.799
09/16 08:39:35 AM: 	# validation passes without improvement: 0
09/16 08:39:35 AM: edges-spr2_loss: training: 0.366409 validation: 0.339432
09/16 08:39:35 AM: macro_avg: validation: 0.798606
09/16 08:39:35 AM: micro_avg: validation: 0.000000
09/16 08:39:35 AM: edges-spr2_mcc: training: 0.631598 validation: 0.691924
09/16 08:39:35 AM: edges-spr2_acc: training: 0.047089 validation: 0.074603
09/16 08:39:35 AM: edges-spr2_precision: training: 0.784602 validation: 0.846961
09/16 08:39:35 AM: edges-spr2_recall: training: 0.741040 validation: 0.755475
09/16 08:39:35 AM: edges-spr2_f1: training: 0.762199 validation: 0.798606
09/16 08:39:35 AM: Global learning rate: 0.0001
09/16 08:39:35 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:39:35 AM: Update 109: task edges-spr2, batch 9 (109): mcc: 0.6858, acc: 0.0602, precision: 0.8293, recall: 0.7648, f1: 0.7957, edges-spr2_loss: 0.3192
09/16 08:39:42 AM: ***** Step 200 / Validation 2 *****
09/16 08:39:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:39:42 AM: Validating...
09/16 08:39:43 AM: Best result seen so far for edges-spr2.
09/16 08:39:43 AM: Best result seen so far for macro.
09/16 08:39:43 AM: Updating LR scheduler:
09/16 08:39:43 AM: 	Best result seen so far for macro_avg: 0.818
09/16 08:39:43 AM: 	# validation passes without improvement: 0
09/16 08:39:43 AM: edges-spr2_loss: training: 0.305252 validation: 0.320848
09/16 08:39:43 AM: macro_avg: validation: 0.817693
09/16 08:39:43 AM: micro_avg: validation: 0.000000
09/16 08:39:43 AM: edges-spr2_mcc: training: 0.701695 validation: 0.715544
09/16 08:39:43 AM: edges-spr2_acc: training: 0.070479 validation: 0.085714
09/16 08:39:43 AM: edges-spr2_precision: training: 0.833985 validation: 0.845054
09/16 08:39:43 AM: edges-spr2_recall: training: 0.780653 validation: 0.792048
09/16 08:39:43 AM: edges-spr2_f1: training: 0.806438 validation: 0.817693
09/16 08:39:43 AM: Global learning rate: 0.0001
09/16 08:39:43 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:39:45 AM: Update 222: task edges-spr2, batch 22 (222): mcc: 0.7077, acc: 0.0725, precision: 0.8360, recall: 0.7831, f1: 0.8087, edges-spr2_loss: 0.2911
09/16 08:39:51 AM: ***** Step 300 / Validation 3 *****
09/16 08:39:51 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:39:51 AM: Validating...
09/16 08:39:52 AM: Best result seen so far for edges-spr2.
09/16 08:39:52 AM: Best result seen so far for macro.
09/16 08:39:52 AM: Updating LR scheduler:
09/16 08:39:52 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:39:52 AM: 	# validation passes without improvement: 0
09/16 08:39:52 AM: edges-spr2_loss: training: 0.284735 validation: 0.314794
09/16 08:39:52 AM: macro_avg: validation: 0.823021
09/16 08:39:52 AM: micro_avg: validation: 0.000000
09/16 08:39:52 AM: edges-spr2_mcc: training: 0.721064 validation: 0.720452
09/16 08:39:52 AM: edges-spr2_acc: training: 0.082543 validation: 0.076190
09/16 08:39:52 AM: edges-spr2_precision: training: 0.843983 validation: 0.836112
09/16 08:39:52 AM: edges-spr2_recall: training: 0.796595 validation: 0.810334
09/16 08:39:52 AM: edges-spr2_f1: training: 0.819605 validation: 0.823021
09/16 08:39:52 AM: Global learning rate: 0.0001
09/16 08:39:52 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:39:55 AM: Update 346: task edges-spr2, batch 46 (346): mcc: 0.7361, acc: 0.0896, precision: 0.8473, recall: 0.8139, f1: 0.8303, edges-spr2_loss: 0.2739
09/16 08:40:00 AM: ***** Step 400 / Validation 4 *****
09/16 08:40:00 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:00 AM: Validating...
09/16 08:40:00 AM: Updating LR scheduler:
09/16 08:40:00 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:40:00 AM: 	# validation passes without improvement: 1
09/16 08:40:00 AM: edges-spr2_loss: training: 0.272021 validation: 0.313386
09/16 08:40:00 AM: macro_avg: validation: 0.822975
09/16 08:40:00 AM: micro_avg: validation: 0.000000
09/16 08:40:00 AM: edges-spr2_mcc: training: 0.736875 validation: 0.723527
09/16 08:40:00 AM: edges-spr2_acc: training: 0.091384 validation: 0.077778
09/16 08:40:00 AM: edges-spr2_precision: training: 0.847825 validation: 0.849321
09/16 08:40:00 AM: edges-spr2_recall: training: 0.814403 validation: 0.798214
09/16 08:40:00 AM: edges-spr2_f1: training: 0.830778 validation: 0.822975
09/16 08:40:00 AM: Global learning rate: 0.0001
09/16 08:40:00 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:05 AM: Update 459: task edges-spr2, batch 59 (459): mcc: 0.7413, acc: 0.0987, precision: 0.8514, recall: 0.8163, f1: 0.8335, edges-spr2_loss: 0.2649
09/16 08:40:09 AM: ***** Step 500 / Validation 5 *****
09/16 08:40:09 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:09 AM: Validating...
09/16 08:40:10 AM: Best result seen so far for edges-spr2.
09/16 08:40:10 AM: Best result seen so far for macro.
09/16 08:40:10 AM: Updating LR scheduler:
09/16 08:40:10 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:10 AM: 	# validation passes without improvement: 0
09/16 08:40:10 AM: edges-spr2_loss: training: 0.261128 validation: 0.309257
09/16 08:40:10 AM: macro_avg: validation: 0.824125
09/16 08:40:10 AM: micro_avg: validation: 0.000000
09/16 08:40:10 AM: edges-spr2_mcc: training: 0.747519 validation: 0.721699
09/16 08:40:10 AM: edges-spr2_acc: training: 0.101093 validation: 0.069841
09/16 08:40:10 AM: edges-spr2_precision: training: 0.856035 validation: 0.835007
09/16 08:40:10 AM: edges-spr2_recall: training: 0.820126 validation: 0.813523
09/16 08:40:10 AM: edges-spr2_f1: training: 0.837696 validation: 0.824125
09/16 08:40:10 AM: Global learning rate: 0.0001
09/16 08:40:10 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:15 AM: Update 573: task edges-spr2, batch 73 (573): mcc: 0.7508, acc: 0.1037, precision: 0.8560, recall: 0.8251, f1: 0.8403, edges-spr2_loss: 0.2546
09/16 08:40:17 AM: ***** Step 600 / Validation 6 *****
09/16 08:40:17 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:17 AM: Validating...
09/16 08:40:18 AM: Updating LR scheduler:
09/16 08:40:18 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:18 AM: 	# validation passes without improvement: 1
09/16 08:40:18 AM: edges-spr2_loss: training: 0.252336 validation: 0.310992
09/16 08:40:18 AM: macro_avg: validation: 0.821655
09/16 08:40:18 AM: micro_avg: validation: 0.000000
09/16 08:40:18 AM: edges-spr2_mcc: training: 0.754374 validation: 0.720516
09/16 08:40:18 AM: edges-spr2_acc: training: 0.109749 validation: 0.088889
09/16 08:40:18 AM: edges-spr2_precision: training: 0.857040 validation: 0.844135
09/16 08:40:18 AM: edges-spr2_recall: training: 0.828233 validation: 0.800340
09/16 08:40:18 AM: edges-spr2_f1: training: 0.842390 validation: 0.821655
09/16 08:40:18 AM: Global learning rate: 0.0001
09/16 08:40:18 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:25 AM: Update 691: task edges-spr2, batch 91 (691): mcc: 0.7637, acc: 0.1130, precision: 0.8647, recall: 0.8323, f1: 0.8482, edges-spr2_loss: 0.2443
09/16 08:40:26 AM: ***** Step 700 / Validation 7 *****
09/16 08:40:26 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:26 AM: Validating...
09/16 08:40:27 AM: Updating LR scheduler:
09/16 08:40:27 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:27 AM: 	# validation passes without improvement: 2
09/16 08:40:27 AM: edges-spr2_loss: training: 0.243954 validation: 0.312783
09/16 08:40:27 AM: macro_avg: validation: 0.821658
09/16 08:40:27 AM: micro_avg: validation: 0.000000
09/16 08:40:27 AM: edges-spr2_mcc: training: 0.764804 validation: 0.720123
09/16 08:40:27 AM: edges-spr2_acc: training: 0.114859 validation: 0.085714
09/16 08:40:27 AM: edges-spr2_precision: training: 0.865963 validation: 0.842493
09/16 08:40:27 AM: edges-spr2_recall: training: 0.832588 validation: 0.801829
09/16 08:40:27 AM: edges-spr2_f1: training: 0.848948 validation: 0.821658
09/16 08:40:27 AM: Global learning rate: 0.0001
09/16 08:40:27 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:35 AM: ***** Step 800 / Validation 8 *****
09/16 08:40:35 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:35 AM: Validating...
09/16 08:40:35 AM: Evaluate: task edges-spr2, batch 3 (10): mcc: 0.7336, acc: 0.0503, precision: 0.8485, recall: 0.8233, f1: 0.8357, edges-spr2_loss: 0.2844
09/16 08:40:36 AM: Updating LR scheduler:
09/16 08:40:36 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:36 AM: 	# validation passes without improvement: 3
09/16 08:40:36 AM: edges-spr2_loss: training: 0.237691 validation: 0.316547
09/16 08:40:36 AM: macro_avg: validation: 0.820119
09/16 08:40:36 AM: micro_avg: validation: 0.000000
09/16 08:40:36 AM: edges-spr2_mcc: training: 0.768515 validation: 0.716209
09/16 08:40:36 AM: edges-spr2_acc: training: 0.121061 validation: 0.080952
09/16 08:40:36 AM: edges-spr2_precision: training: 0.865228 validation: 0.834654
09/16 08:40:36 AM: edges-spr2_recall: training: 0.838496 validation: 0.806081
09/16 08:40:36 AM: edges-spr2_f1: training: 0.851652 validation: 0.820119
09/16 08:40:36 AM: Global learning rate: 0.0001
09/16 08:40:36 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:44 AM: ***** Step 900 / Validation 9 *****
09/16 08:40:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:44 AM: Validating...
09/16 08:40:45 AM: Updating LR scheduler:
09/16 08:40:45 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:45 AM: 	# validation passes without improvement: 0
09/16 08:40:45 AM: edges-spr2_loss: training: 0.233045 validation: 0.327151
09/16 08:40:45 AM: macro_avg: validation: 0.819595
09/16 08:40:45 AM: micro_avg: validation: 0.000000
09/16 08:40:45 AM: edges-spr2_mcc: training: 0.774609 validation: 0.713625
09/16 08:40:45 AM: edges-spr2_acc: training: 0.128659 validation: 0.073016
09/16 08:40:45 AM: edges-spr2_precision: training: 0.870010 validation: 0.826416
09/16 08:40:45 AM: edges-spr2_recall: training: 0.840890 validation: 0.812885
09/16 08:40:45 AM: edges-spr2_f1: training: 0.855202 validation: 0.819595
09/16 08:40:45 AM: Global learning rate: 5e-05
09/16 08:40:45 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:45 AM: Update 910: task edges-spr2, batch 10 (910): mcc: 0.7681, acc: 0.1173, precision: 0.8626, recall: 0.8462, f1: 0.8543, edges-spr2_loss: 0.2404
09/16 08:40:53 AM: ***** Step 1000 / Validation 10 *****
09/16 08:40:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:40:53 AM: Validating...
09/16 08:40:54 AM: Updating LR scheduler:
09/16 08:40:54 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:40:54 AM: 	# validation passes without improvement: 1
09/16 08:40:54 AM: edges-spr2_loss: training: 0.226068 validation: 0.322224
09/16 08:40:54 AM: macro_avg: validation: 0.815319
09/16 08:40:54 AM: micro_avg: validation: 0.000000
09/16 08:40:54 AM: edges-spr2_mcc: training: 0.783189 validation: 0.711772
09/16 08:40:54 AM: edges-spr2_acc: training: 0.138634 validation: 0.079365
09/16 08:40:54 AM: edges-spr2_precision: training: 0.874698 validation: 0.842404
09/16 08:40:54 AM: edges-spr2_recall: training: 0.848735 validation: 0.789921
09/16 08:40:54 AM: edges-spr2_f1: training: 0.861521 validation: 0.815319
09/16 08:40:54 AM: Global learning rate: 5e-05
09/16 08:40:54 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:40:55 AM: Update 1025: task edges-spr2, batch 25 (1025): mcc: 0.7943, acc: 0.1673, precision: 0.8788, recall: 0.8586, f1: 0.8686, edges-spr2_loss: 0.2190
09/16 08:41:01 AM: ***** Step 1100 / Validation 11 *****
09/16 08:41:01 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:01 AM: Validating...
09/16 08:41:02 AM: Updating LR scheduler:
09/16 08:41:02 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:02 AM: 	# validation passes without improvement: 2
09/16 08:41:02 AM: edges-spr2_loss: training: 0.219862 validation: 0.323590
09/16 08:41:02 AM: macro_avg: validation: 0.817294
09/16 08:41:02 AM: micro_avg: validation: 0.000000
09/16 08:41:02 AM: edges-spr2_mcc: training: 0.788328 validation: 0.714868
09/16 08:41:02 AM: edges-spr2_acc: training: 0.153153 validation: 0.073016
09/16 08:41:02 AM: edges-spr2_precision: training: 0.876485 validation: 0.844444
09/16 08:41:02 AM: edges-spr2_recall: training: 0.852530 validation: 0.791835
09/16 08:41:02 AM: edges-spr2_f1: training: 0.864341 validation: 0.817294
09/16 08:41:02 AM: Global learning rate: 5e-05
09/16 08:41:02 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:41:06 AM: Update 1137: task edges-spr2, batch 37 (1137): mcc: 0.7824, acc: 0.1463, precision: 0.8757, recall: 0.8449, f1: 0.8600, edges-spr2_loss: 0.2254
09/16 08:41:10 AM: ***** Step 1200 / Validation 12 *****
09/16 08:41:10 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:10 AM: Validating...
09/16 08:41:11 AM: Updating LR scheduler:
09/16 08:41:11 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:11 AM: 	# validation passes without improvement: 3
09/16 08:41:11 AM: edges-spr2_loss: training: 0.221178 validation: 0.326403
09/16 08:41:11 AM: macro_avg: validation: 0.816031
09/16 08:41:11 AM: micro_avg: validation: 0.000000
09/16 08:41:11 AM: edges-spr2_mcc: training: 0.786688 validation: 0.709486
09/16 08:41:11 AM: edges-spr2_acc: training: 0.149798 validation: 0.069841
09/16 08:41:11 AM: edges-spr2_precision: training: 0.876885 validation: 0.829381
09/16 08:41:11 AM: edges-spr2_recall: training: 0.850242 validation: 0.803104
09/16 08:41:11 AM: edges-spr2_f1: training: 0.863358 validation: 0.816031
09/16 08:41:11 AM: Global learning rate: 5e-05
09/16 08:41:11 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:41:16 AM: Update 1258: task edges-spr2, batch 58 (1258): mcc: 0.7940, acc: 0.1531, precision: 0.8794, recall: 0.8573, f1: 0.8682, edges-spr2_loss: 0.2165
09/16 08:41:19 AM: ***** Step 1300 / Validation 13 *****
09/16 08:41:19 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:19 AM: Validating...
09/16 08:41:20 AM: Updating LR scheduler:
09/16 08:41:20 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:20 AM: 	# validation passes without improvement: 0
09/16 08:41:20 AM: edges-spr2_loss: training: 0.217118 validation: 0.326216
09/16 08:41:20 AM: macro_avg: validation: 0.815572
09/16 08:41:20 AM: micro_avg: validation: 0.000000
09/16 08:41:20 AM: edges-spr2_mcc: training: 0.792101 validation: 0.710144
09/16 08:41:20 AM: edges-spr2_acc: training: 0.151009 validation: 0.074603
09/16 08:41:20 AM: edges-spr2_precision: training: 0.879544 validation: 0.834632
09/16 08:41:20 AM: edges-spr2_recall: training: 0.854194 validation: 0.797363
09/16 08:41:20 AM: edges-spr2_f1: training: 0.866683 validation: 0.815572
09/16 08:41:20 AM: Global learning rate: 2.5e-05
09/16 08:41:20 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:41:26 AM: Update 1367: task edges-spr2, batch 67 (1367): mcc: 0.7974, acc: 0.1630, precision: 0.8824, recall: 0.8590, f1: 0.8705, edges-spr2_loss: 0.2142
09/16 08:41:28 AM: ***** Step 1400 / Validation 14 *****
09/16 08:41:28 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:28 AM: Validating...
09/16 08:41:29 AM: Updating LR scheduler:
09/16 08:41:29 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:29 AM: 	# validation passes without improvement: 1
09/16 08:41:29 AM: edges-spr2_loss: training: 0.213105 validation: 0.325646
09/16 08:41:29 AM: macro_avg: validation: 0.813342
09/16 08:41:29 AM: micro_avg: validation: 0.000000
09/16 08:41:29 AM: edges-spr2_mcc: training: 0.798425 validation: 0.706444
09/16 08:41:29 AM: edges-spr2_acc: training: 0.164987 validation: 0.065079
09/16 08:41:29 AM: edges-spr2_precision: training: 0.882608 validation: 0.831593
09/16 08:41:29 AM: edges-spr2_recall: training: 0.860078 validation: 0.795875
09/16 08:41:29 AM: edges-spr2_f1: training: 0.871197 validation: 0.813342
09/16 08:41:29 AM: Global learning rate: 2.5e-05
09/16 08:41:29 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:41:36 AM: Update 1479: task edges-spr2, batch 79 (1479): mcc: 0.7955, acc: 0.1594, precision: 0.8810, recall: 0.8574, f1: 0.8691, edges-spr2_loss: 0.2135
09/16 08:41:37 AM: ***** Step 1500 / Validation 15 *****
09/16 08:41:37 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:41:37 AM: Validating...
09/16 08:41:38 AM: Updating LR scheduler:
09/16 08:41:38 AM: 	Best result seen so far for macro_avg: 0.824
09/16 08:41:38 AM: 	# validation passes without improvement: 2
09/16 08:41:38 AM: Ran out of early stopping patience. Stopping training.
09/16 08:41:38 AM: edges-spr2_loss: training: 0.212014 validation: 0.325781
09/16 08:41:38 AM: macro_avg: validation: 0.816243
09/16 08:41:38 AM: micro_avg: validation: 0.000000
09/16 08:41:38 AM: edges-spr2_mcc: training: 0.797813 validation: 0.709238
09/16 08:41:38 AM: edges-spr2_acc: training: 0.162917 validation: 0.076190
09/16 08:41:38 AM: edges-spr2_precision: training: 0.882610 validation: 0.827112
09/16 08:41:38 AM: edges-spr2_recall: training: 0.859305 validation: 0.805656
09/16 08:41:38 AM: edges-spr2_f1: training: 0.870802 validation: 0.816243
09/16 08:41:38 AM: Global learning rate: 2.5e-05
09/16 08:41:38 AM: Saving checkpoints to: ./experiments/spr2-coref-cat/run
09/16 08:41:38 AM: Stopped training after 15 validation checks
09/16 08:41:38 AM: Trained edges-spr2 for 1500 batches or 21.429 epochs
09/16 08:41:38 AM: ***** VALIDATION RESULTS *****
09/16 08:41:38 AM: edges-spr2_f1 (for best val pass 5): edges-spr2_loss: 0.30926, macro_avg: 0.82412, micro_avg: 0.00000, edges-spr2_mcc: 0.72170, edges-spr2_acc: 0.06984, edges-spr2_precision: 0.83501, edges-spr2_recall: 0.81352, edges-spr2_f1: 0.82412
09/16 08:41:38 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.33943, macro_avg: 0.79861, micro_avg: 0.00000, edges-spr2_mcc: 0.69192, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.84696, edges-spr2_recall: 0.75548, edges-spr2_f1: 0.79861
09/16 08:41:38 AM: macro_avg (for best val pass 5): edges-spr2_loss: 0.30926, macro_avg: 0.82412, micro_avg: 0.00000, edges-spr2_mcc: 0.72170, edges-spr2_acc: 0.06984, edges-spr2_precision: 0.83501, edges-spr2_recall: 0.81352, edges-spr2_f1: 0.82412
09/16 08:41:38 AM: Evaluating...
09/16 08:41:38 AM: Loaded model state from ./experiments/spr2-coref-cat/run/edges-spr2/model_state_target_train_val_5.best.th
09/16 08:41:38 AM: Evaluating on: edges-spr2, split: val
09/16 08:41:39 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:41:39 AM: Finished evaluating on: edges-spr2
09/16 08:41:39 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:41:39 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-coref-cat/run
09/16 08:41:39 AM: Wrote all preds for split 'val' to ./experiments/spr2-coref-cat/run
09/16 08:41:39 AM: Evaluating on: edges-spr2, split: test
09/16 08:41:40 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:41:40 AM: Finished evaluating on: edges-spr2
09/16 08:41:40 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:41:40 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-coref-cat/run
09/16 08:41:40 AM: Wrote all preds for split 'test' to ./experiments/spr2-coref-cat/run
09/16 08:41:40 AM: Writing results for split 'val' to ./experiments/spr2-coref-cat/results.tsv
09/16 08:41:40 AM: micro_avg: 0.000, macro_avg: 0.824, edges-spr2_mcc: 0.722, edges-spr2_acc: 0.070, edges-spr2_precision: 0.835, edges-spr2_recall: 0.814, edges-spr2_f1: 0.824
09/16 08:41:40 AM: Done!
09/16 08:41:40 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
