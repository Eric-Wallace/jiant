09/16 08:33:50 AM: Git branch: master
09/16 08:33:50 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:33:50 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-mrpc-top/",
  "exp_name": "experiments/spr2-mrpc-top",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-mrpc-top/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/mrpc",
  "pytorch_transformers_output_mode": "top",
  "remote_log_name": "experiments/spr2-mrpc-top__run",
  "run_dir": "./experiments/spr2-mrpc-top/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:33:50 AM: Saved config to ./experiments/spr2-mrpc-top/run/params.conf
09/16 08:33:50 AM: Using random seed 1234
09/16 08:33:52 AM: Using GPU 0
09/16 08:33:52 AM: Loading tasks...
09/16 08:33:52 AM: Writing pre-preprocessed tasks to ./experiments/spr2-mrpc-top/
09/16 08:33:52 AM: 	Creating task edges-spr2 from scratch.
09/16 08:33:52 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:33:52 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:33:53 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:33:53 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:33:53 AM: 	Finished loading tasks: edges-spr2.
09/16 08:33:53 AM: 	Building vocab from scratch.
09/16 08:33:53 AM: 	Counting units for task edges-spr2.
09/16 08:33:53 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:33:54 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:33:54 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:33:54 AM: 	Saved vocab to ./experiments/spr2-mrpc-top/vocab
09/16 08:33:54 AM: Loading token dictionary from ./experiments/spr2-mrpc-top/vocab.
09/16 08:33:54 AM: 	Loaded vocab from ./experiments/spr2-mrpc-top/vocab
09/16 08:33:54 AM: 	Vocab namespace tokens: size 7943
09/16 08:33:54 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:33:54 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:33:54 AM: 	Vocab namespace chars: size 65
09/16 08:33:54 AM: 	Finished building vocab.
09/16 08:33:54 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-mrpc-top/preproc/edges-spr2__train_data
09/16 08:33:55 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-mrpc-top/preproc/edges-spr2__val_data
09/16 08:33:55 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:33:55 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-mrpc-top/preproc/edges-spr2__test_data
09/16 08:33:55 AM: 	Finished indexing tasks
09/16 08:33:55 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:33:55 AM: 	  Training on 
09/16 08:33:55 AM: 	  Evaluating on edges-spr2
09/16 08:33:55 AM: 	Finished loading tasks in 2.607s
09/16 08:33:55 AM: 	 Tasks: ['edges-spr2']
09/16 08:33:55 AM: Building model...
09/16 08:33:55 AM: Using BERT model (bert-base-uncased).
09/16 08:33:55 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:33:55 AM: models/mrpc
09/16 08:33:55 AM: loading configuration file models/mrpc/config.json
09/16 08:33:55 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "mrpc",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:33:55 AM: loading weights file models/mrpc/pytorch_model.bin
09/16 08:34:05 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmpx2c8spor
09/16 08:34:07 AM: copying /tmp/tmpx2c8spor to cache at ./experiments/spr2-mrpc-top/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: creating metadata file for ./experiments/spr2-mrpc-top/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: removing temp file /tmp/tmpx2c8spor
09/16 08:34:07 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-mrpc-top/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:34:07 AM: Initializing parameters
09/16 08:34:07 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:34:07 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:34:07 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:34:07 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:34:12 AM: Model specification:
09/16 08:34:12 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:34:12 AM: Model parameters:
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:34:12 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:34:12 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:34:12 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:12 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:34:12 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:12 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:34:12 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:12 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:12 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:34:12 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:34:12 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:34:12 AM: Total number of parameters: 110144020 (1.10144e+08)
09/16 08:34:12 AM: Number of trainable parameters: 661780 (661780)
09/16 08:34:12 AM: Finished building model in 17.387s
09/16 08:34:12 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:34:13 AM: patience = 9
09/16 08:34:13 AM: val_interval = 100
09/16 08:34:13 AM: max_vals = 100
09/16 08:34:13 AM: cuda_device = 0
09/16 08:34:13 AM: grad_norm = 5.0
09/16 08:34:13 AM: grad_clipping = None
09/16 08:34:13 AM: lr_decay = 0.99
09/16 08:34:13 AM: min_lr = 1e-06
09/16 08:34:13 AM: keep_all_checkpoints = 0
09/16 08:34:13 AM: val_data_limit = 5000
09/16 08:34:13 AM: max_epochs = -1
09/16 08:34:13 AM: dec_val_scale = 250
09/16 08:34:13 AM: training_data_fraction = 1
09/16 08:34:13 AM: type = adam
09/16 08:34:13 AM: parameter_groups = None
09/16 08:34:13 AM: Number of trainable parameters: 661780
09/16 08:34:13 AM: infer_type_and_cast = True
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: lr = 0.0001
09/16 08:34:13 AM: amsgrad = True
09/16 08:34:13 AM: type = reduce_on_plateau
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: mode = max
09/16 08:34:13 AM: factor = 0.5
09/16 08:34:13 AM: patience = 3
09/16 08:34:13 AM: threshold = 0.0001
09/16 08:34:13 AM: threshold_mode = abs
09/16 08:34:13 AM: verbose = True
09/16 08:34:13 AM: type = adam
09/16 08:34:13 AM: parameter_groups = None
09/16 08:34:13 AM: Number of trainable parameters: 661780
09/16 08:34:13 AM: infer_type_and_cast = True
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: lr = 0.0001
09/16 08:34:13 AM: amsgrad = True
09/16 08:34:13 AM: type = reduce_on_plateau
09/16 08:34:13 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:34:13 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:34:13 AM: mode = max
09/16 08:34:13 AM: factor = 0.5
09/16 08:34:13 AM: patience = 3
09/16 08:34:13 AM: threshold = 0.0001
09/16 08:34:13 AM: threshold_mode = abs
09/16 08:34:13 AM: verbose = True
09/16 08:34:13 AM: Starting training without restoring from a checkpoint.
09/16 08:34:13 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:34:13 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:34:22 AM: ***** Step 100 / Validation 1 *****
09/16 08:34:22 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:22 AM: Validating...
09/16 08:34:23 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.7129, acc: 0.0850, precision: 0.8505, recall: 0.7884, f1: 0.8183, edges-spr2_loss: 0.3150
09/16 08:34:23 AM: Best result seen so far for edges-spr2.
09/16 08:34:23 AM: Best result seen so far for micro.
09/16 08:34:23 AM: Best result seen so far for macro.
09/16 08:34:23 AM: Updating LR scheduler:
09/16 08:34:23 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:34:23 AM: 	# validation passes without improvement: 0
09/16 08:34:23 AM: edges-spr2_loss: training: 0.384002 validation: 0.346072
09/16 08:34:23 AM: macro_avg: validation: 0.804041
09/16 08:34:23 AM: micro_avg: validation: 0.000000
09/16 08:34:23 AM: edges-spr2_mcc: training: 0.610150 validation: 0.697031
09/16 08:34:23 AM: edges-spr2_acc: training: 0.036797 validation: 0.082540
09/16 08:34:23 AM: edges-spr2_precision: training: 0.770155 validation: 0.841310
09/16 08:34:23 AM: edges-spr2_recall: training: 0.727945 validation: 0.769934
09/16 08:34:23 AM: edges-spr2_f1: training: 0.748456 validation: 0.804041
09/16 08:34:23 AM: Global learning rate: 0.0001
09/16 08:34:23 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:34:32 AM: ***** Step 200 / Validation 2 *****
09/16 08:34:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:32 AM: Validating...
09/16 08:34:33 AM: Best result seen so far for edges-spr2.
09/16 08:34:33 AM: Best result seen so far for macro.
09/16 08:34:33 AM: Updating LR scheduler:
09/16 08:34:33 AM: 	Best result seen so far for macro_avg: 0.813
09/16 08:34:33 AM: 	# validation passes without improvement: 0
09/16 08:34:33 AM: edges-spr2_loss: training: 0.316462 validation: 0.328920
09/16 08:34:33 AM: macro_avg: validation: 0.813330
09/16 08:34:33 AM: micro_avg: validation: 0.000000
09/16 08:34:33 AM: edges-spr2_mcc: training: 0.693213 validation: 0.710808
09/16 08:34:33 AM: edges-spr2_acc: training: 0.070765 validation: 0.087302
09/16 08:34:33 AM: edges-spr2_precision: training: 0.826792 validation: 0.848464
09/16 08:34:33 AM: edges-spr2_recall: training: 0.777286 validation: 0.780991
09/16 08:34:33 AM: edges-spr2_f1: training: 0.801275 validation: 0.813330
09/16 08:34:33 AM: Global learning rate: 0.0001
09/16 08:34:33 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:34:33 AM: Update 201: task edges-spr2, batch 1 (201): mcc: 0.6984, acc: 0.0312, precision: 0.8311, recall: 0.7818, f1: 0.8057, edges-spr2_loss: 0.3135
09/16 08:34:42 AM: ***** Step 300 / Validation 3 *****
09/16 08:34:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:42 AM: Validating...
09/16 08:34:43 AM: Evaluate: task edges-spr2, batch 8 (10): mcc: 0.7219, acc: 0.0766, precision: 0.8361, recall: 0.8167, f1: 0.8263, edges-spr2_loss: 0.2933
09/16 08:34:43 AM: Best result seen so far for edges-spr2.
09/16 08:34:43 AM: Best result seen so far for macro.
09/16 08:34:43 AM: Updating LR scheduler:
09/16 08:34:43 AM: 	Best result seen so far for macro_avg: 0.820
09/16 08:34:43 AM: 	# validation passes without improvement: 0
09/16 08:34:43 AM: edges-spr2_loss: training: 0.297476 validation: 0.326476
09/16 08:34:43 AM: macro_avg: validation: 0.819998
09/16 08:34:43 AM: micro_avg: validation: 0.000000
09/16 08:34:43 AM: edges-spr2_mcc: training: 0.710230 validation: 0.715671
09/16 08:34:43 AM: edges-spr2_acc: training: 0.079994 validation: 0.077778
09/16 08:34:43 AM: edges-spr2_precision: training: 0.834441 validation: 0.833041
09/16 08:34:43 AM: edges-spr2_recall: training: 0.792760 validation: 0.807357
09/16 08:34:43 AM: edges-spr2_f1: training: 0.813067 validation: 0.819998
09/16 08:34:43 AM: Global learning rate: 0.0001
09/16 08:34:43 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:34:52 AM: ***** Step 400 / Validation 4 *****
09/16 08:34:52 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:34:52 AM: Validating...
09/16 08:34:53 AM: Updating LR scheduler:
09/16 08:34:53 AM: 	Best result seen so far for macro_avg: 0.820
09/16 08:34:53 AM: 	# validation passes without improvement: 1
09/16 08:34:53 AM: edges-spr2_loss: training: 0.289020 validation: 0.324312
09/16 08:34:53 AM: macro_avg: validation: 0.816870
09/16 08:34:53 AM: micro_avg: validation: 0.000000
09/16 08:34:53 AM: edges-spr2_mcc: training: 0.718440 validation: 0.718978
09/16 08:34:53 AM: edges-spr2_acc: training: 0.079661 validation: 0.096825
09/16 08:34:53 AM: edges-spr2_precision: training: 0.837498 validation: 0.861898
09/16 08:34:53 AM: edges-spr2_recall: training: 0.800611 validation: 0.776313
09/16 08:34:53 AM: edges-spr2_f1: training: 0.818639 validation: 0.816870
09/16 08:34:53 AM: Global learning rate: 0.0001
09/16 08:34:53 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:34:53 AM: Update 402: task edges-spr2, batch 2 (402): mcc: 0.7367, acc: 0.0588, precision: 0.8698, recall: 0.7929, f1: 0.8296, edges-spr2_loss: 0.2770
09/16 08:35:02 AM: ***** Step 500 / Validation 5 *****
09/16 08:35:02 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:02 AM: Validating...
09/16 08:35:03 AM: Best result seen so far for edges-spr2.
09/16 08:35:03 AM: Best result seen so far for macro.
09/16 08:35:03 AM: Updating LR scheduler:
09/16 08:35:03 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:35:03 AM: 	# validation passes without improvement: 0
09/16 08:35:03 AM: edges-spr2_loss: training: 0.281480 validation: 0.319666
09/16 08:35:03 AM: macro_avg: validation: 0.822535
09/16 08:35:03 AM: micro_avg: validation: 0.000000
09/16 08:35:03 AM: edges-spr2_mcc: training: 0.722881 validation: 0.723257
09/16 08:35:03 AM: edges-spr2_acc: training: 0.081215 validation: 0.090476
09/16 08:35:03 AM: edges-spr2_precision: training: 0.840418 validation: 0.850556
09/16 08:35:03 AM: edges-spr2_recall: training: 0.803991 validation: 0.796300
09/16 08:35:03 AM: edges-spr2_f1: training: 0.821801 validation: 0.822535
09/16 08:35:03 AM: Global learning rate: 0.0001
09/16 08:35:03 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:35:03 AM: Update 501: task edges-spr2, batch 1 (501): mcc: 0.7311, acc: 0.1250, precision: 0.8910, recall: 0.7640, f1: 0.8226, edges-spr2_loss: 0.2897
09/16 08:35:12 AM: ***** Step 600 / Validation 6 *****
09/16 08:35:12 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:12 AM: Validating...
09/16 08:35:13 AM: Best result seen so far for edges-spr2.
09/16 08:35:13 AM: Best result seen so far for macro.
09/16 08:35:13 AM: Updating LR scheduler:
09/16 08:35:13 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:35:13 AM: 	# validation passes without improvement: 0
09/16 08:35:13 AM: edges-spr2_loss: training: 0.276060 validation: 0.319231
09/16 08:35:13 AM: macro_avg: validation: 0.823452
09/16 08:35:13 AM: micro_avg: validation: 0.000000
09/16 08:35:13 AM: edges-spr2_mcc: training: 0.728094 validation: 0.724227
09/16 08:35:13 AM: edges-spr2_acc: training: 0.085799 validation: 0.087302
09/16 08:35:13 AM: edges-spr2_precision: training: 0.842460 validation: 0.849616
09/16 08:35:13 AM: edges-spr2_recall: training: 0.808504 validation: 0.798852
09/16 08:35:13 AM: edges-spr2_f1: training: 0.825133 validation: 0.823452
09/16 08:35:13 AM: Global learning rate: 0.0001
09/16 08:35:13 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:35:13 AM: Update 606: task edges-spr2, batch 6 (606): mcc: 0.7459, acc: 0.0946, precision: 0.8681, recall: 0.8059, f1: 0.8358, edges-spr2_loss: 0.2694
09/16 08:35:21 AM: ***** Step 700 / Validation 7 *****
09/16 08:35:21 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:21 AM: Validating...
09/16 08:35:22 AM: Best result seen so far for edges-spr2.
09/16 08:35:22 AM: Best result seen so far for macro.
09/16 08:35:22 AM: Updating LR scheduler:
09/16 08:35:22 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:35:22 AM: 	# validation passes without improvement: 1
09/16 08:35:22 AM: edges-spr2_loss: training: 0.270709 validation: 0.320170
09/16 08:35:22 AM: macro_avg: validation: 0.823517
09/16 08:35:22 AM: micro_avg: validation: 0.000000
09/16 08:35:22 AM: edges-spr2_mcc: training: 0.735187 validation: 0.723702
09/16 08:35:22 AM: edges-spr2_acc: training: 0.088398 validation: 0.082540
09/16 08:35:22 AM: edges-spr2_precision: training: 0.848790 validation: 0.847122
09/16 08:35:22 AM: edges-spr2_recall: training: 0.811272 validation: 0.801191
09/16 08:35:22 AM: edges-spr2_f1: training: 0.829607 validation: 0.823517
09/16 08:35:22 AM: Global learning rate: 0.0001
09/16 08:35:22 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:35:23 AM: Update 704: task edges-spr2, batch 4 (704): mcc: 0.7092, acc: 0.0628, precision: 0.8258, recall: 0.8003, f1: 0.8129, edges-spr2_loss: 0.2973
09/16 08:35:32 AM: ***** Step 800 / Validation 8 *****
09/16 08:35:32 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:32 AM: Validating...
09/16 08:35:33 AM: Updating LR scheduler:
09/16 08:35:33 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:35:33 AM: 	# validation passes without improvement: 2
09/16 08:35:33 AM: edges-spr2_loss: training: 0.266848 validation: 0.320506
09/16 08:35:33 AM: macro_avg: validation: 0.821113
09/16 08:35:33 AM: micro_avg: validation: 0.000000
09/16 08:35:33 AM: edges-spr2_mcc: training: 0.738914 validation: 0.722313
09/16 08:35:33 AM: edges-spr2_acc: training: 0.098816 validation: 0.084127
09/16 08:35:33 AM: edges-spr2_precision: training: 0.849907 validation: 0.854124
09/16 08:35:33 AM: edges-spr2_recall: training: 0.815011 validation: 0.790559
09/16 08:35:33 AM: edges-spr2_f1: training: 0.832094 validation: 0.821113
09/16 08:35:33 AM: Global learning rate: 0.0001
09/16 08:35:33 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:35:33 AM: Update 811: task edges-spr2, batch 11 (811): mcc: 0.7391, acc: 0.0888, precision: 0.8501, recall: 0.8164, f1: 0.8329, edges-spr2_loss: 0.2667
09/16 08:35:41 AM: ***** Step 900 / Validation 9 *****
09/16 08:35:41 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:41 AM: Validating...
09/16 08:35:42 AM: Updating LR scheduler:
09/16 08:35:42 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:35:42 AM: 	# validation passes without improvement: 3
09/16 08:35:42 AM: edges-spr2_loss: training: 0.264739 validation: 0.322482
09/16 08:35:42 AM: macro_avg: validation: 0.817711
09/16 08:35:42 AM: micro_avg: validation: 0.000000
09/16 08:35:42 AM: edges-spr2_mcc: training: 0.739123 validation: 0.716393
09/16 08:35:42 AM: edges-spr2_acc: training: 0.092817 validation: 0.077778
09/16 08:35:42 AM: edges-spr2_precision: training: 0.849727 validation: 0.848263
09/16 08:35:42 AM: edges-spr2_recall: training: 0.814979 validation: 0.789283
09/16 08:35:42 AM: edges-spr2_f1: training: 0.831990 validation: 0.817711
09/16 08:35:42 AM: Global learning rate: 0.0001
09/16 08:35:42 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:35:43 AM: Update 911: task edges-spr2, batch 11 (911): mcc: 0.7261, acc: 0.0840, precision: 0.8426, recall: 0.8112, f1: 0.8266, edges-spr2_loss: 0.2778
09/16 08:35:51 AM: ***** Step 1000 / Validation 10 *****
09/16 08:35:51 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:35:51 AM: Validating...
09/16 08:35:52 AM: Updating LR scheduler:
09/16 08:35:52 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:35:52 AM: 	# validation passes without improvement: 0
09/16 08:35:52 AM: edges-spr2_loss: training: 0.263576 validation: 0.322342
09/16 08:35:52 AM: macro_avg: validation: 0.819482
09/16 08:35:52 AM: micro_avg: validation: 0.000000
09/16 08:35:52 AM: edges-spr2_mcc: training: 0.739095 validation: 0.717220
09/16 08:35:52 AM: edges-spr2_acc: training: 0.095337 validation: 0.077778
09/16 08:35:52 AM: edges-spr2_precision: training: 0.850516 validation: 0.842389
09/16 08:35:52 AM: edges-spr2_recall: training: 0.815634 validation: 0.797789
09/16 08:35:52 AM: edges-spr2_f1: training: 0.832710 validation: 0.819482
09/16 08:35:52 AM: Global learning rate: 5e-05
09/16 08:35:52 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:35:54 AM: Update 1017: task edges-spr2, batch 17 (1017): mcc: 0.7482, acc: 0.1048, precision: 0.8505, recall: 0.8300, f1: 0.8401, edges-spr2_loss: 0.2613
09/16 08:36:01 AM: ***** Step 1100 / Validation 11 *****
09/16 08:36:01 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:01 AM: Validating...
09/16 08:36:02 AM: Updating LR scheduler:
09/16 08:36:02 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:36:02 AM: 	# validation passes without improvement: 1
09/16 08:36:02 AM: edges-spr2_loss: training: 0.258031 validation: 0.320963
09/16 08:36:02 AM: macro_avg: validation: 0.817088
09/16 08:36:02 AM: micro_avg: validation: 0.000000
09/16 08:36:02 AM: edges-spr2_mcc: training: 0.746109 validation: 0.715944
09/16 08:36:02 AM: edges-spr2_acc: training: 0.101715 validation: 0.084127
09/16 08:36:02 AM: edges-spr2_precision: training: 0.852913 validation: 0.849633
09/16 08:36:02 AM: edges-spr2_recall: training: 0.821175 validation: 0.786945
09/16 08:36:02 AM: edges-spr2_f1: training: 0.836743 validation: 0.817088
09/16 08:36:02 AM: Global learning rate: 5e-05
09/16 08:36:02 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:36:04 AM: Update 1121: task edges-spr2, batch 21 (1121): mcc: 0.7450, acc: 0.1080, precision: 0.8554, recall: 0.8173, f1: 0.8359, edges-spr2_loss: 0.2635
09/16 08:36:11 AM: ***** Step 1200 / Validation 12 *****
09/16 08:36:11 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:11 AM: Validating...
09/16 08:36:12 AM: Updating LR scheduler:
09/16 08:36:12 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:36:12 AM: 	# validation passes without improvement: 2
09/16 08:36:12 AM: edges-spr2_loss: training: 0.257635 validation: 0.322549
09/16 08:36:12 AM: macro_avg: validation: 0.820712
09/16 08:36:12 AM: micro_avg: validation: 0.000000
09/16 08:36:12 AM: edges-spr2_mcc: training: 0.744834 validation: 0.716609
09/16 08:36:12 AM: edges-spr2_acc: training: 0.105124 validation: 0.074603
09/16 08:36:12 AM: edges-spr2_precision: training: 0.852970 validation: 0.832932
09/16 08:36:12 AM: edges-spr2_recall: training: 0.819860 validation: 0.808845
09/16 08:36:12 AM: edges-spr2_f1: training: 0.836087 validation: 0.820712
09/16 08:36:12 AM: Global learning rate: 5e-05
09/16 08:36:12 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:36:14 AM: Update 1226: task edges-spr2, batch 26 (1226): mcc: 0.7539, acc: 0.1181, precision: 0.8589, recall: 0.8254, f1: 0.8418, edges-spr2_loss: 0.2546
09/16 08:36:20 AM: ***** Step 1300 / Validation 13 *****
09/16 08:36:20 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:20 AM: Validating...
09/16 08:36:21 AM: Updating LR scheduler:
09/16 08:36:21 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:36:21 AM: 	# validation passes without improvement: 3
09/16 08:36:21 AM: edges-spr2_loss: training: 0.255106 validation: 0.323506
09/16 08:36:21 AM: macro_avg: validation: 0.816483
09/16 08:36:21 AM: micro_avg: validation: 0.000000
09/16 08:36:21 AM: edges-spr2_mcc: training: 0.749100 validation: 0.712701
09/16 08:36:21 AM: edges-spr2_acc: training: 0.105620 validation: 0.077778
09/16 08:36:21 AM: edges-spr2_precision: training: 0.854801 validation: 0.840081
09/16 08:36:21 AM: edges-spr2_recall: training: 0.823140 validation: 0.794174
09/16 08:36:21 AM: edges-spr2_f1: training: 0.838672 validation: 0.816483
09/16 08:36:21 AM: Global learning rate: 5e-05
09/16 08:36:21 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:36:24 AM: Update 1331: task edges-spr2, batch 31 (1331): mcc: 0.7533, acc: 0.1178, precision: 0.8564, recall: 0.8289, f1: 0.8424, edges-spr2_loss: 0.2536
09/16 08:36:30 AM: ***** Step 1400 / Validation 14 *****
09/16 08:36:30 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:30 AM: Validating...
09/16 08:36:31 AM: Updating LR scheduler:
09/16 08:36:31 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:36:31 AM: 	# validation passes without improvement: 0
09/16 08:36:31 AM: edges-spr2_loss: training: 0.253223 validation: 0.322691
09/16 08:36:31 AM: macro_avg: validation: 0.818062
09/16 08:36:31 AM: micro_avg: validation: 0.000000
09/16 08:36:31 AM: edges-spr2_mcc: training: 0.750704 validation: 0.715797
09/16 08:36:31 AM: edges-spr2_acc: training: 0.108760 validation: 0.079365
09/16 08:36:31 AM: edges-spr2_precision: training: 0.854848 validation: 0.844153
09/16 08:36:31 AM: edges-spr2_recall: training: 0.826217 validation: 0.793536
09/16 08:36:31 AM: edges-spr2_f1: training: 0.840289 validation: 0.818062
09/16 08:36:31 AM: Global learning rate: 2.5e-05
09/16 08:36:31 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:36:34 AM: Update 1438: task edges-spr2, batch 38 (1438): mcc: 0.7531, acc: 0.1144, precision: 0.8604, recall: 0.8225, f1: 0.8411, edges-spr2_loss: 0.2513
09/16 08:36:40 AM: ***** Step 1500 / Validation 15 *****
09/16 08:36:40 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:40 AM: Validating...
09/16 08:36:41 AM: Updating LR scheduler:
09/16 08:36:41 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:36:41 AM: 	# validation passes without improvement: 1
09/16 08:36:41 AM: edges-spr2_loss: training: 0.251090 validation: 0.321551
09/16 08:36:41 AM: macro_avg: validation: 0.820220
09/16 08:36:41 AM: micro_avg: validation: 0.000000
09/16 08:36:41 AM: edges-spr2_mcc: training: 0.751376 validation: 0.715661
09/16 08:36:41 AM: edges-spr2_acc: training: 0.104513 validation: 0.071429
09/16 08:36:41 AM: edges-spr2_precision: training: 0.858498 validation: 0.831694
09/16 08:36:41 AM: edges-spr2_recall: training: 0.822835 validation: 0.809058
09/16 08:36:41 AM: edges-spr2_f1: training: 0.840289 validation: 0.820220
09/16 08:36:41 AM: Global learning rate: 2.5e-05
09/16 08:36:41 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:36:45 AM: Update 1541: task edges-spr2, batch 41 (1541): mcc: 0.7511, acc: 0.1081, precision: 0.8552, recall: 0.8246, f1: 0.8396, edges-spr2_loss: 0.2521
09/16 08:36:50 AM: ***** Step 1600 / Validation 16 *****
09/16 08:36:50 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:50 AM: Validating...
09/16 08:36:50 AM: Updating LR scheduler:
09/16 08:36:50 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:36:50 AM: 	# validation passes without improvement: 2
09/16 08:36:50 AM: edges-spr2_loss: training: 0.250815 validation: 0.321892
09/16 08:36:50 AM: macro_avg: validation: 0.819933
09/16 08:36:50 AM: micro_avg: validation: 0.000000
09/16 08:36:50 AM: edges-spr2_mcc: training: 0.752794 validation: 0.717128
09/16 08:36:50 AM: edges-spr2_acc: training: 0.104778 validation: 0.073016
09/16 08:36:50 AM: edges-spr2_precision: training: 0.856518 validation: 0.839572
09/16 08:36:50 AM: edges-spr2_recall: training: 0.826377 validation: 0.801191
09/16 08:36:50 AM: edges-spr2_f1: training: 0.841177 validation: 0.819933
09/16 08:36:50 AM: Global learning rate: 2.5e-05
09/16 08:36:50 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:36:55 AM: Update 1650: task edges-spr2, batch 50 (1650): mcc: 0.7555, acc: 0.1087, precision: 0.8577, recall: 0.8297, f1: 0.8434, edges-spr2_loss: 0.2484
09/16 08:36:59 AM: ***** Step 1700 / Validation 17 *****
09/16 08:36:59 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:36:59 AM: Validating...
09/16 08:37:00 AM: Updating LR scheduler:
09/16 08:37:00 AM: 	Best result seen so far for macro_avg: 0.823
09/16 08:37:00 AM: 	# validation passes without improvement: 3
09/16 08:37:00 AM: Ran out of early stopping patience. Stopping training.
09/16 08:37:00 AM: edges-spr2_loss: training: 0.249821 validation: 0.320876
09/16 08:37:00 AM: macro_avg: validation: 0.818558
09/16 08:37:00 AM: micro_avg: validation: 0.000000
09/16 08:37:00 AM: edges-spr2_mcc: training: 0.753046 validation: 0.715174
09/16 08:37:00 AM: edges-spr2_acc: training: 0.109096 validation: 0.074603
09/16 08:37:00 AM: edges-spr2_precision: training: 0.856084 validation: 0.839027
09/16 08:37:00 AM: edges-spr2_recall: training: 0.827395 validation: 0.799064
09/16 08:37:00 AM: edges-spr2_f1: training: 0.841496 validation: 0.818558
09/16 08:37:00 AM: Global learning rate: 2.5e-05
09/16 08:37:00 AM: Saving checkpoints to: ./experiments/spr2-mrpc-top/run
09/16 08:37:00 AM: Stopped training after 17 validation checks
09/16 08:37:00 AM: Trained edges-spr2 for 1700 batches or 24.286 epochs
09/16 08:37:00 AM: ***** VALIDATION RESULTS *****
09/16 08:37:00 AM: edges-spr2_f1 (for best val pass 7): edges-spr2_loss: 0.32017, macro_avg: 0.82352, micro_avg: 0.00000, edges-spr2_mcc: 0.72370, edges-spr2_acc: 0.08254, edges-spr2_precision: 0.84712, edges-spr2_recall: 0.80119, edges-spr2_f1: 0.82352
09/16 08:37:00 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.34607, macro_avg: 0.80404, micro_avg: 0.00000, edges-spr2_mcc: 0.69703, edges-spr2_acc: 0.08254, edges-spr2_precision: 0.84131, edges-spr2_recall: 0.76993, edges-spr2_f1: 0.80404
09/16 08:37:00 AM: macro_avg (for best val pass 7): edges-spr2_loss: 0.32017, macro_avg: 0.82352, micro_avg: 0.00000, edges-spr2_mcc: 0.72370, edges-spr2_acc: 0.08254, edges-spr2_precision: 0.84712, edges-spr2_recall: 0.80119, edges-spr2_f1: 0.82352
09/16 08:37:00 AM: Evaluating...
09/16 08:37:00 AM: Loaded model state from ./experiments/spr2-mrpc-top/run/edges-spr2/model_state_target_train_val_7.best.th
09/16 08:37:00 AM: Evaluating on: edges-spr2, split: val
09/16 08:37:01 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:37:01 AM: Finished evaluating on: edges-spr2
09/16 08:37:01 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:37:01 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mrpc-top/run
09/16 08:37:01 AM: Wrote all preds for split 'val' to ./experiments/spr2-mrpc-top/run
09/16 08:37:01 AM: Evaluating on: edges-spr2, split: test
09/16 08:37:02 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:37:02 AM: Finished evaluating on: edges-spr2
09/16 08:37:02 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:37:02 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-mrpc-top/run
09/16 08:37:02 AM: Wrote all preds for split 'test' to ./experiments/spr2-mrpc-top/run
09/16 08:37:02 AM: Writing results for split 'val' to ./experiments/spr2-mrpc-top/results.tsv
09/16 08:37:02 AM: micro_avg: 0.000, macro_avg: 0.824, edges-spr2_mcc: 0.724, edges-spr2_acc: 0.083, edges-spr2_precision: 0.847, edges-spr2_recall: 0.801, edges-spr2_f1: 0.824
09/16 08:37:02 AM: Done!
09/16 08:37:02 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
