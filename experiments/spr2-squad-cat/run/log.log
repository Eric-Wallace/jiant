09/16 08:49:21 AM: Git branch: master
09/16 08:49:21 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:49:21 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-squad-cat/",
  "exp_name": "experiments/spr2-squad-cat",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-squad-cat/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/squad",
  "pytorch_transformers_output_mode": "cat",
  "remote_log_name": "experiments/spr2-squad-cat__run",
  "run_dir": "./experiments/spr2-squad-cat/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:49:21 AM: Saved config to ./experiments/spr2-squad-cat/run/params.conf
09/16 08:49:21 AM: Using random seed 1234
09/16 08:49:23 AM: Using GPU 0
09/16 08:49:23 AM: Loading tasks...
09/16 08:49:23 AM: Writing pre-preprocessed tasks to ./experiments/spr2-squad-cat/
09/16 08:49:23 AM: 	Creating task edges-spr2 from scratch.
09/16 08:49:23 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:49:23 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:49:23 AM: 	Finished loading tasks: edges-spr2.
09/16 08:49:23 AM: 	Building vocab from scratch.
09/16 08:49:23 AM: 	Counting units for task edges-spr2.
09/16 08:49:23 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:49:24 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:24 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:49:25 AM: 	Saved vocab to ./experiments/spr2-squad-cat/vocab
09/16 08:49:25 AM: Loading token dictionary from ./experiments/spr2-squad-cat/vocab.
09/16 08:49:25 AM: 	Loaded vocab from ./experiments/spr2-squad-cat/vocab
09/16 08:49:25 AM: 	Vocab namespace tokens: size 7943
09/16 08:49:25 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:49:25 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:49:25 AM: 	Vocab namespace chars: size 65
09/16 08:49:25 AM: 	Finished building vocab.
09/16 08:49:25 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:49:25 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-squad-cat/preproc/edges-spr2__train_data
09/16 08:49:25 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:49:25 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-squad-cat/preproc/edges-spr2__val_data
09/16 08:49:25 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:49:25 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-squad-cat/preproc/edges-spr2__test_data
09/16 08:49:25 AM: 	Finished indexing tasks
09/16 08:49:25 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:49:25 AM: 	  Training on 
09/16 08:49:25 AM: 	  Evaluating on edges-spr2
09/16 08:49:25 AM: 	Finished loading tasks in 2.388s
09/16 08:49:25 AM: 	 Tasks: ['edges-spr2']
09/16 08:49:25 AM: Building model...
09/16 08:49:25 AM: Using BERT model (bert-base-uncased).
09/16 08:49:25 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:49:25 AM: models/squad
09/16 08:49:25 AM: loading configuration file models/squad/config.json
09/16 08:49:25 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": null,
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:49:25 AM: loading weights file models/squad/pytorch_model.bin
09/16 08:49:37 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmp1e_4m3bc
09/16 08:49:40 AM: copying /tmp/tmp1e_4m3bc to cache at ./experiments/spr2-squad-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:40 AM: creating metadata file for ./experiments/spr2-squad-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:40 AM: removing temp file /tmp/tmp1e_4m3bc
09/16 08:49:40 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-squad-cat/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:49:40 AM: Initializing parameters
09/16 08:49:40 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:49:40 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:49:40 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:49:40 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:49:40 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:49:40 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:49:40 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:49:46 AM: Model specification:
09/16 08:49:46 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(1536, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:49:46 AM: Model parameters:
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:49:46 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:49:46 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:49:46 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:46 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 393216 with torch.Size([256, 1536, 1])
09/16 08:49:46 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:46 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:49:46 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:46 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:46 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:49:46 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:49:46 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:49:46 AM: Total number of parameters: 110537236 (1.10537e+08)
09/16 08:49:46 AM: Number of trainable parameters: 1054996 (1.055e+06)
09/16 08:49:46 AM: Finished building model in 20.438s
09/16 08:49:46 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:49:46 AM: patience = 9
09/16 08:49:46 AM: val_interval = 100
09/16 08:49:46 AM: max_vals = 100
09/16 08:49:46 AM: cuda_device = 0
09/16 08:49:46 AM: grad_norm = 5.0
09/16 08:49:46 AM: grad_clipping = None
09/16 08:49:46 AM: lr_decay = 0.99
09/16 08:49:46 AM: min_lr = 1e-06
09/16 08:49:46 AM: keep_all_checkpoints = 0
09/16 08:49:46 AM: val_data_limit = 5000
09/16 08:49:46 AM: max_epochs = -1
09/16 08:49:46 AM: dec_val_scale = 250
09/16 08:49:46 AM: training_data_fraction = 1
09/16 08:49:46 AM: type = adam
09/16 08:49:46 AM: parameter_groups = None
09/16 08:49:46 AM: Number of trainable parameters: 1054996
09/16 08:49:46 AM: infer_type_and_cast = True
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: lr = 0.0001
09/16 08:49:46 AM: amsgrad = True
09/16 08:49:46 AM: type = reduce_on_plateau
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: mode = max
09/16 08:49:46 AM: factor = 0.5
09/16 08:49:46 AM: patience = 3
09/16 08:49:46 AM: threshold = 0.0001
09/16 08:49:46 AM: threshold_mode = abs
09/16 08:49:46 AM: verbose = True
09/16 08:49:46 AM: type = adam
09/16 08:49:46 AM: parameter_groups = None
09/16 08:49:46 AM: Number of trainable parameters: 1054996
09/16 08:49:46 AM: infer_type_and_cast = True
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: lr = 0.0001
09/16 08:49:46 AM: amsgrad = True
09/16 08:49:46 AM: type = reduce_on_plateau
09/16 08:49:46 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:49:46 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:49:46 AM: mode = max
09/16 08:49:46 AM: factor = 0.5
09/16 08:49:46 AM: patience = 3
09/16 08:49:46 AM: threshold = 0.0001
09/16 08:49:46 AM: threshold_mode = abs
09/16 08:49:46 AM: verbose = True
09/16 08:49:46 AM: Starting training without restoring from a checkpoint.
09/16 08:49:46 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:49:46 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:49:56 AM: ***** Step 100 / Validation 1 *****
09/16 08:49:56 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:49:56 AM: Validating...
09/16 08:49:57 AM: Evaluate: task edges-spr2, batch 7 (10): mcc: 0.6952, acc: 0.0573, precision: 0.8373, recall: 0.7796, f1: 0.8075, edges-spr2_loss: 0.3177
09/16 08:49:57 AM: Best result seen so far for edges-spr2.
09/16 08:49:57 AM: Best result seen so far for micro.
09/16 08:49:57 AM: Best result seen so far for macro.
09/16 08:49:57 AM: Updating LR scheduler:
09/16 08:49:57 AM: 	Best result seen so far for macro_avg: 0.794
09/16 08:49:57 AM: 	# validation passes without improvement: 0
09/16 08:49:57 AM: edges-spr2_loss: training: 0.369660 validation: 0.352659
09/16 08:49:57 AM: macro_avg: validation: 0.794248
09/16 08:49:57 AM: micro_avg: validation: 0.000000
09/16 08:49:57 AM: edges-spr2_mcc: training: 0.623053 validation: 0.680798
09/16 08:49:57 AM: edges-spr2_acc: training: 0.043846 validation: 0.063492
09/16 08:49:57 AM: edges-spr2_precision: training: 0.781994 validation: 0.827761
09/16 08:49:57 AM: edges-spr2_recall: training: 0.731469 validation: 0.763343
09/16 08:49:57 AM: edges-spr2_f1: training: 0.755888 validation: 0.794248
09/16 08:49:57 AM: Global learning rate: 0.0001
09/16 08:49:57 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:05 AM: ***** Step 200 / Validation 2 *****
09/16 08:50:05 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:05 AM: Validating...
09/16 08:50:06 AM: Best result seen so far for edges-spr2.
09/16 08:50:06 AM: Best result seen so far for macro.
09/16 08:50:06 AM: Updating LR scheduler:
09/16 08:50:06 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:50:06 AM: 	# validation passes without improvement: 0
09/16 08:50:06 AM: edges-spr2_loss: training: 0.314661 validation: 0.335844
09/16 08:50:06 AM: macro_avg: validation: 0.803792
09/16 08:50:06 AM: micro_avg: validation: 0.000000
09/16 08:50:06 AM: edges-spr2_mcc: training: 0.687257 validation: 0.697885
09/16 08:50:06 AM: edges-spr2_acc: training: 0.059900 validation: 0.082540
09/16 08:50:06 AM: edges-spr2_precision: training: 0.826440 validation: 0.845378
09/16 08:50:06 AM: edges-spr2_recall: training: 0.768948 validation: 0.766107
09/16 08:50:06 AM: edges-spr2_f1: training: 0.796658 validation: 0.803792
09/16 08:50:06 AM: Global learning rate: 0.0001
09/16 08:50:06 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:07 AM: Update 209: task edges-spr2, batch 9 (209): mcc: 0.7026, acc: 0.0781, precision: 0.8415, recall: 0.7728, f1: 0.8057, edges-spr2_loss: 0.2977
09/16 08:50:15 AM: ***** Step 300 / Validation 3 *****
09/16 08:50:15 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:15 AM: Validating...
09/16 08:50:16 AM: Best result seen so far for edges-spr2.
09/16 08:50:16 AM: Best result seen so far for macro.
09/16 08:50:16 AM: Updating LR scheduler:
09/16 08:50:16 AM: 	Best result seen so far for macro_avg: 0.815
09/16 08:50:16 AM: 	# validation passes without improvement: 0
09/16 08:50:16 AM: edges-spr2_loss: training: 0.295422 validation: 0.326522
09/16 08:50:16 AM: macro_avg: validation: 0.815419
09/16 08:50:16 AM: micro_avg: validation: 0.000000
09/16 08:50:16 AM: edges-spr2_mcc: training: 0.707356 validation: 0.707323
09/16 08:50:16 AM: edges-spr2_acc: training: 0.074614 validation: 0.063492
09/16 08:50:16 AM: edges-spr2_precision: training: 0.836768 validation: 0.823644
09/16 08:50:16 AM: edges-spr2_recall: training: 0.785652 validation: 0.807357
09/16 08:50:16 AM: edges-spr2_f1: training: 0.810405 validation: 0.815419
09/16 08:50:16 AM: Global learning rate: 0.0001
09/16 08:50:16 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:17 AM: Update 312: task edges-spr2, batch 12 (312): mcc: 0.7086, acc: 0.0744, precision: 0.8288, recall: 0.7957, f1: 0.8119, edges-spr2_loss: 0.2915
09/16 08:50:24 AM: ***** Step 400 / Validation 4 *****
09/16 08:50:24 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:24 AM: Validating...
09/16 08:50:24 AM: Best result seen so far for edges-spr2.
09/16 08:50:24 AM: Best result seen so far for macro.
09/16 08:50:24 AM: Updating LR scheduler:
09/16 08:50:24 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:50:24 AM: 	# validation passes without improvement: 0
09/16 08:50:24 AM: edges-spr2_loss: training: 0.283700 validation: 0.324612
09/16 08:50:24 AM: macro_avg: validation: 0.816599
09/16 08:50:24 AM: micro_avg: validation: 0.000000
09/16 08:50:24 AM: edges-spr2_mcc: training: 0.721221 validation: 0.713278
09/16 08:50:24 AM: edges-spr2_acc: training: 0.080226 validation: 0.068254
09/16 08:50:24 AM: edges-spr2_precision: training: 0.839518 validation: 0.841761
09/16 08:50:24 AM: edges-spr2_recall: training: 0.802120 validation: 0.792898
09/16 08:50:24 AM: edges-spr2_f1: training: 0.820393 validation: 0.816599
09/16 08:50:24 AM: Global learning rate: 0.0001
09/16 08:50:24 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:27 AM: Update 422: task edges-spr2, batch 22 (422): mcc: 0.7174, acc: 0.0913, precision: 0.8424, recall: 0.7945, f1: 0.8178, edges-spr2_loss: 0.2828
09/16 08:50:33 AM: ***** Step 500 / Validation 5 *****
09/16 08:50:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:33 AM: Validating...
09/16 08:50:34 AM: Updating LR scheduler:
09/16 08:50:34 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:50:34 AM: 	# validation passes without improvement: 1
09/16 08:50:34 AM: edges-spr2_loss: training: 0.273592 validation: 0.320691
09/16 08:50:34 AM: macro_avg: validation: 0.815657
09/16 08:50:34 AM: micro_avg: validation: 0.000000
09/16 08:50:34 AM: edges-spr2_mcc: training: 0.729847 validation: 0.711478
09/16 08:50:34 AM: edges-spr2_acc: training: 0.090870 validation: 0.082540
09/16 08:50:34 AM: edges-spr2_precision: training: 0.845311 validation: 0.839523
09/16 08:50:34 AM: edges-spr2_recall: training: 0.807967 validation: 0.793111
09/16 08:50:34 AM: edges-spr2_f1: training: 0.826217 validation: 0.815657
09/16 08:50:34 AM: Global learning rate: 0.0001
09/16 08:50:34 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:37 AM: Update 538: task edges-spr2, batch 38 (538): mcc: 0.7352, acc: 0.0906, precision: 0.8490, recall: 0.8109, f1: 0.8295, edges-spr2_loss: 0.2672
09/16 08:50:42 AM: ***** Step 600 / Validation 6 *****
09/16 08:50:42 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:42 AM: Validating...
09/16 08:50:43 AM: Updating LR scheduler:
09/16 08:50:43 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:50:43 AM: 	# validation passes without improvement: 2
09/16 08:50:43 AM: edges-spr2_loss: training: 0.265827 validation: 0.322937
09/16 08:50:43 AM: macro_avg: validation: 0.811161
09/16 08:50:43 AM: micro_avg: validation: 0.000000
09/16 08:50:43 AM: edges-spr2_mcc: training: 0.738054 validation: 0.709487
09/16 08:50:43 AM: edges-spr2_acc: training: 0.097210 validation: 0.084127
09/16 08:50:43 AM: edges-spr2_precision: training: 0.849032 validation: 0.853653
09/16 08:50:43 AM: edges-spr2_recall: training: 0.814714 validation: 0.772698
09/16 08:50:43 AM: edges-spr2_f1: training: 0.831519 validation: 0.811161
09/16 08:50:43 AM: Global learning rate: 0.0001
09/16 08:50:43 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:47 AM: Update 647: task edges-spr2, batch 47 (647): mcc: 0.7380, acc: 0.0821, precision: 0.8480, recall: 0.8161, f1: 0.8317, edges-spr2_loss: 0.2624
09/16 08:50:50 AM: ***** Step 700 / Validation 7 *****
09/16 08:50:50 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:50 AM: Validating...
09/16 08:50:51 AM: Updating LR scheduler:
09/16 08:50:51 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:50:51 AM: 	# validation passes without improvement: 3
09/16 08:50:51 AM: edges-spr2_loss: training: 0.259685 validation: 0.320638
09/16 08:50:51 AM: macro_avg: validation: 0.813768
09/16 08:50:51 AM: micro_avg: validation: 0.000000
09/16 08:50:51 AM: edges-spr2_mcc: training: 0.743040 validation: 0.705666
09/16 08:50:51 AM: edges-spr2_acc: training: 0.094650 validation: 0.073016
09/16 08:50:51 AM: edges-spr2_precision: training: 0.852648 validation: 0.826068
09/16 08:50:51 AM: edges-spr2_recall: training: 0.817788 validation: 0.801829
09/16 08:50:51 AM: edges-spr2_f1: training: 0.834854 validation: 0.813768
09/16 08:50:51 AM: Global learning rate: 0.0001
09/16 08:50:51 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:50:57 AM: Update 769: task edges-spr2, batch 69 (769): mcc: 0.7484, acc: 0.1057, precision: 0.8527, recall: 0.8250, f1: 0.8386, edges-spr2_loss: 0.2554
09/16 08:50:59 AM: ***** Step 800 / Validation 8 *****
09/16 08:50:59 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:50:59 AM: Validating...
09/16 08:51:00 AM: Updating LR scheduler:
09/16 08:51:00 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:00 AM: 	# validation passes without improvement: 0
09/16 08:51:00 AM: edges-spr2_loss: training: 0.253372 validation: 0.319165
09/16 08:51:00 AM: macro_avg: validation: 0.816335
09/16 08:51:00 AM: micro_avg: validation: 0.000000
09/16 08:51:00 AM: edges-spr2_mcc: training: 0.749655 validation: 0.707950
09/16 08:51:00 AM: edges-spr2_acc: training: 0.105233 validation: 0.079365
09/16 08:51:00 AM: edges-spr2_precision: training: 0.854495 validation: 0.820899
09/16 08:51:00 AM: edges-spr2_recall: training: 0.824744 validation: 0.811822
09/16 08:51:00 AM: edges-spr2_f1: training: 0.839356 validation: 0.816335
09/16 08:51:00 AM: Global learning rate: 5e-05
09/16 08:51:00 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:07 AM: Update 883: task edges-spr2, batch 83 (883): mcc: 0.7587, acc: 0.1130, precision: 0.8595, recall: 0.8313, f1: 0.8452, edges-spr2_loss: 0.2469
09/16 08:51:08 AM: ***** Step 900 / Validation 9 *****
09/16 08:51:08 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:08 AM: Validating...
09/16 08:51:09 AM: Updating LR scheduler:
09/16 08:51:09 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:09 AM: 	# validation passes without improvement: 1
09/16 08:51:09 AM: edges-spr2_loss: training: 0.247140 validation: 0.322176
09/16 08:51:09 AM: macro_avg: validation: 0.813118
09/16 08:51:09 AM: micro_avg: validation: 0.000000
09/16 08:51:09 AM: edges-spr2_mcc: training: 0.758611 validation: 0.705973
09/16 08:51:09 AM: edges-spr2_acc: training: 0.110667 validation: 0.068254
09/16 08:51:09 AM: edges-spr2_precision: training: 0.859811 validation: 0.830892
09/16 08:51:09 AM: edges-spr2_recall: training: 0.830510 validation: 0.796088
09/16 08:51:09 AM: edges-spr2_f1: training: 0.844906 validation: 0.813118
09/16 08:51:09 AM: Global learning rate: 5e-05
09/16 08:51:09 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:17 AM: Update 995: task edges-spr2, batch 95 (995): mcc: 0.7584, acc: 0.1102, precision: 0.8593, recall: 0.8323, f1: 0.8456, edges-spr2_loss: 0.2450
09/16 08:51:17 AM: ***** Step 1000 / Validation 10 *****
09/16 08:51:17 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:17 AM: Validating...
09/16 08:51:18 AM: Updating LR scheduler:
09/16 08:51:18 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:18 AM: 	# validation passes without improvement: 2
09/16 08:51:18 AM: edges-spr2_loss: training: 0.244908 validation: 0.322496
09/16 08:51:18 AM: macro_avg: validation: 0.812480
09/16 08:51:18 AM: micro_avg: validation: 0.000000
09/16 08:51:18 AM: edges-spr2_mcc: training: 0.758589 validation: 0.705203
09/16 08:51:18 AM: edges-spr2_acc: training: 0.111435 validation: 0.077778
09/16 08:51:18 AM: edges-spr2_precision: training: 0.859987 validation: 0.831183
09/16 08:51:18 AM: edges-spr2_recall: training: 0.831798 validation: 0.794599
09/16 08:51:18 AM: edges-spr2_f1: training: 0.845658 validation: 0.812480
09/16 08:51:18 AM: Global learning rate: 5e-05
09/16 08:51:18 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:26 AM: ***** Step 1100 / Validation 11 *****
09/16 08:51:26 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:26 AM: Validating...
09/16 08:51:27 AM: Updating LR scheduler:
09/16 08:51:27 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:27 AM: 	# validation passes without improvement: 3
09/16 08:51:27 AM: edges-spr2_loss: training: 0.240424 validation: 0.322970
09/16 08:51:27 AM: macro_avg: validation: 0.810906
09/16 08:51:27 AM: micro_avg: validation: 0.000000
09/16 08:51:27 AM: edges-spr2_mcc: training: 0.764822 validation: 0.705297
09/16 08:51:27 AM: edges-spr2_acc: training: 0.120314 validation: 0.074603
09/16 08:51:27 AM: edges-spr2_precision: training: 0.862464 validation: 0.839517
09/16 08:51:27 AM: edges-spr2_recall: training: 0.836195 validation: 0.784180
09/16 08:51:27 AM: edges-spr2_f1: training: 0.849127 validation: 0.810906
09/16 08:51:27 AM: Global learning rate: 5e-05
09/16 08:51:27 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:27 AM: Update 1103: task edges-spr2, batch 3 (1103): mcc: 0.7456, acc: 0.0809, precision: 0.8534, recall: 0.8176, f1: 0.8351, edges-spr2_loss: 0.2537
09/16 08:51:35 AM: ***** Step 1200 / Validation 12 *****
09/16 08:51:35 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:35 AM: Validating...
09/16 08:51:36 AM: Updating LR scheduler:
09/16 08:51:36 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:36 AM: 	# validation passes without improvement: 0
09/16 08:51:36 AM: edges-spr2_loss: training: 0.240446 validation: 0.324141
09/16 08:51:36 AM: macro_avg: validation: 0.815190
09/16 08:51:36 AM: micro_avg: validation: 0.000000
09/16 08:51:36 AM: edges-spr2_mcc: training: 0.763567 validation: 0.707895
09/16 08:51:36 AM: edges-spr2_acc: training: 0.121876 validation: 0.066667
09/16 08:51:36 AM: edges-spr2_precision: training: 0.862620 validation: 0.827420
09/16 08:51:36 AM: edges-spr2_recall: training: 0.834765 validation: 0.803317
09/16 08:51:36 AM: edges-spr2_f1: training: 0.848464 validation: 0.815190
09/16 08:51:36 AM: Global learning rate: 2.5e-05
09/16 08:51:36 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:37 AM: Update 1215: task edges-spr2, batch 15 (1215): mcc: 0.7753, acc: 0.1441, precision: 0.8677, recall: 0.8445, f1: 0.8559, edges-spr2_loss: 0.2337
09/16 08:51:43 AM: ***** Step 1300 / Validation 13 *****
09/16 08:51:43 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:43 AM: Validating...
09/16 08:51:44 AM: Updating LR scheduler:
09/16 08:51:44 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:44 AM: 	# validation passes without improvement: 1
09/16 08:51:44 AM: edges-spr2_loss: training: 0.235354 validation: 0.325561
09/16 08:51:44 AM: macro_avg: validation: 0.811868
09/16 08:51:44 AM: micro_avg: validation: 0.000000
09/16 08:51:44 AM: edges-spr2_mcc: training: 0.771625 validation: 0.704192
09/16 08:51:44 AM: edges-spr2_acc: training: 0.125072 validation: 0.074603
09/16 08:51:44 AM: edges-spr2_precision: training: 0.867255 validation: 0.830369
09/16 08:51:44 AM: edges-spr2_recall: training: 0.840050 validation: 0.794174
09/16 08:51:44 AM: edges-spr2_f1: training: 0.853436 validation: 0.811868
09/16 08:51:44 AM: Global learning rate: 2.5e-05
09/16 08:51:44 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:47 AM: Update 1331: task edges-spr2, batch 31 (1331): mcc: 0.7674, acc: 0.1241, precision: 0.8641, recall: 0.8395, f1: 0.8516, edges-spr2_loss: 0.2355
09/16 08:51:52 AM: ***** Step 1400 / Validation 14 *****
09/16 08:51:52 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:51:52 AM: Validating...
09/16 08:51:53 AM: Updating LR scheduler:
09/16 08:51:53 AM: 	Best result seen so far for macro_avg: 0.817
09/16 08:51:53 AM: 	# validation passes without improvement: 2
09/16 08:51:53 AM: Ran out of early stopping patience. Stopping training.
09/16 08:51:53 AM: edges-spr2_loss: training: 0.233219 validation: 0.324602
09/16 08:51:53 AM: macro_avg: validation: 0.810463
09/16 08:51:53 AM: micro_avg: validation: 0.000000
09/16 08:51:53 AM: edges-spr2_mcc: training: 0.772671 validation: 0.702604
09/16 08:51:53 AM: edges-spr2_acc: training: 0.131762 validation: 0.069841
09/16 08:51:53 AM: edges-spr2_precision: training: 0.867666 validation: 0.831395
09/16 08:51:53 AM: edges-spr2_recall: training: 0.841800 validation: 0.790559
09/16 08:51:53 AM: edges-spr2_f1: training: 0.854537 validation: 0.810463
09/16 08:51:53 AM: Global learning rate: 2.5e-05
09/16 08:51:53 AM: Saving checkpoints to: ./experiments/spr2-squad-cat/run
09/16 08:51:54 AM: Stopped training after 14 validation checks
09/16 08:51:54 AM: Trained edges-spr2 for 1400 batches or 20.000 epochs
09/16 08:51:54 AM: ***** VALIDATION RESULTS *****
09/16 08:51:54 AM: edges-spr2_f1 (for best val pass 4): edges-spr2_loss: 0.32461, macro_avg: 0.81660, micro_avg: 0.00000, edges-spr2_mcc: 0.71328, edges-spr2_acc: 0.06825, edges-spr2_precision: 0.84176, edges-spr2_recall: 0.79290, edges-spr2_f1: 0.81660
09/16 08:51:54 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.35266, macro_avg: 0.79425, micro_avg: 0.00000, edges-spr2_mcc: 0.68080, edges-spr2_acc: 0.06349, edges-spr2_precision: 0.82776, edges-spr2_recall: 0.76334, edges-spr2_f1: 0.79425
09/16 08:51:54 AM: macro_avg (for best val pass 4): edges-spr2_loss: 0.32461, macro_avg: 0.81660, micro_avg: 0.00000, edges-spr2_mcc: 0.71328, edges-spr2_acc: 0.06825, edges-spr2_precision: 0.84176, edges-spr2_recall: 0.79290, edges-spr2_f1: 0.81660
09/16 08:51:54 AM: Evaluating...
09/16 08:51:54 AM: Loaded model state from ./experiments/spr2-squad-cat/run/edges-spr2/model_state_target_train_val_4.best.th
09/16 08:51:54 AM: Evaluating on: edges-spr2, split: val
09/16 08:51:55 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:51:55 AM: Finished evaluating on: edges-spr2
09/16 08:51:55 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:51:55 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-squad-cat/run
09/16 08:51:55 AM: Wrote all preds for split 'val' to ./experiments/spr2-squad-cat/run
09/16 08:51:55 AM: Evaluating on: edges-spr2, split: test
09/16 08:51:55 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:51:55 AM: Finished evaluating on: edges-spr2
09/16 08:51:55 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:51:56 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-squad-cat/run
09/16 08:51:56 AM: Wrote all preds for split 'test' to ./experiments/spr2-squad-cat/run
09/16 08:51:56 AM: Writing results for split 'val' to ./experiments/spr2-squad-cat/results.tsv
09/16 08:51:56 AM: micro_avg: 0.000, macro_avg: 0.817, edges-spr2_mcc: 0.713, edges-spr2_acc: 0.068, edges-spr2_precision: 0.842, edges-spr2_recall: 0.793, edges-spr2_f1: 0.817
09/16 08:51:56 AM: Done!
09/16 08:51:56 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
