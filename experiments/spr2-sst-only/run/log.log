09/16 08:28:45 AM: Git branch: master
09/16 08:28:45 AM: Git SHA: 1f47e9f0cf1d882ab41f98d47f94e0f8258db16b
09/16 08:28:46 AM: Parsed args: 
{
  "allow_missing_task_map": 1,
  "allow_untrained_encoder_parameters": 1,
  "do_pretrain": 0,
  "exp_dir": "./experiments/spr2-sst-only/",
  "exp_name": "experiments/spr2-sst-only",
  "input_module": "bert-base-uncased",
  "local_log_path": "./experiments/spr2-sst-only/run/log.log",
  "lr_patience": 3,
  "max_seq_len": 512,
  "output_mode": "top",
  "patience": 9,
  "pretrain_tasks": "",
  "pretrained_dir": "models/sst",
  "pytorch_transformers_output_mode": "only",
  "remote_log_name": "experiments/spr2-sst-only__run",
  "run_dir": "./experiments/spr2-sst-only/run",
  "run_name": "run",
  "sent_enc": "none",
  "sep_embs_for_skip": 1,
  "target_tasks": "edges-spr2",
  "tokenizer": "bert-base-uncased",
  "write_preds": "val,test"
}
09/16 08:28:46 AM: Saved config to ./experiments/spr2-sst-only/run/params.conf
09/16 08:28:46 AM: Using random seed 1234
09/16 08:28:48 AM: Using GPU 0
09/16 08:28:48 AM: Loading tasks...
09/16 08:28:48 AM: Writing pre-preprocessed tasks to ./experiments/spr2-sst-only/
09/16 08:28:48 AM: 	Creating task edges-spr2 from scratch.
09/16 08:28:48 AM: Read=2226, Skip=0, Total=2226 from ./probing_data/edges/spr2/edges.train.json.retokenized.bert-base-uncased
09/16 08:28:48 AM: Read=291, Skip=0, Total=291 from ./probing_data/edges/spr2/edges.dev.json.retokenized.bert-base-uncased
09/16 08:28:48 AM: Read=276, Skip=0, Total=276 from ./probing_data/edges/spr2/edges.test.json.retokenized.bert-base-uncased
09/16 08:28:48 AM: 	Task 'edges-spr2': |train|=2226 |val|=291 |test|=276
09/16 08:28:48 AM: 	Finished loading tasks: edges-spr2.
09/16 08:28:48 AM: 	Building vocab from scratch.
09/16 08:28:48 AM: 	Counting units for task edges-spr2.
09/16 08:28:48 AM: 	Task 'edges-spr2': adding vocab namespace 'edges-spr2_labels'
09/16 08:28:49 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at /home/ericwallace/.cache/torch/pytorch_transformers/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:28:49 AM: Added pytorch_transformers vocab (bert-base-uncased): 30522 tokens
09/16 08:28:49 AM: 	Saved vocab to ./experiments/spr2-sst-only/vocab
09/16 08:28:49 AM: Loading token dictionary from ./experiments/spr2-sst-only/vocab.
09/16 08:28:49 AM: 	Loaded vocab from ./experiments/spr2-sst-only/vocab
09/16 08:28:49 AM: 	Vocab namespace tokens: size 7943
09/16 08:28:49 AM: 	Vocab namespace edges-spr2_labels: size 20
09/16 08:28:49 AM: 	Vocab namespace bert_uncased: size 30524
09/16 08:28:49 AM: 	Vocab namespace chars: size 65
09/16 08:28:49 AM: 	Finished building vocab.
09/16 08:28:49 AM: 	Task edges-spr2 (train): Indexing from scratch.
09/16 08:28:50 AM: 	Task edges-spr2 (train): Saved 2226 instances to ./experiments/spr2-sst-only/preproc/edges-spr2__train_data
09/16 08:28:50 AM: 	Task edges-spr2 (val): Indexing from scratch.
09/16 08:28:50 AM: 	Task edges-spr2 (val): Saved 291 instances to ./experiments/spr2-sst-only/preproc/edges-spr2__val_data
09/16 08:28:50 AM: 	Task edges-spr2 (test): Indexing from scratch.
09/16 08:28:50 AM: 	Task edges-spr2 (test): Saved 276 instances to ./experiments/spr2-sst-only/preproc/edges-spr2__test_data
09/16 08:28:50 AM: 	Finished indexing tasks
09/16 08:28:50 AM: 	Creating trimmed target-only version of edges-spr2 train.
09/16 08:28:50 AM: 	  Training on 
09/16 08:28:50 AM: 	  Evaluating on edges-spr2
09/16 08:28:50 AM: 	Finished loading tasks in 2.278s
09/16 08:28:50 AM: 	 Tasks: ['edges-spr2']
09/16 08:28:50 AM: Building model...
09/16 08:28:50 AM: Using BERT model (bert-base-uncased).
09/16 08:28:50 AM: LOADING A FUNETUNED MODEL from: 
09/16 08:28:50 AM: models/sst
09/16 08:28:50 AM: loading configuration file models/sst/config.json
09/16 08:28:50 AM: Model config {
  "attention_probs_dropout_prob": 0.1,
  "finetuning_task": "sst-2",
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "layer_norm_eps": 1e-12,
  "max_position_embeddings": 512,
  "num_attention_heads": 12,
  "num_hidden_layers": 12,
  "num_labels": 2,
  "output_attentions": false,
  "output_hidden_states": true,
  "pruned_heads": {},
  "torchscript": false,
  "type_vocab_size": 2,
  "vocab_size": 30522
}

09/16 08:28:50 AM: loading weights file models/sst/pytorch_model.bin
09/16 08:29:02 AM: https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt not found in cache or force_download set to True, downloading to /tmp/tmp8uc3fm70
09/16 08:29:03 AM: copying /tmp/tmp8uc3fm70 to cache at ./experiments/spr2-sst-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:29:04 AM: creating metadata file for ./experiments/spr2-sst-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:29:04 AM: removing temp file /tmp/tmp8uc3fm70
09/16 08:29:04 AM: loading file https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt from cache at ./experiments/spr2-sst-only/pytorch_transformers_cache/26bc1ad6c0ac742e9b52263248f6d0f00068293b33709fae12320c0e35ccfbbb.542ce4285a40d23a559526243235df47c5f75c197f04f37d1a0c124c32c9a084
09/16 08:29:04 AM: Initializing parameters
09/16 08:29:04 AM: Done initializing parameters; the following parameters are using their default initialization from their code
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.position_embeddings.weight
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.token_type_embeddings.weight
09/16 08:29:04 AM:    _text_field_embedder.model.embeddings.word_embeddings.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.0.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.1.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.10.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.11.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.2.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.3.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.4.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.5.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.6.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.7.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.8.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.key.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.query.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.attention.self.value.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.intermediate.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.encoder.layer.9.output.dense.weight
09/16 08:29:04 AM:    _text_field_embedder.model.pooler.dense.bias
09/16 08:29:04 AM:    _text_field_embedder.model.pooler.dense.weight
09/16 08:29:04 AM: 	Task 'edges-spr2' params: {
  "cls_type": "mlp",
  "d_hid": 256,
  "pool_type": "first",
  "d_proj": 512,
  "shared_pair_attn": 0,
  "attn": 0,
  "d_hid_attn": 512,
  "dropout": 0.3,
  "cls_loss_fn": "sigmoid",
  "cls_span_pooling": "attn",
  "edgeprobe_cnn_context": 0,
  "edgeprobe_symmetric": 0,
  "use_classifier": "edges-spr2"
}
09/16 08:29:09 AM: Model specification:
09/16 08:29:09 AM: MultiTaskModel(
  (sent_encoder): SentenceEncoder(
    (_text_field_embedder): BertEmbedderModule(
      (model): BertModel(
        (embeddings): BertEmbeddings(
          (word_embeddings): Embedding(30522, 768, padding_idx=0)
          (position_embeddings): Embedding(512, 768)
          (token_type_embeddings): Embedding(2, 768)
          (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
          (dropout): Dropout(p=0.1)
        )
        (encoder): BertEncoder(
          (layer): ModuleList(
            (0): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (1): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (2): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (3): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (4): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (5): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (6): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (7): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (8): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (9): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (10): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
            (11): BertLayer(
              (attention): BertAttention(
                (self): BertSelfAttention(
                  (query): Linear(in_features=768, out_features=768, bias=True)
                  (key): Linear(in_features=768, out_features=768, bias=True)
                  (value): Linear(in_features=768, out_features=768, bias=True)
                  (dropout): Dropout(p=0.1)
                )
                (output): BertSelfOutput(
                  (dense): Linear(in_features=768, out_features=768, bias=True)
                  (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                  (dropout): Dropout(p=0.1)
                )
              )
              (intermediate): BertIntermediate(
                (dense): Linear(in_features=768, out_features=3072, bias=True)
              )
              (output): BertOutput(
                (dense): Linear(in_features=3072, out_features=768, bias=True)
                (LayerNorm): LayerNorm(torch.Size([768]), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1)
              )
            )
          )
        )
        (pooler): BertPooler(
          (dense): Linear(in_features=768, out_features=768, bias=True)
          (activation): Tanh()
        )
      )
    )
    (_highway_layer): TimeDistributed(
      (_module): Highway(
        (_layers): ModuleList()
      )
    )
    (_phrase_layer): NullPhraseLayer()
    (_dropout): Dropout(p=0.2)
  )
  (edges-spr2_mdl): EdgeClassifierModule(
    (proj1): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (proj2): Conv1d(768, 256, kernel_size=(1,), stride=(1,))
    (span_extractor1): EndpointSpanExtractor()
    (span_extractor2): EndpointSpanExtractor()
    (classifier): Classifier(
      (classifier): Sequential(
        (0): Linear(in_features=1024, out_features=256, bias=True)
        (1): Tanh()
        (2): LayerNorm(torch.Size([256]), eps=1e-05, elementwise_affine=True)
        (3): Dropout(p=0.3)
        (4): Linear(in_features=256, out_features=20, bias=True)
      )
    )
  )
)
09/16 08:29:09 AM: Model parameters:
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.word_embeddings.weight: Non-trainable parameter, count 23440896 with torch.Size([30522, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.position_embeddings.weight: Non-trainable parameter, count 393216 with torch.Size([512, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.token_type_embeddings.weight: Non-trainable parameter, count 1536 with torch.Size([2, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.embeddings.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.0.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.1.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.2.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.3.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.4.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.5.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.6.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.7.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.8.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.9.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.10.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.query.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.key.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.self.value.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.attention.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([3072, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.intermediate.dense.bias: Non-trainable parameter, count 3072 with torch.Size([3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.weight: Non-trainable parameter, count 2359296 with torch.Size([768, 3072])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.weight: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.encoder.layer.11.output.LayerNorm.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.weight: Non-trainable parameter, count 589824 with torch.Size([768, 768])
09/16 08:29:09 AM: 	sent_encoder._text_field_embedder.model.pooler.dense.bias: Non-trainable parameter, count 768 with torch.Size([768])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj1.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj1.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj2.weight: Trainable parameter, count 196608 with torch.Size([256, 768, 1])
09/16 08:29:09 AM: 	edges-spr2_mdl.proj2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.0.weight: Trainable parameter, count 262144 with torch.Size([256, 1024])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.0.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.2.weight: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.2.bias: Trainable parameter, count 256 with torch.Size([256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.4.weight: Trainable parameter, count 5120 with torch.Size([20, 256])
09/16 08:29:09 AM: 	edges-spr2_mdl.classifier.classifier.4.bias: Trainable parameter, count 20 with torch.Size([20])
09/16 08:29:09 AM: Total number of parameters: 110144020 (1.10144e+08)
09/16 08:29:09 AM: Number of trainable parameters: 661780 (661780)
09/16 08:29:09 AM: Finished building model in 19.168s
09/16 08:29:09 AM: Will run the following steps for this experiment:
Re-training model for individual target tasks 
Evaluating model on tasks: edges-spr2 

09/16 08:29:10 AM: patience = 9
09/16 08:29:10 AM: val_interval = 100
09/16 08:29:10 AM: max_vals = 100
09/16 08:29:10 AM: cuda_device = 0
09/16 08:29:10 AM: grad_norm = 5.0
09/16 08:29:10 AM: grad_clipping = None
09/16 08:29:10 AM: lr_decay = 0.99
09/16 08:29:10 AM: min_lr = 1e-06
09/16 08:29:10 AM: keep_all_checkpoints = 0
09/16 08:29:10 AM: val_data_limit = 5000
09/16 08:29:10 AM: max_epochs = -1
09/16 08:29:10 AM: dec_val_scale = 250
09/16 08:29:10 AM: training_data_fraction = 1
09/16 08:29:10 AM: type = adam
09/16 08:29:10 AM: parameter_groups = None
09/16 08:29:10 AM: Number of trainable parameters: 661780
09/16 08:29:10 AM: infer_type_and_cast = True
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: lr = 0.0001
09/16 08:29:10 AM: amsgrad = True
09/16 08:29:10 AM: type = reduce_on_plateau
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: mode = max
09/16 08:29:10 AM: factor = 0.5
09/16 08:29:10 AM: patience = 3
09/16 08:29:10 AM: threshold = 0.0001
09/16 08:29:10 AM: threshold_mode = abs
09/16 08:29:10 AM: verbose = True
09/16 08:29:10 AM: type = adam
09/16 08:29:10 AM: parameter_groups = None
09/16 08:29:10 AM: Number of trainable parameters: 661780
09/16 08:29:10 AM: infer_type_and_cast = True
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: lr = 0.0001
09/16 08:29:10 AM: amsgrad = True
09/16 08:29:10 AM: type = reduce_on_plateau
09/16 08:29:10 AM: Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
09/16 08:29:10 AM: CURRENTLY DEFINED PARAMETERS: 
09/16 08:29:10 AM: mode = max
09/16 08:29:10 AM: factor = 0.5
09/16 08:29:10 AM: patience = 3
09/16 08:29:10 AM: threshold = 0.0001
09/16 08:29:10 AM: threshold_mode = abs
09/16 08:29:10 AM: verbose = True
09/16 08:29:10 AM: Starting training without restoring from a checkpoint.
09/16 08:29:10 AM: Training examples per task, before any subsampling: {'edges-spr2': 2226}
09/16 08:29:10 AM: Beginning training with stopping criteria based on metric: edges-spr2_f1
09/16 08:29:13 AM: ***** Step 100 / Validation 1 *****
09/16 08:29:13 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:13 AM: Validating...
09/16 08:29:14 AM: Best result seen so far for edges-spr2.
09/16 08:29:14 AM: Best result seen so far for micro.
09/16 08:29:14 AM: Best result seen so far for macro.
09/16 08:29:14 AM: Updating LR scheduler:
09/16 08:29:14 AM: 	Best result seen so far for macro_avg: 0.785
09/16 08:29:14 AM: 	# validation passes without improvement: 0
09/16 08:29:14 AM: edges-spr2_loss: training: 0.390129 validation: 0.352781
09/16 08:29:14 AM: macro_avg: validation: 0.785326
09/16 08:29:14 AM: micro_avg: validation: 0.000000
09/16 08:29:14 AM: edges-spr2_mcc: training: 0.603474 validation: 0.673607
09/16 08:29:14 AM: edges-spr2_acc: training: 0.044692 validation: 0.074603
09/16 08:29:14 AM: edges-spr2_precision: training: 0.764733 validation: 0.839913
09/16 08:29:14 AM: edges-spr2_recall: training: 0.725191 validation: 0.737402
09/16 08:29:14 AM: edges-spr2_f1: training: 0.744438 validation: 0.785326
09/16 08:29:14 AM: Global learning rate: 0.0001
09/16 08:29:14 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:17 AM: ***** Step 200 / Validation 2 *****
09/16 08:29:17 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:17 AM: Validating...
09/16 08:29:17 AM: Best result seen so far for edges-spr2.
09/16 08:29:17 AM: Best result seen so far for macro.
09/16 08:29:17 AM: Updating LR scheduler:
09/16 08:29:17 AM: 	Best result seen so far for macro_avg: 0.798
09/16 08:29:17 AM: 	# validation passes without improvement: 0
09/16 08:29:17 AM: edges-spr2_loss: training: 0.320260 validation: 0.340331
09/16 08:29:17 AM: macro_avg: validation: 0.797728
09/16 08:29:17 AM: micro_avg: validation: 0.000000
09/16 08:29:17 AM: edges-spr2_mcc: training: 0.679802 validation: 0.688060
09/16 08:29:17 AM: edges-spr2_acc: training: 0.057898 validation: 0.076190
09/16 08:29:17 AM: edges-spr2_precision: training: 0.822770 validation: 0.837661
09/16 08:29:17 AM: edges-spr2_recall: training: 0.762586 validation: 0.761429
09/16 08:29:17 AM: edges-spr2_f1: training: 0.791536 validation: 0.797728
09/16 08:29:17 AM: Global learning rate: 0.0001
09/16 08:29:17 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:20 AM: Update 285: task edges-spr2, batch 85 (285): mcc: 0.6935, acc: 0.0709, precision: 0.8281, recall: 0.7760, f1: 0.8012, edges-spr2_loss: 0.3056
09/16 08:29:20 AM: ***** Step 300 / Validation 3 *****
09/16 08:29:20 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:20 AM: Validating...
09/16 08:29:20 AM: Updating LR scheduler:
09/16 08:29:20 AM: 	Best result seen so far for macro_avg: 0.798
09/16 08:29:20 AM: 	# validation passes without improvement: 1
09/16 08:29:20 AM: edges-spr2_loss: training: 0.304060 validation: 0.336220
09/16 08:29:20 AM: macro_avg: validation: 0.796106
09/16 08:29:20 AM: micro_avg: validation: 0.000000
09/16 08:29:20 AM: edges-spr2_mcc: training: 0.696015 validation: 0.686836
09/16 08:29:20 AM: edges-spr2_acc: training: 0.071499 validation: 0.077778
09/16 08:29:20 AM: edges-spr2_precision: training: 0.830555 validation: 0.840302
09/16 08:29:20 AM: edges-spr2_recall: training: 0.776859 validation: 0.756326
09/16 08:29:20 AM: edges-spr2_f1: training: 0.802810 validation: 0.796106
09/16 08:29:20 AM: Global learning rate: 0.0001
09/16 08:29:20 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:23 AM: ***** Step 400 / Validation 4 *****
09/16 08:29:23 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:23 AM: Validating...
09/16 08:29:24 AM: Best result seen so far for edges-spr2.
09/16 08:29:24 AM: Best result seen so far for macro.
09/16 08:29:24 AM: Updating LR scheduler:
09/16 08:29:24 AM: 	Best result seen so far for macro_avg: 0.800
09/16 08:29:24 AM: 	# validation passes without improvement: 0
09/16 08:29:24 AM: edges-spr2_loss: training: 0.291769 validation: 0.338083
09/16 08:29:24 AM: macro_avg: validation: 0.799776
09/16 08:29:24 AM: micro_avg: validation: 0.000000
09/16 08:29:24 AM: edges-spr2_mcc: training: 0.708508 validation: 0.692721
09/16 08:29:24 AM: edges-spr2_acc: training: 0.076695 validation: 0.073016
09/16 08:29:24 AM: edges-spr2_precision: training: 0.833871 validation: 0.844807
09/16 08:29:24 AM: edges-spr2_recall: training: 0.790708 validation: 0.759303
09/16 08:29:24 AM: edges-spr2_f1: training: 0.811716 validation: 0.799776
09/16 08:29:24 AM: Global learning rate: 0.0001
09/16 08:29:24 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:27 AM: ***** Step 500 / Validation 5 *****
09/16 08:29:27 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:27 AM: Validating...
09/16 08:29:27 AM: Best result seen so far for edges-spr2.
09/16 08:29:27 AM: Best result seen so far for macro.
09/16 08:29:27 AM: Updating LR scheduler:
09/16 08:29:27 AM: 	Best result seen so far for macro_avg: 0.803
09/16 08:29:27 AM: 	# validation passes without improvement: 0
09/16 08:29:27 AM: edges-spr2_loss: training: 0.283726 validation: 0.337031
09/16 08:29:27 AM: macro_avg: validation: 0.802997
09/16 08:29:27 AM: micro_avg: validation: 0.000000
09/16 08:29:27 AM: edges-spr2_mcc: training: 0.717065 validation: 0.693454
09/16 08:29:27 AM: edges-spr2_acc: training: 0.084907 validation: 0.069841
09/16 08:29:27 AM: edges-spr2_precision: training: 0.838007 validation: 0.833295
09/16 08:29:27 AM: edges-spr2_recall: training: 0.798580 validation: 0.774825
09/16 08:29:27 AM: edges-spr2_f1: training: 0.817819 validation: 0.802997
09/16 08:29:27 AM: Global learning rate: 0.0001
09/16 08:29:27 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:30 AM: Update 588: task edges-spr2, batch 88 (588): mcc: 0.7242, acc: 0.0895, precision: 0.8408, recall: 0.8051, f1: 0.8226, edges-spr2_loss: 0.2772
09/16 08:29:30 AM: ***** Step 600 / Validation 6 *****
09/16 08:29:30 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:30 AM: Validating...
09/16 08:29:30 AM: Best result seen so far for edges-spr2.
09/16 08:29:30 AM: Best result seen so far for macro.
09/16 08:29:30 AM: Updating LR scheduler:
09/16 08:29:30 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:30 AM: 	# validation passes without improvement: 0
09/16 08:29:30 AM: edges-spr2_loss: training: 0.276951 validation: 0.338773
09/16 08:29:30 AM: macro_avg: validation: 0.803720
09/16 08:29:30 AM: micro_avg: validation: 0.000000
09/16 08:29:30 AM: edges-spr2_mcc: training: 0.724853 validation: 0.692884
09/16 08:29:30 AM: edges-spr2_acc: training: 0.091152 validation: 0.066667
09/16 08:29:30 AM: edges-spr2_precision: training: 0.841425 validation: 0.827812
09/16 08:29:30 AM: edges-spr2_recall: training: 0.805110 validation: 0.780991
09/16 08:29:30 AM: edges-spr2_f1: training: 0.822867 validation: 0.803720
09/16 08:29:30 AM: Global learning rate: 0.0001
09/16 08:29:30 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:33 AM: ***** Step 700 / Validation 7 *****
09/16 08:29:33 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:34 AM: Validating...
09/16 08:29:34 AM: Updating LR scheduler:
09/16 08:29:34 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:34 AM: 	# validation passes without improvement: 1
09/16 08:29:34 AM: edges-spr2_loss: training: 0.269966 validation: 0.342310
09/16 08:29:34 AM: macro_avg: validation: 0.800527
09/16 08:29:34 AM: micro_avg: validation: 0.000000
09/16 08:29:34 AM: edges-spr2_mcc: training: 0.732811 validation: 0.688692
09/16 08:29:34 AM: edges-spr2_acc: training: 0.084036 validation: 0.073016
09/16 08:29:34 AM: edges-spr2_precision: training: 0.844846 validation: 0.827508
09/16 08:29:34 AM: edges-spr2_recall: training: 0.812722 validation: 0.775250
09/16 08:29:34 AM: edges-spr2_f1: training: 0.828473 validation: 0.800527
09/16 08:29:34 AM: Global learning rate: 0.0001
09/16 08:29:34 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:37 AM: ***** Step 800 / Validation 8 *****
09/16 08:29:37 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:37 AM: Validating...
09/16 08:29:37 AM: Updating LR scheduler:
09/16 08:29:37 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:37 AM: 	# validation passes without improvement: 2
09/16 08:29:37 AM: edges-spr2_loss: training: 0.264725 validation: 0.344057
09/16 08:29:37 AM: macro_avg: validation: 0.800177
09/16 08:29:37 AM: micro_avg: validation: 0.000000
09/16 08:29:37 AM: edges-spr2_mcc: training: 0.738164 validation: 0.689827
09/16 08:29:37 AM: edges-spr2_acc: training: 0.094539 validation: 0.071429
09/16 08:29:37 AM: edges-spr2_precision: training: 0.848032 validation: 0.833142
09/16 08:29:37 AM: edges-spr2_recall: training: 0.816240 validation: 0.769721
09/16 08:29:37 AM: edges-spr2_f1: training: 0.831833 validation: 0.800177
09/16 08:29:37 AM: Global learning rate: 0.0001
09/16 08:29:37 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:40 AM: Update 890: task edges-spr2, batch 90 (890): mcc: 0.7397, acc: 0.0961, precision: 0.8484, recall: 0.8175, f1: 0.8327, edges-spr2_loss: 0.2606
09/16 08:29:40 AM: ***** Step 900 / Validation 9 *****
09/16 08:29:40 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:40 AM: Validating...
09/16 08:29:40 AM: Updating LR scheduler:
09/16 08:29:40 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:40 AM: 	# validation passes without improvement: 3
09/16 08:29:40 AM: edges-spr2_loss: training: 0.260840 validation: 0.348612
09/16 08:29:40 AM: macro_avg: validation: 0.799034
09/16 08:29:40 AM: micro_avg: validation: 0.000000
09/16 08:29:40 AM: edges-spr2_mcc: training: 0.739063 validation: 0.686433
09/16 08:29:40 AM: edges-spr2_acc: training: 0.095388 validation: 0.068254
09/16 08:29:40 AM: edges-spr2_precision: training: 0.848236 validation: 0.826255
09/16 08:29:40 AM: edges-spr2_recall: training: 0.816722 validation: 0.773549
09/16 08:29:40 AM: edges-spr2_f1: training: 0.832181 validation: 0.799034
09/16 08:29:40 AM: Global learning rate: 0.0001
09/16 08:29:40 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:44 AM: ***** Step 1000 / Validation 10 *****
09/16 08:29:44 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:44 AM: Validating...
09/16 08:29:44 AM: Updating LR scheduler:
09/16 08:29:44 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:44 AM: 	# validation passes without improvement: 0
09/16 08:29:44 AM: edges-spr2_loss: training: 0.258574 validation: 0.349615
09/16 08:29:44 AM: macro_avg: validation: 0.792064
09/16 08:29:44 AM: micro_avg: validation: 0.000000
09/16 08:29:44 AM: edges-spr2_mcc: training: 0.743427 validation: 0.677919
09/16 08:29:44 AM: edges-spr2_acc: training: 0.104496 validation: 0.069841
09/16 08:29:44 AM: edges-spr2_precision: training: 0.851616 validation: 0.827275
09/16 08:29:44 AM: edges-spr2_recall: training: 0.820468 validation: 0.759728
09/16 08:29:44 AM: edges-spr2_f1: training: 0.835752 validation: 0.792064
09/16 08:29:44 AM: Global learning rate: 5e-05
09/16 08:29:44 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:47 AM: ***** Step 1100 / Validation 11 *****
09/16 08:29:47 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:47 AM: Validating...
09/16 08:29:47 AM: Updating LR scheduler:
09/16 08:29:47 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:47 AM: 	# validation passes without improvement: 1
09/16 08:29:47 AM: edges-spr2_loss: training: 0.250456 validation: 0.349595
09/16 08:29:47 AM: macro_avg: validation: 0.797504
09/16 08:29:47 AM: micro_avg: validation: 0.000000
09/16 08:29:47 AM: edges-spr2_mcc: training: 0.753033 validation: 0.683232
09/16 08:29:47 AM: edges-spr2_acc: training: 0.106946 validation: 0.061905
09/16 08:29:47 AM: edges-spr2_precision: training: 0.855081 validation: 0.821791
09/16 08:29:47 AM: edges-spr2_recall: training: 0.828406 validation: 0.774612
09/16 08:29:47 AM: edges-spr2_f1: training: 0.841532 validation: 0.797504
09/16 08:29:47 AM: Global learning rate: 5e-05
09/16 08:29:47 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:50 AM: Update 1191: task edges-spr2, batch 91 (1191): mcc: 0.7551, acc: 0.1132, precision: 0.8582, recall: 0.8280, f1: 0.8429, edges-spr2_loss: 0.2507
09/16 08:29:50 AM: ***** Step 1200 / Validation 12 *****
09/16 08:29:50 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:50 AM: Validating...
09/16 08:29:50 AM: Updating LR scheduler:
09/16 08:29:50 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:50 AM: 	# validation passes without improvement: 2
09/16 08:29:50 AM: edges-spr2_loss: training: 0.250710 validation: 0.350597
09/16 08:29:50 AM: macro_avg: validation: 0.799827
09/16 08:29:50 AM: micro_avg: validation: 0.000000
09/16 08:29:50 AM: edges-spr2_mcc: training: 0.754048 validation: 0.684343
09/16 08:29:50 AM: edges-spr2_acc: training: 0.113221 validation: 0.060317
09/16 08:29:50 AM: edges-spr2_precision: training: 0.857101 validation: 0.814733
09/16 08:29:50 AM: edges-spr2_recall: training: 0.827951 validation: 0.785456
09/16 08:29:50 AM: edges-spr2_f1: training: 0.842274 validation: 0.799827
09/16 08:29:50 AM: Global learning rate: 5e-05
09/16 08:29:50 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:53 AM: ***** Step 1300 / Validation 13 *****
09/16 08:29:53 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:53 AM: Validating...
09/16 08:29:54 AM: Updating LR scheduler:
09/16 08:29:54 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:54 AM: 	# validation passes without improvement: 3
09/16 08:29:54 AM: edges-spr2_loss: training: 0.247383 validation: 0.354990
09/16 08:29:54 AM: macro_avg: validation: 0.795057
09/16 08:29:54 AM: micro_avg: validation: 0.000000
09/16 08:29:54 AM: edges-spr2_mcc: training: 0.758519 validation: 0.679177
09/16 08:29:54 AM: edges-spr2_acc: training: 0.113256 validation: 0.061905
09/16 08:29:54 AM: edges-spr2_precision: training: 0.859757 validation: 0.818509
09/16 08:29:54 AM: edges-spr2_recall: training: 0.830528 validation: 0.772911
09/16 08:29:54 AM: edges-spr2_f1: training: 0.844890 validation: 0.795057
09/16 08:29:54 AM: Global learning rate: 5e-05
09/16 08:29:54 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:29:57 AM: ***** Step 1400 / Validation 14 *****
09/16 08:29:57 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:29:57 AM: Validating...
09/16 08:29:57 AM: Updating LR scheduler:
09/16 08:29:57 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:29:57 AM: 	# validation passes without improvement: 0
09/16 08:29:57 AM: edges-spr2_loss: training: 0.245837 validation: 0.354806
09/16 08:29:57 AM: macro_avg: validation: 0.793895
09/16 08:29:57 AM: micro_avg: validation: 0.000000
09/16 08:29:57 AM: edges-spr2_mcc: training: 0.758573 validation: 0.678353
09/16 08:29:57 AM: edges-spr2_acc: training: 0.117280 validation: 0.053968
09/16 08:29:57 AM: edges-spr2_precision: training: 0.859495 validation: 0.820845
09/16 08:29:57 AM: edges-spr2_recall: training: 0.831741 validation: 0.768658
09/16 08:29:57 AM: edges-spr2_f1: training: 0.845390 validation: 0.793895
09/16 08:29:57 AM: Global learning rate: 2.5e-05
09/16 08:29:57 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:30:00 AM: Update 1497: task edges-spr2, batch 97 (1497): mcc: 0.7600, acc: 0.1207, precision: 0.8608, recall: 0.8320, f1: 0.8462, edges-spr2_loss: 0.2432
09/16 08:30:00 AM: ***** Step 1500 / Validation 15 *****
09/16 08:30:00 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:00 AM: Validating...
09/16 08:30:00 AM: Updating LR scheduler:
09/16 08:30:00 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:30:00 AM: 	# validation passes without improvement: 1
09/16 08:30:00 AM: edges-spr2_loss: training: 0.242823 validation: 0.355290
09/16 08:30:00 AM: macro_avg: validation: 0.799264
09/16 08:30:00 AM: micro_avg: validation: 0.000000
09/16 08:30:00 AM: edges-spr2_mcc: training: 0.760731 validation: 0.683359
09/16 08:30:00 AM: edges-spr2_acc: training: 0.121000 validation: 0.052381
09/16 08:30:00 AM: edges-spr2_precision: training: 0.861646 validation: 0.813795
09/16 08:30:00 AM: edges-spr2_recall: training: 0.832291 validation: 0.785243
09/16 08:30:00 AM: edges-spr2_f1: training: 0.846714 validation: 0.799264
09/16 08:30:00 AM: Global learning rate: 2.5e-05
09/16 08:30:00 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:30:03 AM: ***** Step 1600 / Validation 16 *****
09/16 08:30:03 AM: edges-spr2: trained on 100 batches, 1.429 epochs
09/16 08:30:03 AM: Validating...
09/16 08:30:03 AM: Updating LR scheduler:
09/16 08:30:03 AM: 	Best result seen so far for macro_avg: 0.804
09/16 08:30:03 AM: 	# validation passes without improvement: 2
09/16 08:30:03 AM: Ran out of early stopping patience. Stopping training.
09/16 08:30:03 AM: edges-spr2_loss: training: 0.243923 validation: 0.355605
09/16 08:30:03 AM: macro_avg: validation: 0.796481
09/16 08:30:03 AM: micro_avg: validation: 0.000000
09/16 08:30:03 AM: edges-spr2_mcc: training: 0.760680 validation: 0.679773
09/16 08:30:03 AM: edges-spr2_acc: training: 0.120322 validation: 0.052381
09/16 08:30:03 AM: edges-spr2_precision: training: 0.860456 validation: 0.813984
09/16 08:30:03 AM: edges-spr2_recall: training: 0.832807 validation: 0.779715
09/16 08:30:03 AM: edges-spr2_f1: training: 0.846406 validation: 0.796481
09/16 08:30:03 AM: Global learning rate: 2.5e-05
09/16 08:30:03 AM: Saving checkpoints to: ./experiments/spr2-sst-only/run
09/16 08:30:03 AM: Stopped training after 16 validation checks
09/16 08:30:03 AM: Trained edges-spr2 for 1600 batches or 22.857 epochs
09/16 08:30:03 AM: ***** VALIDATION RESULTS *****
09/16 08:30:03 AM: edges-spr2_f1 (for best val pass 6): edges-spr2_loss: 0.33877, macro_avg: 0.80372, micro_avg: 0.00000, edges-spr2_mcc: 0.69288, edges-spr2_acc: 0.06667, edges-spr2_precision: 0.82781, edges-spr2_recall: 0.78099, edges-spr2_f1: 0.80372
09/16 08:30:03 AM: micro_avg (for best val pass 1): edges-spr2_loss: 0.35278, macro_avg: 0.78533, micro_avg: 0.00000, edges-spr2_mcc: 0.67361, edges-spr2_acc: 0.07460, edges-spr2_precision: 0.83991, edges-spr2_recall: 0.73740, edges-spr2_f1: 0.78533
09/16 08:30:03 AM: macro_avg (for best val pass 6): edges-spr2_loss: 0.33877, macro_avg: 0.80372, micro_avg: 0.00000, edges-spr2_mcc: 0.69288, edges-spr2_acc: 0.06667, edges-spr2_precision: 0.82781, edges-spr2_recall: 0.78099, edges-spr2_f1: 0.80372
09/16 08:30:03 AM: Evaluating...
09/16 08:30:03 AM: Loaded model state from ./experiments/spr2-sst-only/run/edges-spr2/model_state_target_train_val_6.best.th
09/16 08:30:03 AM: Evaluating on: edges-spr2, split: val
09/16 08:30:04 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:30:04 AM: Finished evaluating on: edges-spr2
09/16 08:30:04 AM: Task 'edges-spr2': joining predictions with input split 'val'
09/16 08:30:04 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-sst-only/run
09/16 08:30:04 AM: Wrote all preds for split 'val' to ./experiments/spr2-sst-only/run
09/16 08:30:04 AM: Evaluating on: edges-spr2, split: test
09/16 08:30:04 AM: Task 'edges-spr2': sorting predictions by 'idx'
09/16 08:30:04 AM: Finished evaluating on: edges-spr2
09/16 08:30:04 AM: Task 'edges-spr2': joining predictions with input split 'test'
09/16 08:30:04 AM: Task 'edges-spr2': Wrote predictions to ./experiments/spr2-sst-only/run
09/16 08:30:04 AM: Wrote all preds for split 'test' to ./experiments/spr2-sst-only/run
09/16 08:30:04 AM: Writing results for split 'val' to ./experiments/spr2-sst-only/results.tsv
09/16 08:30:04 AM: micro_avg: 0.000, macro_avg: 0.804, edges-spr2_mcc: 0.693, edges-spr2_acc: 0.067, edges-spr2_precision: 0.828, edges-spr2_recall: 0.781, edges-spr2_f1: 0.804
09/16 08:30:04 AM: Done!
09/16 08:30:04 AM: Fatal error in main():
Traceback (most recent call last):
  File "main.py", line 16, in <module>
    main(sys.argv[1:])
  File "/srv/home/ericwallace/jiant/jiant/__main__.py", line 610, in main
    exit("Done exited")
  File "/home/ericwallace/miniconda3/envs/jiant/lib/python3.6/_sitebuiltins.py", line 26, in __call__
    raise SystemExit(code)
SystemExit: Done exited
